syntax = "proto3";

package google.cloud.compute.v1;

import "google/api/annotations.proto";
import "google/api/resource.proto";

//
// File level resource definitions
//
option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectAggregatedAcceleratorType"
  pattern: "{project}/aggregated/acceleratorTypes"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneAcceleratorType"
  pattern: "{project}/zones/{zone}/acceleratorTypes/{acceleratorType}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneAcceleratorType"
  pattern: "{project}/zones/{zone}/acceleratorTypes"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectAggregatedAddress"
  pattern: "{project}/aggregated/addresses"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionAddress"
  pattern: "{project}/regions/{region}/addresses/{address}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionAddress"
  pattern: "{project}/regions/{region}/addresses"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectAggregatedAutoscaler"
  pattern: "{project}/aggregated/autoscalers"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneAutoscaler"
  pattern: "{project}/zones/{zone}/autoscalers/{autoscaler}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneAutoscaler"
  pattern: "{project}/zones/{zone}/autoscalers"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalBackendBucketAddSignedUrlKey"
  pattern: "{project}/global/backendBuckets/{backendBucket}/addSignedUrlKey"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalBackendBucket"
  pattern: "{project}/global/backendBuckets/{backendBucket}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalBackendBucketDeleteSignedUrlKey"
  pattern: "{project}/global/backendBuckets/{backendBucket}/deleteSignedUrlKey"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalBackendBucket"
  pattern: "{project}/global/backendBuckets"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalBackendServiceAddSignedUrlKey"
  pattern: "{project}/global/backendServices/{backendService}/addSignedUrlKey"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectAggregatedBackendService"
  pattern: "{project}/aggregated/backendServices"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalBackendService"
  pattern: "{project}/global/backendServices/{backendService}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalBackendServiceDeleteSignedUrlKey"
  pattern: "{project}/global/backendServices/{backendService}/deleteSignedUrlKey"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalBackendServiceGetHealth"
  pattern: "{project}/global/backendServices/{backendService}/getHealth"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalBackendService"
  pattern: "{project}/global/backendServices"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalBackendServiceSetSecurityPolicy"
  pattern: "{project}/global/backendServices/{backendService}/setSecurityPolicy"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectAggregatedDiskType"
  pattern: "{project}/aggregated/diskTypes"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneDiskType"
  pattern: "{project}/zones/{zone}/diskTypes/{diskType}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneDiskType"
  pattern: "{project}/zones/{zone}/diskTypes"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneDiskAddResourcePolicy"
  pattern: "{project}/zones/{zone}/disks/{disk}/addResourcePolicies"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectAggregatedDisk"
  pattern: "{project}/aggregated/disks"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneDiskCreateSnapshot"
  pattern: "{project}/zones/{zone}/disks/{disk}/createSnapshot"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneDisk"
  pattern: "{project}/zones/{zone}/disks/{disk}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneDiskResourceGetIamPolicy"
  pattern: "{project}/zones/{zone}/disks/{resource}/getIamPolicy"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneDisk"
  pattern: "{project}/zones/{zone}/disks"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneDiskRemoveResourcePolicy"
  pattern: "{project}/zones/{zone}/disks/{disk}/removeResourcePolicies"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneDiskResize"
  pattern: "{project}/zones/{zone}/disks/{disk}/resize"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneDiskResourceSetIamPolicy"
  pattern: "{project}/zones/{zone}/disks/{resource}/setIamPolicy"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneDiskResourceSetLabel"
  pattern: "{project}/zones/{zone}/disks/{resource}/setLabels"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneDiskResourceTestIamPermission"
  pattern: "{project}/zones/{zone}/disks/{resource}/testIamPermissions"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalExternalVpnGateway"
  pattern: "{project}/global/externalVpnGateways/{externalVpnGateway}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalExternalVpnGateway"
  pattern: "{project}/global/externalVpnGateways"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalExternalVpnGatewayResourceSetLabel"
  pattern: "{project}/global/externalVpnGateways/{resource}/setLabels"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalExternalVpnGatewayResourceTestIamPermission"
  pattern: "{project}/global/externalVpnGateways/{resource}/testIamPermissions"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalFirewall"
  pattern: "{project}/global/firewalls/{firewall}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalFirewall"
  pattern: "{project}/global/firewalls"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectAggregatedForwardingRule"
  pattern: "{project}/aggregated/forwardingRules"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionForwardingRule"
  pattern: "{project}/regions/{region}/forwardingRules/{forwardingRule}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionForwardingRule"
  pattern: "{project}/regions/{region}/forwardingRules"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionForwardingRuleSetTarget"
  pattern: "{project}/regions/{region}/forwardingRules/{forwardingRule}/setTarget"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalAddress"
  pattern: "{project}/global/addresses/{address}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalAddress"
  pattern: "{project}/global/addresses"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalForwardingRule"
  pattern: "{project}/global/forwardingRules/{forwardingRule}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalForwardingRule"
  pattern: "{project}/global/forwardingRules"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalForwardingRuleSetTarget"
  pattern: "{project}/global/forwardingRules/{forwardingRule}/setTarget"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalNetworkEndpointGroupAttachNetworkEndpoint"
  pattern: "{project}/global/networkEndpointGroups/{networkEndpointGroup}/attachNetworkEndpoints"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalNetworkEndpointGroup"
  pattern: "{project}/global/networkEndpointGroups/{networkEndpointGroup}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalNetworkEndpointGroupDetachNetworkEndpoint"
  pattern: "{project}/global/networkEndpointGroups/{networkEndpointGroup}/detachNetworkEndpoints"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalNetworkEndpointGroup"
  pattern: "{project}/global/networkEndpointGroups"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalNetworkEndpointGroupListNetworkEndpoint"
  pattern: "{project}/global/networkEndpointGroups/{networkEndpointGroup}/listNetworkEndpoints"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectAggregatedOperation"
  pattern: "{project}/aggregated/operations"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalOperation"
  pattern: "{project}/global/operations/{operation}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalOperation"
  pattern: "{project}/global/operations"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalOperationWait"
  pattern: "{project}/global/operations/{operation}/wait"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectAggregatedHealthCheck"
  pattern: "{project}/aggregated/healthChecks"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalHealthCheck"
  pattern: "{project}/global/healthChecks/{healthCheck}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalHealthCheck"
  pattern: "{project}/global/healthChecks"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalHttpHealthCheck"
  pattern: "{project}/global/httpHealthChecks/{httpHealthCheck}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalHttpHealthCheck"
  pattern: "{project}/global/httpHealthChecks"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalHttpsHealthCheck"
  pattern: "{project}/global/httpsHealthChecks/{httpsHealthCheck}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalHttpsHealthCheck"
  pattern: "{project}/global/httpsHealthChecks"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalImage"
  pattern: "{project}/global/images/{image}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalImageDeprecate"
  pattern: "{project}/global/images/{image}/deprecate"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalImageFamily"
  pattern: "{project}/global/images/family/{family}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalImageResourceGetIamPolicy"
  pattern: "{project}/global/images/{resource}/getIamPolicy"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalImage"
  pattern: "{project}/global/images"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalImageResourceSetIamPolicy"
  pattern: "{project}/global/images/{resource}/setIamPolicy"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalImageResourceSetLabel"
  pattern: "{project}/global/images/{resource}/setLabels"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalImageResourceTestIamPermission"
  pattern: "{project}/global/images/{resource}/testIamPermissions"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceGroupManagerAbandonInstance"
  pattern: "{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/abandonInstances"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectAggregatedInstanceGroupManager"
  pattern: "{project}/aggregated/instanceGroupManagers"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceGroupManagerApplyUpdatesToInstance"
  pattern: "{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/applyUpdatesToInstances"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceGroupManagerCreateInstance"
  pattern: "{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/createInstances"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceGroupManager"
  pattern: "{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceGroupManagerDeleteInstance"
  pattern: "{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/deleteInstances"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceGroupManager"
  pattern: "{project}/zones/{zone}/instanceGroupManagers"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceGroupManagerListError"
  pattern: "{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listErrors"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceGroupManagerListManagedInstance"
  pattern: "{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceGroupManagerRecreateInstance"
  pattern: "{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/recreateInstances"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceGroupManagerResize"
  pattern: "{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceGroupManagerSetInstanceTemplate"
  pattern: "{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceGroupManagerSetTargetPool"
  pattern: "{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setTargetPools"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceGroupAddInstance"
  pattern: "{project}/zones/{zone}/instanceGroups/{instanceGroup}/addInstances"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectAggregatedInstanceGroup"
  pattern: "{project}/aggregated/instanceGroups"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceGroup"
  pattern: "{project}/zones/{zone}/instanceGroups/{instanceGroup}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceGroup"
  pattern: "{project}/zones/{zone}/instanceGroups"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceGroupListInstance"
  pattern: "{project}/zones/{zone}/instanceGroups/{instanceGroup}/listInstances"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceGroupRemoveInstance"
  pattern: "{project}/zones/{zone}/instanceGroups/{instanceGroup}/removeInstances"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceGroupSetNamedPort"
  pattern: "{project}/zones/{zone}/instanceGroups/{instanceGroup}/setNamedPorts"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalInstanceTemplate"
  pattern: "{project}/global/instanceTemplates/{instanceTemplate}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalInstanceTemplateResourceGetIamPolicy"
  pattern: "{project}/global/instanceTemplates/{resource}/getIamPolicy"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalInstanceTemplate"
  pattern: "{project}/global/instanceTemplates"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalInstanceTemplateResourceSetIamPolicy"
  pattern: "{project}/global/instanceTemplates/{resource}/setIamPolicy"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalInstanceTemplateResourceTestIamPermission"
  pattern: "{project}/global/instanceTemplates/{resource}/testIamPermissions"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceAddAccessConfig"
  pattern: "{project}/zones/{zone}/instances/{instance}/addAccessConfig"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceAddResourcePolicy"
  pattern: "{project}/zones/{zone}/instances/{instance}/addResourcePolicies"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectAggregatedInstance"
  pattern: "{project}/aggregated/instances"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceAttachDisk"
  pattern: "{project}/zones/{zone}/instances/{instance}/attachDisk"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstance"
  pattern: "{project}/zones/{zone}/instances/{instance}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceDeleteAccessConfig"
  pattern: "{project}/zones/{zone}/instances/{instance}/deleteAccessConfig"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceDetachDisk"
  pattern: "{project}/zones/{zone}/instances/{instance}/detachDisk"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceGetGuestAttribute"
  pattern: "{project}/zones/{zone}/instances/{instance}/getGuestAttributes"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceResourceGetIamPolicy"
  pattern: "{project}/zones/{zone}/instances/{resource}/getIamPolicy"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceSerialPort"
  pattern: "{project}/zones/{zone}/instances/{instance}/serialPort"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceGetShieldedInstanceIdentity"
  pattern: "{project}/zones/{zone}/instances/{instance}/getShieldedInstanceIdentity"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstance"
  pattern: "{project}/zones/{zone}/instances"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceReferrer"
  pattern: "{project}/zones/{zone}/instances/{instance}/referrers"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceRemoveResourcePolicy"
  pattern: "{project}/zones/{zone}/instances/{instance}/removeResourcePolicies"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceReset"
  pattern: "{project}/zones/{zone}/instances/{instance}/reset"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceResourceSetDeletionProtection"
  pattern: "{project}/zones/{zone}/instances/{resource}/setDeletionProtection"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceSetDiskAutoDelete"
  pattern: "{project}/zones/{zone}/instances/{instance}/setDiskAutoDelete"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceResourceSetIamPolicy"
  pattern: "{project}/zones/{zone}/instances/{resource}/setIamPolicy"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceSetLabel"
  pattern: "{project}/zones/{zone}/instances/{instance}/setLabels"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceSetMachineResource"
  pattern: "{project}/zones/{zone}/instances/{instance}/setMachineResources"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceSetMachineType"
  pattern: "{project}/zones/{zone}/instances/{instance}/setMachineType"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceSetMetadata"
  pattern: "{project}/zones/{zone}/instances/{instance}/setMetadata"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceSetMinCpuPlatform"
  pattern: "{project}/zones/{zone}/instances/{instance}/setMinCpuPlatform"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceSetScheduling"
  pattern: "{project}/zones/{zone}/instances/{instance}/setScheduling"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceSetServiceAccount"
  pattern: "{project}/zones/{zone}/instances/{instance}/setServiceAccount"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceSetShieldedInstanceIntegrityPolicy"
  pattern: "{project}/zones/{zone}/instances/{instance}/setShieldedInstanceIntegrityPolicy"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceSetTag"
  pattern: "{project}/zones/{zone}/instances/{instance}/setTags"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceSimulateMaintenanceEvent"
  pattern: "{project}/zones/{zone}/instances/{instance}/simulateMaintenanceEvent"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceStart"
  pattern: "{project}/zones/{zone}/instances/{instance}/start"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceStartWithEncryptionKey"
  pattern: "{project}/zones/{zone}/instances/{instance}/startWithEncryptionKey"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceStop"
  pattern: "{project}/zones/{zone}/instances/{instance}/stop"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceResourceTestIamPermission"
  pattern: "{project}/zones/{zone}/instances/{resource}/testIamPermissions"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceUpdateAccessConfig"
  pattern: "{project}/zones/{zone}/instances/{instance}/updateAccessConfig"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceUpdateDisplayDevice"
  pattern: "{project}/zones/{zone}/instances/{instance}/updateDisplayDevice"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceUpdateNetworkInterface"
  pattern: "{project}/zones/{zone}/instances/{instance}/updateNetworkInterface"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneInstanceUpdateShieldedInstanceConfig"
  pattern: "{project}/zones/{zone}/instances/{instance}/updateShieldedInstanceConfig"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectAggregatedInterconnectAttachment"
  pattern: "{project}/aggregated/interconnectAttachments"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionInterconnectAttachment"
  pattern: "{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionInterconnectAttachment"
  pattern: "{project}/regions/{region}/interconnectAttachments"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalInterconnectLocation"
  pattern: "{project}/global/interconnectLocations/{interconnectLocation}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalInterconnectLocation"
  pattern: "{project}/global/interconnectLocations"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalInterconnect"
  pattern: "{project}/global/interconnects/{interconnect}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalInterconnectGetDiagnostic"
  pattern: "{project}/global/interconnects/{interconnect}/getDiagnostics"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalInterconnect"
  pattern: "{project}/global/interconnects"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalLicenseCode"
  pattern: "{project}/global/licenseCodes/{licenseCode}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalLicenseCodeResourceTestIamPermission"
  pattern: "{project}/global/licenseCodes/{resource}/testIamPermissions"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalLicense"
  pattern: "{project}/global/licenses/{license}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalLicenseResourceGetIamPolicy"
  pattern: "{project}/global/licenses/{resource}/getIamPolicy"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalLicense"
  pattern: "{project}/global/licenses"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalLicenseResourceSetIamPolicy"
  pattern: "{project}/global/licenses/{resource}/setIamPolicy"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalLicenseResourceTestIamPermission"
  pattern: "{project}/global/licenses/{resource}/testIamPermissions"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectAggregatedMachineType"
  pattern: "{project}/aggregated/machineTypes"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneMachineType"
  pattern: "{project}/zones/{zone}/machineTypes/{machineType}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneMachineType"
  pattern: "{project}/zones/{zone}/machineTypes"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectAggregatedNetworkEndpointGroup"
  pattern: "{project}/aggregated/networkEndpointGroups"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneNetworkEndpointGroupAttachNetworkEndpoint"
  pattern: "{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/attachNetworkEndpoints"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneNetworkEndpointGroup"
  pattern: "{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneNetworkEndpointGroupDetachNetworkEndpoint"
  pattern: "{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/detachNetworkEndpoints"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneNetworkEndpointGroup"
  pattern: "{project}/zones/{zone}/networkEndpointGroups"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneNetworkEndpointGroupListNetworkEndpoint"
  pattern: "{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/listNetworkEndpoints"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneNetworkEndpointGroupResourceTestIamPermission"
  pattern: "{project}/zones/{zone}/networkEndpointGroups/{resource}/testIamPermissions"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalNetworkAddPeering"
  pattern: "{project}/global/networks/{network}/addPeering"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalNetwork"
  pattern: "{project}/global/networks/{network}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalNetwork"
  pattern: "{project}/global/networks"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalNetworkListPeeringRoute"
  pattern: "{project}/global/networks/{network}/listPeeringRoutes"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalNetworkRemovePeering"
  pattern: "{project}/global/networks/{network}/removePeering"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalNetworkSwitchToCustomMode"
  pattern: "{project}/global/networks/{network}/switchToCustomMode"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalNetworkUpdatePeering"
  pattern: "{project}/global/networks/{network}/updatePeering"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneNodeGroupAddNode"
  pattern: "{project}/zones/{zone}/nodeGroups/{nodeGroup}/addNodes"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectAggregatedNodeGroup"
  pattern: "{project}/aggregated/nodeGroups"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneNodeGroup"
  pattern: "{project}/zones/{zone}/nodeGroups/{nodeGroup}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneNodeGroupDeleteNode"
  pattern: "{project}/zones/{zone}/nodeGroups/{nodeGroup}/deleteNodes"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneNodeGroupResourceGetIamPolicy"
  pattern: "{project}/zones/{zone}/nodeGroups/{resource}/getIamPolicy"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneNodeGroup"
  pattern: "{project}/zones/{zone}/nodeGroups"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneNodeGroupListNode"
  pattern: "{project}/zones/{zone}/nodeGroups/{nodeGroup}/listNodes"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneNodeGroupResourceSetIamPolicy"
  pattern: "{project}/zones/{zone}/nodeGroups/{resource}/setIamPolicy"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneNodeGroupSetNodeTemplate"
  pattern: "{project}/zones/{zone}/nodeGroups/{nodeGroup}/setNodeTemplate"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneNodeGroupResourceTestIamPermission"
  pattern: "{project}/zones/{zone}/nodeGroups/{resource}/testIamPermissions"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectAggregatedNodeTemplate"
  pattern: "{project}/aggregated/nodeTemplates"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionNodeTemplate"
  pattern: "{project}/regions/{region}/nodeTemplates/{nodeTemplate}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionNodeTemplateResourceGetIamPolicy"
  pattern: "{project}/regions/{region}/nodeTemplates/{resource}/getIamPolicy"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionNodeTemplate"
  pattern: "{project}/regions/{region}/nodeTemplates"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionNodeTemplateResourceSetIamPolicy"
  pattern: "{project}/regions/{region}/nodeTemplates/{resource}/setIamPolicy"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionNodeTemplateResourceTestIamPermission"
  pattern: "{project}/regions/{region}/nodeTemplates/{resource}/testIamPermissions"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectAggregatedNodeType"
  pattern: "{project}/aggregated/nodeTypes"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneNodeType"
  pattern: "{project}/zones/{zone}/nodeTypes/{nodeType}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneNodeType"
  pattern: "{project}/zones/{zone}/nodeTypes"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectAggregatedPacketMirroring"
  pattern: "{project}/aggregated/packetMirrorings"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionPacketMirroring"
  pattern: "{project}/regions/{region}/packetMirrorings/{packetMirroring}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionPacketMirroring"
  pattern: "{project}/regions/{region}/packetMirrorings"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionPacketMirroringResourceTestIamPermission"
  pattern: "{project}/regions/{region}/packetMirrorings/{resource}/testIamPermissions"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectDisableXpnHost"
  pattern: "{project}/disableXpnHost"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectDisableXpnResource"
  pattern: "{project}/disableXpnResource"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectEnableXpnHost"
  pattern: "{project}/enableXpnHost"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectEnableXpnResource"
  pattern: "{project}/enableXpnResource"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/Project"
  pattern: "{project}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGetXpnHost"
  pattern: "{project}/getXpnHost"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGetXpnResource"
  pattern: "{project}/getXpnResources"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectListXpnHost"
  pattern: "{project}/listXpnHosts"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectMoveDisk"
  pattern: "{project}/moveDisk"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectMoveInstance"
  pattern: "{project}/moveInstance"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectSetCommonInstanceMetadata"
  pattern: "{project}/setCommonInstanceMetadata"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectSetDefaultNetworkTier"
  pattern: "{project}/setDefaultNetworkTier"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectSetUsageExportBucket"
  pattern: "{project}/setUsageExportBucket"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionAutoscaler"
  pattern: "{project}/regions/{region}/autoscalers/{autoscaler}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionAutoscaler"
  pattern: "{project}/regions/{region}/autoscalers"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionBackendService"
  pattern: "{project}/regions/{region}/backendServices/{backendService}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionBackendServiceGetHealth"
  pattern: "{project}/regions/{region}/backendServices/{backendService}/getHealth"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionBackendService"
  pattern: "{project}/regions/{region}/backendServices"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectAggregatedCommitment"
  pattern: "{project}/aggregated/commitments"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionCommitment"
  pattern: "{project}/regions/{region}/commitments/{commitment}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionCommitment"
  pattern: "{project}/regions/{region}/commitments"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionDiskType"
  pattern: "{project}/regions/{region}/diskTypes/{diskType}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionDiskType"
  pattern: "{project}/regions/{region}/diskTypes"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionDiskAddResourcePolicy"
  pattern: "{project}/regions/{region}/disks/{disk}/addResourcePolicies"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionDiskCreateSnapshot"
  pattern: "{project}/regions/{region}/disks/{disk}/createSnapshot"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionDisk"
  pattern: "{project}/regions/{region}/disks/{disk}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionDisk"
  pattern: "{project}/regions/{region}/disks"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionDiskRemoveResourcePolicy"
  pattern: "{project}/regions/{region}/disks/{disk}/removeResourcePolicies"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionDiskResize"
  pattern: "{project}/regions/{region}/disks/{disk}/resize"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionDiskResourceSetLabel"
  pattern: "{project}/regions/{region}/disks/{resource}/setLabels"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionDiskResourceTestIamPermission"
  pattern: "{project}/regions/{region}/disks/{resource}/testIamPermissions"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionHealthCheck"
  pattern: "{project}/regions/{region}/healthChecks/{healthCheck}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionHealthCheck"
  pattern: "{project}/regions/{region}/healthChecks"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionInstanceGroupManagerAbandonInstance"
  pattern: "{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/abandonInstances"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionInstanceGroupManagerApplyUpdatesToInstance"
  pattern: "{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/applyUpdatesToInstances"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionInstanceGroupManagerCreateInstance"
  pattern: "{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/createInstances"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionInstanceGroupManager"
  pattern: "{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionInstanceGroupManagerDeleteInstance"
  pattern: "{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/deleteInstances"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionInstanceGroupManager"
  pattern: "{project}/regions/{region}/instanceGroupManagers"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionInstanceGroupManagerListError"
  pattern: "{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listErrors"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionInstanceGroupManagerListManagedInstance"
  pattern: "{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionInstanceGroupManagerRecreateInstance"
  pattern: "{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/recreateInstances"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionInstanceGroupManagerResize"
  pattern: "{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/resize"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionInstanceGroupManagerSetInstanceTemplate"
  pattern: "{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionInstanceGroupManagerSetTargetPool"
  pattern: "{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setTargetPools"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionInstanceGroup"
  pattern: "{project}/regions/{region}/instanceGroups/{instanceGroup}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionInstanceGroup"
  pattern: "{project}/regions/{region}/instanceGroups"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionInstanceGroupListInstance"
  pattern: "{project}/regions/{region}/instanceGroups/{instanceGroup}/listInstances"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionInstanceGroupSetNamedPort"
  pattern: "{project}/regions/{region}/instanceGroups/{instanceGroup}/setNamedPorts"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionOperation"
  pattern: "{project}/regions/{region}/operations/{operation}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionOperation"
  pattern: "{project}/regions/{region}/operations"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionOperationWait"
  pattern: "{project}/regions/{region}/operations/{operation}/wait"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionSslCertificate"
  pattern: "{project}/regions/{region}/sslCertificates/{sslCertificate}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionSslCertificate"
  pattern: "{project}/regions/{region}/sslCertificates"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionTargetHttpProxy"
  pattern: "{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionTargetHttpProxy"
  pattern: "{project}/regions/{region}/targetHttpProxies"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionTargetHttpProxySetUrlMap"
  pattern: "{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}/setUrlMap"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionTargetHttpsProxy"
  pattern: "{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionTargetHttpsProxy"
  pattern: "{project}/regions/{region}/targetHttpsProxies"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionTargetHttpsProxySetSslCertificate"
  pattern: "{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}/setSslCertificates"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionTargetHttpsProxySetUrlMap"
  pattern: "{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}/setUrlMap"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionUrlMap"
  pattern: "{project}/regions/{region}/urlMaps/{urlMap}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionUrlMap"
  pattern: "{project}/regions/{region}/urlMaps"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionUrlMapValidate"
  pattern: "{project}/regions/{region}/urlMaps/{urlMap}/validate"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegion"
  pattern: "{project}/regions/{region}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegion"
  pattern: "{project}/regions"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectAggregatedReservation"
  pattern: "{project}/aggregated/reservations"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneReservation"
  pattern: "{project}/zones/{zone}/reservations/{reservation}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneReservationResourceGetIamPolicy"
  pattern: "{project}/zones/{zone}/reservations/{resource}/getIamPolicy"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneReservation"
  pattern: "{project}/zones/{zone}/reservations"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneReservationResize"
  pattern: "{project}/zones/{zone}/reservations/{reservation}/resize"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneReservationResourceSetIamPolicy"
  pattern: "{project}/zones/{zone}/reservations/{resource}/setIamPolicy"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneReservationResourceTestIamPermission"
  pattern: "{project}/zones/{zone}/reservations/{resource}/testIamPermissions"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectAggregatedResourcePolicy"
  pattern: "{project}/aggregated/resourcePolicies"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionResourcePolicy"
  pattern: "{project}/regions/{region}/resourcePolicies/{resourcePolicy}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionResourcePolicyResourceGetIamPolicy"
  pattern: "{project}/regions/{region}/resourcePolicies/{resource}/getIamPolicy"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionResourcePolicy"
  pattern: "{project}/regions/{region}/resourcePolicies"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionResourcePolicyResourceSetIamPolicy"
  pattern: "{project}/regions/{region}/resourcePolicies/{resource}/setIamPolicy"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionResourcePolicyResourceTestIamPermission"
  pattern: "{project}/regions/{region}/resourcePolicies/{resource}/testIamPermissions"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectAggregatedRouter"
  pattern: "{project}/aggregated/routers"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionRouter"
  pattern: "{project}/regions/{region}/routers/{router}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionRouterGetNatMappingInfo"
  pattern: "{project}/regions/{region}/routers/{router}/getNatMappingInfo"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionRouterGetRouterStatu"
  pattern: "{project}/regions/{region}/routers/{router}/getRouterStatus"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionRouter"
  pattern: "{project}/regions/{region}/routers"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionRouterPreview"
  pattern: "{project}/regions/{region}/routers/{router}/preview"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalRoute"
  pattern: "{project}/global/routes/{route}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalRoute"
  pattern: "{project}/global/routes"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalSecurityPolicyAddRule"
  pattern: "{project}/global/securityPolicies/{securityPolicy}/addRule"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalSecurityPolicy"
  pattern: "{project}/global/securityPolicies/{securityPolicy}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalSecurityPolicyGetRule"
  pattern: "{project}/global/securityPolicies/{securityPolicy}/getRule"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalSecurityPolicy"
  pattern: "{project}/global/securityPolicies"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalSecurityPolicyPatchRule"
  pattern: "{project}/global/securityPolicies/{securityPolicy}/patchRule"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalSecurityPolicyRemoveRule"
  pattern: "{project}/global/securityPolicies/{securityPolicy}/removeRule"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalSnapshot"
  pattern: "{project}/global/snapshots/{snapshot}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalSnapshotResourceGetIamPolicy"
  pattern: "{project}/global/snapshots/{resource}/getIamPolicy"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalSnapshot"
  pattern: "{project}/global/snapshots"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalSnapshotResourceSetIamPolicy"
  pattern: "{project}/global/snapshots/{resource}/setIamPolicy"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalSnapshotResourceSetLabel"
  pattern: "{project}/global/snapshots/{resource}/setLabels"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalSnapshotResourceTestIamPermission"
  pattern: "{project}/global/snapshots/{resource}/testIamPermissions"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectAggregatedSslCertificate"
  pattern: "{project}/aggregated/sslCertificates"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalSslCertificate"
  pattern: "{project}/global/sslCertificates/{sslCertificate}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalSslCertificate"
  pattern: "{project}/global/sslCertificates"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalSslPolicy"
  pattern: "{project}/global/sslPolicies/{sslPolicy}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalSslPolicy"
  pattern: "{project}/global/sslPolicies"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalSslPolicyListAvailableFeature"
  pattern: "{project}/global/sslPolicies/listAvailableFeatures"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectAggregatedSubnetwork"
  pattern: "{project}/aggregated/subnetworks"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionSubnetwork"
  pattern: "{project}/regions/{region}/subnetworks/{subnetwork}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionSubnetworkExpandIpCidrRange"
  pattern: "{project}/regions/{region}/subnetworks/{subnetwork}/expandIpCidrRange"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionSubnetworkResourceGetIamPolicy"
  pattern: "{project}/regions/{region}/subnetworks/{resource}/getIamPolicy"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionSubnetwork"
  pattern: "{project}/regions/{region}/subnetworks"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectAggregatedSubnetworkListUsable"
  pattern: "{project}/aggregated/subnetworks/listUsable"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionSubnetworkResourceSetIamPolicy"
  pattern: "{project}/regions/{region}/subnetworks/{resource}/setIamPolicy"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionSubnetworkSetPrivateIpGoogleAccess"
  pattern: "{project}/regions/{region}/subnetworks/{subnetwork}/setPrivateIpGoogleAccess"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionSubnetworkResourceTestIamPermission"
  pattern: "{project}/regions/{region}/subnetworks/{resource}/testIamPermissions"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectAggregatedTargetHttpProxy"
  pattern: "{project}/aggregated/targetHttpProxies"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalTargetHttpProxy"
  pattern: "{project}/global/targetHttpProxies/{targetHttpProxy}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalTargetHttpProxy"
  pattern: "{project}/global/targetHttpProxies"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectTargetHttpProxySetUrlMap"
  pattern: "{project}/targetHttpProxies/{targetHttpProxy}/setUrlMap"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectAggregatedTargetHttpsProxy"
  pattern: "{project}/aggregated/targetHttpsProxies"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalTargetHttpsProxy"
  pattern: "{project}/global/targetHttpsProxies/{targetHttpsProxy}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalTargetHttpsProxy"
  pattern: "{project}/global/targetHttpsProxies"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalTargetHttpsProxySetQuicOverride"
  pattern: "{project}/global/targetHttpsProxies/{targetHttpsProxy}/setQuicOverride"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectTargetHttpsProxySetSslCertificate"
  pattern: "{project}/targetHttpsProxies/{targetHttpsProxy}/setSslCertificates"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalTargetHttpsProxySetSslPolicy"
  pattern: "{project}/global/targetHttpsProxies/{targetHttpsProxy}/setSslPolicy"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectTargetHttpsProxySetUrlMap"
  pattern: "{project}/targetHttpsProxies/{targetHttpsProxy}/setUrlMap"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectAggregatedTargetInstance"
  pattern: "{project}/aggregated/targetInstances"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneTargetInstance"
  pattern: "{project}/zones/{zone}/targetInstances/{targetInstance}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneTargetInstance"
  pattern: "{project}/zones/{zone}/targetInstances"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionTargetPoolAddHealthCheck"
  pattern: "{project}/regions/{region}/targetPools/{targetPool}/addHealthCheck"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionTargetPoolAddInstance"
  pattern: "{project}/regions/{region}/targetPools/{targetPool}/addInstance"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectAggregatedTargetPool"
  pattern: "{project}/aggregated/targetPools"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionTargetPool"
  pattern: "{project}/regions/{region}/targetPools/{targetPool}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionTargetPoolGetHealth"
  pattern: "{project}/regions/{region}/targetPools/{targetPool}/getHealth"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionTargetPool"
  pattern: "{project}/regions/{region}/targetPools"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionTargetPoolRemoveHealthCheck"
  pattern: "{project}/regions/{region}/targetPools/{targetPool}/removeHealthCheck"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionTargetPoolRemoveInstance"
  pattern: "{project}/regions/{region}/targetPools/{targetPool}/removeInstance"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionTargetPoolSetBackup"
  pattern: "{project}/regions/{region}/targetPools/{targetPool}/setBackup"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalTargetSslProxy"
  pattern: "{project}/global/targetSslProxies/{targetSslProxy}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalTargetSslProxy"
  pattern: "{project}/global/targetSslProxies"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalTargetSslProxySetBackendService"
  pattern: "{project}/global/targetSslProxies/{targetSslProxy}/setBackendService"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalTargetSslProxySetProxyHeader"
  pattern: "{project}/global/targetSslProxies/{targetSslProxy}/setProxyHeader"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalTargetSslProxySetSslCertificate"
  pattern: "{project}/global/targetSslProxies/{targetSslProxy}/setSslCertificates"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalTargetSslProxySetSslPolicy"
  pattern: "{project}/global/targetSslProxies/{targetSslProxy}/setSslPolicy"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalTargetTcpProxy"
  pattern: "{project}/global/targetTcpProxies/{targetTcpProxy}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalTargetTcpProxy"
  pattern: "{project}/global/targetTcpProxies"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalTargetTcpProxySetBackendService"
  pattern: "{project}/global/targetTcpProxies/{targetTcpProxy}/setBackendService"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalTargetTcpProxySetProxyHeader"
  pattern: "{project}/global/targetTcpProxies/{targetTcpProxy}/setProxyHeader"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectAggregatedTargetVpnGateway"
  pattern: "{project}/aggregated/targetVpnGateways"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionTargetVpnGateway"
  pattern: "{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionTargetVpnGateway"
  pattern: "{project}/regions/{region}/targetVpnGateways"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectAggregatedUrlMap"
  pattern: "{project}/aggregated/urlMaps"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalUrlMap"
  pattern: "{project}/global/urlMaps/{urlMap}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalUrlMap"
  pattern: "{project}/global/urlMaps"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalUrlMapInvalidateCache"
  pattern: "{project}/global/urlMaps/{urlMap}/invalidateCache"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectGlobalUrlMapValidate"
  pattern: "{project}/global/urlMaps/{urlMap}/validate"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectAggregatedVpnGateway"
  pattern: "{project}/aggregated/vpnGateways"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionVpnGateway"
  pattern: "{project}/regions/{region}/vpnGateways/{vpnGateway}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionVpnGatewayGetStatu"
  pattern: "{project}/regions/{region}/vpnGateways/{vpnGateway}/getStatus"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionVpnGateway"
  pattern: "{project}/regions/{region}/vpnGateways"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionVpnGatewayResourceSetLabel"
  pattern: "{project}/regions/{region}/vpnGateways/{resource}/setLabels"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionVpnGatewayResourceTestIamPermission"
  pattern: "{project}/regions/{region}/vpnGateways/{resource}/testIamPermissions"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectAggregatedVpnTunnel"
  pattern: "{project}/aggregated/vpnTunnels"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionVpnTunnel"
  pattern: "{project}/regions/{region}/vpnTunnels/{vpnTunnel}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectRegionVpnTunnel"
  pattern: "{project}/regions/{region}/vpnTunnels"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneOperation"
  pattern: "{project}/zones/{zone}/operations/{operation}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneOperation"
  pattern: "{project}/zones/{zone}/operations"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZoneOperationWait"
  pattern: "{project}/zones/{zone}/operations/{operation}/wait"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZone"
  pattern: "{project}/zones/{zone}"
};

option (google.api.resource_definition) = {
  type: "google.cloud.compute.v1/ProjectZone"
  pattern: "{project}/zones"
};

//
// Messages
//
message HTTP2HealthCheck {
  enum PortSpecification {
    USE_FIXED_PORT = 0;
    USE_NAMED_PORT = 1;
    USE_SERVING_PORT = 2;
  }

  enum ProxyHeader {
    NONE = 0;
    PROXY_V1 = 1;
  }

  string host = 1;
  int32 port = 2;
  string port_name = 3;
  PortSpecification port_specification = 4;
  ProxyHeader proxy_header = 5;
  string request_path = 6;
  string response = 7;
}

message HTTPHealthCheck {
  enum PortSpecification {
    USE_FIXED_PORT = 0;
    USE_NAMED_PORT = 1;
    USE_SERVING_PORT = 2;
  }

  enum ProxyHeader {
    NONE = 0;
    PROXY_V1 = 1;
  }

  string host = 1;
  int32 port = 2;
  string port_name = 3;
  PortSpecification port_specification = 4;
  ProxyHeader proxy_header = 5;
  string request_path = 6;
  string response = 7;
}

message HTTPSHealthCheck {
  enum PortSpecification {
    USE_FIXED_PORT = 0;
    USE_NAMED_PORT = 1;
    USE_SERVING_PORT = 2;
  }

  enum ProxyHeader {
    NONE = 0;
    PROXY_V1 = 1;
  }

  string host = 1;
  int32 port = 2;
  string port_name = 3;
  PortSpecification port_specification = 4;
  ProxyHeader proxy_header = 5;
  string request_path = 6;
  string response = 7;
}

message SSLHealthCheck {
  enum PortSpecification {
    USE_FIXED_PORT = 0;
    USE_NAMED_PORT = 1;
    USE_SERVING_PORT = 2;
  }

  enum ProxyHeader {
    NONE = 0;
    PROXY_V1 = 1;
  }

  int32 port = 1;
  string port_name = 2;
  PortSpecification port_specification = 3;
  ProxyHeader proxy_header = 4;
  string request = 5;
  string response = 6;
}

message TCPHealthCheck {
  enum PortSpecification {
    USE_FIXED_PORT = 0;
    USE_NAMED_PORT = 1;
    USE_SERVING_PORT = 2;
  }

  enum ProxyHeader {
    NONE = 0;
    PROXY_V1 = 1;
  }

  int32 port = 1;
  string port_name = 2;
  PortSpecification port_specification = 3;
  ProxyHeader proxy_header = 4;
  string request = 5;
  string response = 6;
}

message HealthCheck {
  enum Type {
    HTTP = 0;
    HTTP2 = 1;
    HTTPS = 2;
    INVALID = 3;
    SSL = 4;
    TCP = 5;
  }

  int32 check_interval_sec = 1;
  string creation_timestamp = 2;
  string description = 3;
  int32 healthy_threshold = 4;
  HTTP2HealthCheck http2_health_check = 5;
  HTTPHealthCheck http_health_check = 6;
  HTTPSHealthCheck https_health_check = 7;
  string id = 8;
  string kind = 9;
  string name = 10;
  string region = 11;
  string self_link = 12;
  SSLHealthCheck ssl_health_check = 13;
  TCPHealthCheck tcp_health_check = 14;
  int32 timeout_sec = 15;
  Type type = 16;
  int32 unhealthy_threshold = 17;
}

message BackendServiceIAP {
  bool enabled = 1;
  string oauth2_client_id = 2;
  string oauth2_client_secret = 3;
  string oauth2_client_secret_sha256 = 4;
}

message BackendServiceLogConfig {
  bool enable = 1;
  float sample_rate = 2;
}

message DiskTypesScopedList {
  repeated DiskType disk_types = 1;
  Warning warning = 2;
}

message Data {
  string key = 1;
  string value = 2;
}

message Warning {
  enum Code {
    CLEANUP_FAILED = 0;
    DEPRECATED_RESOURCE_USED = 1;
    DEPRECATED_TYPE_USED = 2;
    DISK_SIZE_LARGER_THAN_IMAGE_SIZE = 3;
    EXPERIMENTAL_TYPE_USED = 4;
    EXTERNAL_API_WARNING = 5;
    FIELD_VALUE_OVERRIDEN = 6;
    INJECTED_KERNELS_DEPRECATED = 7;
    MISSING_TYPE_DEPENDENCY = 8;
    NEXT_HOP_ADDRESS_NOT_ASSIGNED = 9;
    NEXT_HOP_CANNOT_IP_FORWARD = 10;
    NEXT_HOP_INSTANCE_NOT_FOUND = 11;
    NEXT_HOP_INSTANCE_NOT_ON_NETWORK = 12;
    NEXT_HOP_NOT_RUNNING = 13;
    NOT_CRITICAL_ERROR = 14;
    NO_RESULTS_ON_PAGE = 15;
    REQUIRED_TOS_AGREEMENT = 16;
    RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING = 17;
    RESOURCE_NOT_DELETED = 18;
    SCHEMA_VALIDATION_IGNORED = 19;
    SINGLE_INSTANCE_PROPERTY_TEMPLATE = 20;
    UNDECLARED_PROPERTIES = 21;
    UNREACHABLE = 22;
  }

  Code code = 1;
  repeated Data data = 2;
  string message = 3;
}

message DiskTypeAggregatedList {
  string id = 1;
  map<string, DiskTypesScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message RegionInstanceGroupManagersDeleteInstancesRequest {
  repeated string instances = 1;
}

message Autoscaler {
  enum Status {
    ACTIVE = 0;
    DELETING = 1;
    ERROR = 2;
    PENDING = 3;
  }

  AutoscalingPolicy autoscaling_policy = 1;
  string creation_timestamp = 2;
  string description = 3;
  string id = 4;
  string kind = 5;
  string name = 6;
  int32 recommended_size = 7;
  string region = 8;
  string self_link = 9;
  Status status = 10;
  repeated AutoscalerStatusDetails status_details = 11;
  string target = 12;
  string zone = 13;
}

message AutoscalersScopedList {
  repeated Autoscaler autoscalers = 1;
  Warning warning = 2;
}

message NodeGroupsScopedList {
  repeated NodeGroup node_groups = 1;
  Warning warning = 2;
}

message NodeGroupAggregatedList {
  string id = 1;
  map<string, NodeGroupsScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message HttpHeaderOption {
  string header_name = 1;
  string header_value = 2;
  bool replace = 3;
}

message HttpHeaderAction {
  repeated HttpHeaderOption request_headers_to_add = 1;
  repeated string request_headers_to_remove = 2;
  repeated HttpHeaderOption response_headers_to_add = 3;
  repeated string response_headers_to_remove = 4;
}

message GuestAttributesEntry {
  string key = 1;
  string namespace = 2;
  string value = 3;
}

message GuestAttributesValue {
  repeated GuestAttributesEntry items = 1;
}

message RegionDisksRemoveResourcePoliciesRequest {
  repeated string resource_policies = 1;
}

message Tags {
  string fingerprint = 1;
  repeated string items = 2;
}

message NetworkRoutingConfig {
  enum RoutingMode {
    GLOBAL = 0;
    REGIONAL = 1;
  }

  RoutingMode routing_mode = 1;
}

message TestFailure {
  string actual_service = 1;
  string expected_service = 2;
  string host = 3;
  string path = 4;
}

message UrlMapValidationResult {
  repeated string load_errors = 1;
  bool load_succeeded = 2;
  repeated TestFailure test_failures = 3;
  bool test_passed = 4;
}

message InstanceGroupManagersScopedList {
  repeated InstanceGroupManager instance_group_managers = 1;
  Warning warning = 2;
}

message InstanceGroupManagerAggregatedList {
  string id = 1;
  map<string, InstanceGroupManagersScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message TargetHttpsProxy {
  enum QuicOverride {
    DISABLE = 0;
    ENABLE = 1;
    NONE = 2;
  }

  string creation_timestamp = 1;
  string description = 2;
  string id = 3;
  string kind = 4;
  string name = 5;
  QuicOverride quic_override = 6;
  string region = 7;
  string self_link = 8;
  repeated string ssl_certificates = 9;
  string ssl_policy = 10;
  string url_map = 11;
}

message TargetHttpsProxiesScopedList {
  repeated TargetHttpsProxy target_https_proxies = 1;
  Warning warning = 2;
}

message HealthStatus {
  enum HealthState {
    HEALTHY = 0;
    UNHEALTHY = 1;
  }

  HealthState health_state = 1;
  string instance = 2;
  string ip_address = 3;
  int32 port = 4;
}

message TargetPoolInstanceHealth {
  repeated HealthStatus health_status = 1;
  string kind = 2;
}

message InstanceGroupManager {
  repeated InstanceGroupManagerAutoHealingPolicy auto_healing_policies = 1;
  string base_instance_name = 2;
  string creation_timestamp = 3;
  InstanceGroupManagerActionsSummary current_actions = 4;
  string description = 5;
  DistributionPolicy distribution_policy = 6;
  string fingerprint = 7;
  string id = 8;
  string instance_group = 9;
  string instance_template = 10;
  string kind = 11;
  string name = 12;
  repeated NamedPort named_ports = 13;
  string region = 14;
  string self_link = 15;
  InstanceGroupManagerStatus status = 16;
  repeated string target_pools = 17;
  int32 target_size = 18;
  InstanceGroupManagerUpdatePolicy update_policy = 19;
  repeated InstanceGroupManagerVersion versions = 20;
  string zone = 21;
}

message RegionInstanceGroupManagerList {
  string id = 1;
  repeated InstanceGroupManager items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message InstanceGroupManagersSetTargetPoolsRequest {
  string fingerprint = 1;
  repeated string target_pools = 2;
}

message InterconnectLocationRegionInfo {
  enum LocationPresence {
    GLOBAL = 0;
    LOCAL_REGION = 1;
    LP_GLOBAL = 2;
    LP_LOCAL_REGION = 3;
  }

  string expected_rtt_ms = 1;
  LocationPresence location_presence = 2;
  string region = 3;
}

message InterconnectDiagnostics {
  repeated InterconnectDiagnosticsARPEntry arp_caches = 1;
  repeated InterconnectDiagnosticsLinkStatus links = 2;
  string mac_address = 3;
}

message InterconnectsGetDiagnosticsResponse {
  InterconnectDiagnostics result = 1;
}

message ManagedInstanceInstanceHealth {
  enum DetailedHealthState {
    DRAINING = 0;
    HEALTHY = 1;
    TIMEOUT = 2;
    UNHEALTHY = 3;
    UNKNOWN = 4;
  }

  DetailedHealthState detailed_health_state = 1;
  string health_check = 2;
}

message VpnTunnel {
  enum Status {
    ALLOCATING_RESOURCES = 0;
    AUTHORIZATION_ERROR = 1;
    DEPROVISIONING = 2;
    ESTABLISHED = 3;
    FAILED = 4;
    FIRST_HANDSHAKE = 5;
    NEGOTIATION_FAILURE = 6;
    NETWORK_ERROR = 7;
    NO_INCOMING_PACKETS = 8;
    PROVISIONING = 9;
    REJECTED = 10;
    STOPPED = 11;
    WAITING_FOR_FULL_CONFIG = 12;
  }

  string creation_timestamp = 1;
  string description = 2;
  string detailed_status = 3;
  string id = 4;
  int32 ike_version = 5;
  string kind = 6;
  repeated string local_traffic_selector = 7;
  string name = 8;
  string peer_external_gateway = 9;
  int32 peer_external_gateway_interface = 10;
  string peer_gcp_gateway = 11;
  string peer_ip = 12;
  string region = 13;
  repeated string remote_traffic_selector = 14;
  string router = 15;
  string self_link = 16;
  string shared_secret = 17;
  string shared_secret_hash = 18;
  Status status = 19;
  string target_vpn_gateway = 20;
  string vpn_gateway = 21;
  int32 vpn_gateway_interface = 22;
}

message SslPoliciesListAvailableFeaturesResponse {
  repeated string features = 1;
}

message CustomerEncryptionKeyProtectedDisk {
  CustomerEncryptionKey disk_encryption_key = 1;
  string source = 2;
}

message InstancesStartWithEncryptionKeyRequest {
  repeated CustomerEncryptionKeyProtectedDisk disks = 1;
}

message AttachedDisk {
  enum Interface {
    NVME = 0;
    SCSI = 1;
  }

  enum Mode {
    READ_ONLY = 0;
    READ_WRITE = 1;
  }

  enum Type {
    PERSISTENT = 0;
    SCRATCH = 1;
  }

  bool auto_delete = 1;
  bool boot = 2;
  string device_name = 3;
  CustomerEncryptionKey disk_encryption_key = 4;
  string disk_size_gb = 5;
  repeated GuestOsFeature guest_os_features = 6;
  int32 index = 7;
  AttachedDiskInitializeParams initialize_params = 8;
  Interface interface = 9;
  string kind = 10;
  repeated string licenses = 11;
  Mode mode = 12;
  InitialStateConfig shielded_instance_initial_state = 13;
  string source = 14;
  Type type = 15;
}

message DisplayDevice {
  bool enable_display = 1;
}

message AcceleratorConfig {
  int32 accelerator_count = 1;
  string accelerator_type = 2;
}

message Metadata {
  string fingerprint = 1;
  repeated Items items = 2;
  string kind = 3;
}

message NetworkInterface {
  repeated AccessConfig access_configs = 1;
  repeated AliasIpRange alias_ip_ranges = 2;
  string fingerprint = 3;
  string kind = 4;
  string name = 5;
  string network = 6;
  string network_i_p = 7;
  string subnetwork = 8;
}

message ReservationAffinity {
  enum ConsumeReservationType {
    ANY_RESERVATION = 0;
    NO_RESERVATION = 1;
    SPECIFIC_RESERVATION = 2;
    UNSPECIFIED = 3;
  }

  ConsumeReservationType consume_reservation_type = 1;
  string key = 2;
  repeated string values = 3;
}

message Scheduling {
  enum OnHostMaintenance {
    MIGRATE = 0;
    TERMINATE = 1;
  }

  bool automatic_restart = 1;
  repeated SchedulingNodeAffinity node_affinities = 2;
  OnHostMaintenance on_host_maintenance = 3;
  bool preemptible = 4;
}

message ServiceAccount {
  string email = 1;
  repeated string scopes = 2;
}

message ShieldedInstanceConfig {
  bool enable_integrity_monitoring = 1;
  bool enable_secure_boot = 2;
  bool enable_vtpm = 3;
}

message ShieldedInstanceIntegrityPolicy {
  bool update_auto_learn_policy = 1;
}

message Instance {
  enum Status {
    DEPROVISIONING = 0;
    PROVISIONING = 1;
    REPAIRING = 2;
    RUNNING = 3;
    STAGING = 4;
    STOPPED = 5;
    STOPPING = 6;
    SUSPENDED = 7;
    SUSPENDING = 8;
    TERMINATED = 9;
  }

  bool can_ip_forward = 1;
  string cpu_platform = 2;
  string creation_timestamp = 3;
  bool deletion_protection = 4;
  string description = 5;
  repeated AttachedDisk disks = 6;
  DisplayDevice display_device = 7;
  string fingerprint = 8;
  repeated AcceleratorConfig guest_accelerators = 9;
  string hostname = 10;
  string id = 11;
  string kind = 12;
  string label_fingerprint = 13;
  map<string, string> labels = 14;
  string machine_type = 15;
  Metadata metadata = 16;
  string min_cpu_platform = 17;
  string name = 18;
  repeated NetworkInterface network_interfaces = 19;
  ReservationAffinity reservation_affinity = 20;
  Scheduling scheduling = 21;
  string self_link = 22;
  repeated ServiceAccount service_accounts = 23;
  ShieldedInstanceConfig shielded_instance_config = 24;
  ShieldedInstanceIntegrityPolicy shielded_instance_integrity_policy = 25;
  bool start_restricted = 26;
  Status status = 27;
  string status_message = 28;
  Tags tags = 29;
  string zone = 30;
}

message AliasIpRange {
  string ip_cidr_range = 1;
  string subnetwork_range_name = 2;
}

message SslCertificate {
  string certificate = 1;
  string creation_timestamp = 2;
  string description = 3;
  string id = 4;
  string kind = 5;
  string name = 6;
  string private_key = 7;
  string region = 8;
  string self_link = 9;
}

message SslCertificateList {
  string id = 1;
  repeated SslCertificate items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message InstanceManagedByIgmErrorManagedInstanceError {
  string code = 1;
  string message = 2;
}

message InstanceManagedByIgmErrorInstanceActionDetails {
  enum Action {
    ABANDONING = 0;
    CREATING = 1;
    CREATING_WITHOUT_RETRIES = 2;
    DELETING = 3;
    NONE = 4;
    RECREATING = 5;
    REFRESHING = 6;
    RESTARTING = 7;
    VERIFYING = 8;
  }

  Action action = 1;
  string instance = 2;
  ManagedInstanceVersion version = 3;
}

message InstanceManagedByIgmError {
  InstanceManagedByIgmErrorManagedInstanceError error = 1;
  InstanceManagedByIgmErrorInstanceActionDetails instance_action_details = 2;
  string timestamp = 3;
}

message VpnGatewayStatusVpnConnection {
  string peer_external_gateway = 1;
  string peer_gcp_gateway = 2;
  VpnGatewayStatusHighAvailabilityRequirementState state = 3;
  repeated VpnGatewayStatusTunnel tunnels = 4;
}

message VpnGatewayStatus {
  repeated VpnGatewayStatusVpnConnection vpn_connections = 1;
}

message FixedOrPercent {
  int32 calculated = 1;
  int32 fixed = 2;
  int32 percent = 3;
}

message InstanceGroupManagerUpdatePolicy {
  string instance_redistribution_type = 1;
  FixedOrPercent max_surge = 2;
  FixedOrPercent max_unavailable = 3;
  string minimal_action = 4;
  string replacement_method = 5;
  string type = 6;
}

message AutoscalingPolicyCustomMetricUtilization {
  enum UtilizationTargetType {
    DELTA_PER_MINUTE = 0;
    DELTA_PER_SECOND = 1;
    GAUGE = 2;
  }

  string metric = 1;
  double utilization_target = 2;
  UtilizationTargetType utilization_target_type = 3;
}

message RegionDisksAddResourcePoliciesRequest {
  repeated string resource_policies = 1;
}

message ResourcePolicySnapshotSchedulePolicySnapshotProperties {
  bool guest_flush = 1;
  map<string, string> labels = 2;
  repeated string storage_locations = 3;
}

message NodeTemplate {
  enum Status {
    CREATING = 0;
    DELETING = 1;
    INVALID = 2;
    READY = 3;
  }

  string creation_timestamp = 1;
  string description = 2;
  string id = 3;
  string kind = 4;
  string name = 5;
  map<string, string> node_affinity_labels = 6;
  string node_type = 7;
  NodeTemplateNodeTypeFlexibility node_type_flexibility = 8;
  string region = 9;
  string self_link = 10;
  ServerBinding server_binding = 11;
  Status status = 12;
  string status_message = 13;
}

message NodeTemplatesScopedList {
  repeated NodeTemplate node_templates = 1;
  Warning warning = 2;
}

message UrlMapsValidateResponse {
  UrlMapValidationResult result = 1;
}

message SignedUrlKey {
  string key_name = 1;
  string key_value = 2;
}

message SchedulingNodeAffinity {
  enum Operator {
    IN = 0;
    NOT_IN = 1;
    OPERATOR_UNSPECIFIED = 2;
  }

  string key = 1;
  Operator operator = 2;
  repeated string values = 3;
}

message HttpFaultAbort {
  uint32 http_status = 1;
  double percentage = 2;
}

message HttpFaultDelay {
  Duration fixed_delay = 1;
  double percentage = 2;
}

message HttpFaultInjection {
  HttpFaultAbort abort = 1;
  HttpFaultDelay delay = 2;
}

message AuditLogConfig {
  enum LogType {
    ADMIN_READ = 0;
    DATA_READ = 1;
    DATA_WRITE = 2;
    LOG_TYPE_UNSPECIFIED = 3;
  }

  repeated string exempted_members = 1;
  bool ignore_child_exemptions = 2;
  LogType log_type = 3;
}

message AuditConfig {
  repeated AuditLogConfig audit_log_configs = 1;
  repeated string exempted_members = 2;
  string service = 3;
}

message InstanceGroupManagerAutoHealingPolicy {
  string health_check = 1;
  int32 initial_delay_sec = 2;
}

message ResourcePolicyGroupPlacementPolicy {
  enum Collocation {
    COLLOCATED = 0;
    UNSPECIFIED_COLLOCATION = 1;
  }

  int32 availability_domain_count = 1;
  Collocation collocation = 2;
  int32 vm_count = 3;
}

message Network {
  string i_pv4_range = 1;
  bool auto_create_subnetworks = 2;
  string creation_timestamp = 3;
  string description = 4;
  string gateway_i_pv4 = 5;
  string id = 6;
  string kind = 7;
  string name = 8;
  repeated NetworkPeering peerings = 9;
  NetworkRoutingConfig routing_config = 10;
  string self_link = 11;
  repeated string subnetworks = 12;
}

message NetworkList {
  string id = 1;
  repeated Network items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message NodeGroupsSetNodeTemplateRequest {
  string node_template = 1;
}

message VpnGatewayStatusHighAvailabilityRequirementState {
  enum State {
    CONNECTION_REDUNDANCY_MET = 0;
    CONNECTION_REDUNDANCY_NOT_MET = 1;
  }

  enum UnsatisfiedReason {
    INCOMPLETE_TUNNELS_COVERAGE = 0;
  }

  State state = 1;
  UnsatisfiedReason unsatisfied_reason = 2;
}

message CircuitBreakers {
  int32 max_connections = 1;
  int32 max_pending_requests = 2;
  int32 max_requests = 3;
  int32 max_requests_per_connection = 4;
  int32 max_retries = 5;
}

message LicenseCodeLicenseAlias {
  string description = 1;
  string self_link = 2;
}

message LicenseCode {
  enum State {
    DISABLED = 0;
    ENABLED = 1;
    RESTRICTED = 2;
    STATE_UNSPECIFIED = 3;
    TERMINATED = 4;
  }

  string creation_timestamp = 1;
  string description = 2;
  string id = 3;
  string kind = 4;
  repeated LicenseCodeLicenseAlias license_alias = 5;
  string name = 6;
  string self_link = 7;
  State state = 8;
  bool transferable = 9;
}

message License {
  bool charges_use_fee = 1;
  string creation_timestamp = 2;
  string description = 3;
  string id = 4;
  string kind = 5;
  string license_code = 6;
  string name = 7;
  LicenseResourceRequirements resource_requirements = 8;
  string self_link = 9;
  bool transferable = 10;
}

message LicensesListResponse {
  string id = 1;
  repeated License items = 2;
  string next_page_token = 3;
  string self_link = 4;
  Warning warning = 5;
}

message Router {
  RouterBgp bgp = 1;
  repeated RouterBgpPeer bgp_peers = 2;
  string creation_timestamp = 3;
  string description = 4;
  string id = 5;
  repeated RouterInterface interfaces = 6;
  string kind = 7;
  string name = 8;
  repeated RouterNat nats = 9;
  string network = 10;
  string region = 11;
  string self_link = 12;
}

message RoutersScopedList {
  repeated Router routers = 1;
  Warning warning = 2;
}

message NetworkEndpointGroupsListEndpointsRequest {
  enum HealthStatus {
    SHOW = 0;
    SKIP = 1;
  }

  HealthStatus health_status = 1;
}

message InstancesAddResourcePoliciesRequest {
  repeated string resource_policies = 1;
}

message NodeType {
  string cpu_platform = 1;
  string creation_timestamp = 2;
  DeprecationStatus deprecated = 3;
  string description = 4;
  int32 guest_cpus = 5;
  string id = 6;
  string kind = 7;
  int32 local_ssd_gb = 8;
  int32 memory_mb = 9;
  string name = 10;
  string self_link = 11;
  string zone = 12;
}

message NodeTypesScopedList {
  repeated NodeType node_types = 1;
  Warning warning = 2;
}

message DisksRemoveResourcePoliciesRequest {
  repeated string resource_policies = 1;
}

message RegionInstanceGroupManagersSetTargetPoolsRequest {
  string fingerprint = 1;
  repeated string target_pools = 2;
}

message TargetPool {
  enum SessionAffinity {
    CLIENT_IP = 0;
    CLIENT_IP_PORT_PROTO = 1;
    CLIENT_IP_PROTO = 2;
    GENERATED_COOKIE = 3;
    HEADER_FIELD = 4;
    HTTP_COOKIE = 5;
    NONE = 6;
  }

  string backup_pool = 1;
  string creation_timestamp = 2;
  string description = 3;
  float failover_ratio = 4;
  repeated string health_checks = 5;
  string id = 6;
  repeated string instances = 7;
  string kind = 8;
  string name = 9;
  string region = 10;
  string self_link = 11;
  SessionAffinity session_affinity = 12;
}

message TargetPoolList {
  string id = 1;
  repeated TargetPool items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message PacketMirroringsScopedList {
  repeated PacketMirroring packet_mirrorings = 1;
  Warning warning = 2;
}

message PacketMirroringAggregatedList {
  string id = 1;
  map<string, PacketMirroringsScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message InterconnectAttachmentsScopedList {
  repeated InterconnectAttachment interconnect_attachments = 1;
  Warning warning = 2;
}

message InterconnectAttachmentAggregatedList {
  string id = 1;
  map<string, InterconnectAttachmentsScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message NetworkEndpoint {
  string fqdn = 1;
  string instance = 2;
  string ip_address = 3;
  int32 port = 4;
}

message NetworkEndpointGroupsDetachEndpointsRequest {
  repeated NetworkEndpoint network_endpoints = 1;
}

message NodeGroupAutoscalingPolicy {
  enum Mode {
    MODE_UNSPECIFIED = 0;
    OFF = 1;
    ON = 2;
    ONLY_SCALE_OUT = 3;
  }

  int32 max_nodes = 1;
  int32 min_nodes = 2;
  Mode mode = 3;
}

message NodeGroup {
  enum MaintenancePolicy {
    DEFAULT = 0;
    MAINTENANCE_POLICY_UNSPECIFIED = 1;
    MIGRATE_WITHIN_NODE_GROUP = 2;
    RESTART_IN_PLACE = 3;
  }

  enum Status {
    CREATING = 0;
    DELETING = 1;
    INVALID = 2;
    READY = 3;
  }

  NodeGroupAutoscalingPolicy autoscaling_policy = 1;
  string creation_timestamp = 2;
  string description = 3;
  string fingerprint = 4;
  string id = 5;
  string kind = 6;
  MaintenancePolicy maintenance_policy = 7;
  string name = 8;
  string node_template = 9;
  string self_link = 10;
  int32 size = 11;
  Status status = 12;
  string zone = 13;
}

message MetadataFilter {
  enum FilterMatchCriteria {
    MATCH_ALL = 0;
    MATCH_ANY = 1;
    NOT_SET = 2;
  }

  repeated MetadataFilterLabelMatch filter_labels = 1;
  FilterMatchCriteria filter_match_criteria = 2;
}

message ForwardingRule {
  enum IPProtocol {
    AH = 0;
    ESP = 1;
    ICMP = 2;
    SCTP = 3;
    TCP = 4;
    UDP = 5;
  }

  enum IpVersion {
    IPV4 = 0;
    IPV6 = 1;
    UNSPECIFIED_VERSION = 2;
  }

  enum LoadBalancingScheme {
    EXTERNAL = 0;
    INTERNAL = 1;
    INTERNAL_MANAGED = 2;
    INTERNAL_SELF_MANAGED = 3;
    INVALID = 4;
  }

  enum NetworkTier {
    PREMIUM = 0;
    STANDARD = 1;
  }

  string i_p_address = 1;
  IPProtocol i_p_protocol = 2;
  bool all_ports = 3;
  bool allow_global_access = 4;
  string backend_service = 5;
  string creation_timestamp = 6;
  string description = 7;
  string fingerprint = 8;
  string id = 9;
  IpVersion ip_version = 10;
  bool is_mirroring_collector = 11;
  string kind = 12;
  LoadBalancingScheme load_balancing_scheme = 13;
  repeated MetadataFilter metadata_filters = 14;
  string name = 15;
  string network = 16;
  NetworkTier network_tier = 17;
  string port_range = 18;
  repeated string ports = 19;
  string region = 20;
  string self_link = 21;
  string service_label = 22;
  string service_name = 23;
  string subnetwork = 24;
  string target = 25;
}

message InstanceProperties {
  bool can_ip_forward = 1;
  string description = 2;
  repeated AttachedDisk disks = 3;
  repeated AcceleratorConfig guest_accelerators = 4;
  map<string, string> labels = 5;
  string machine_type = 6;
  Metadata metadata = 7;
  string min_cpu_platform = 8;
  repeated NetworkInterface network_interfaces = 9;
  ReservationAffinity reservation_affinity = 10;
  repeated string resource_policies = 11;
  Scheduling scheduling = 12;
  repeated ServiceAccount service_accounts = 13;
  ShieldedInstanceConfig shielded_instance_config = 14;
  Tags tags = 15;
}

message TargetHttpProxy {
  string creation_timestamp = 1;
  string description = 2;
  string id = 3;
  string kind = 4;
  string name = 5;
  string region = 6;
  string self_link = 7;
  string url_map = 8;
}

message Duration {
  int32 nanos = 1;
  string seconds = 2;
}

message BackendServiceFailoverPolicy {
  bool disable_connection_drain_on_failover = 1;
  bool drop_traffic_if_unhealthy = 2;
  float failover_ratio = 3;
}

message NetworkEndpointWithHealthStatus {
  repeated HealthStatusForNetworkEndpoint healths = 1;
  NetworkEndpoint network_endpoint = 2;
}

message NetworkEndpointGroupsListNetworkEndpoints {
  string id = 1;
  repeated NetworkEndpointWithHealthStatus items = 2;
  string kind = 3;
  string next_page_token = 4;
  Warning warning = 5;
}

message InterconnectOutageNotification {
  enum IssueType {
    IT_OUTAGE = 0;
    IT_PARTIAL_OUTAGE = 1;
    OUTAGE = 2;
    PARTIAL_OUTAGE = 3;
  }

  enum Source {
    GOOGLE = 0;
    NSRC_GOOGLE = 1;
  }

  enum State {
    ACTIVE = 0;
    CANCELLED = 1;
    COMPLETED = 2;
    NS_ACTIVE = 3;
    NS_CANCELED = 4;
  }

  repeated string affected_circuits = 1;
  string description = 2;
  string end_time = 3;
  IssueType issue_type = 4;
  string name = 5;
  Source source = 6;
  string start_time = 7;
  State state = 8;
}

message TargetHttpsProxiesSetQuicOverrideRequest {
  enum QuicOverride {
    DISABLE = 0;
    ENABLE = 1;
    NONE = 2;
  }

  QuicOverride quic_override = 1;
}

message NodeTemplateNodeTypeFlexibility {
  string cpus = 1;
  string local_ssd = 2;
  string memory = 3;
}

message ServerBinding {
  enum Type {
    RESTART_NODE_ON_ANY_SERVER = 0;
    RESTART_NODE_ON_MINIMAL_SERVERS = 1;
    SERVER_BINDING_TYPE_UNSPECIFIED = 2;
  }

  Type type = 1;
}

message RegionDisksResizeRequest {
  string size_gb = 1;
}

message HttpsHealthCheck {
  int32 check_interval_sec = 1;
  string creation_timestamp = 2;
  string description = 3;
  int32 healthy_threshold = 4;
  string host = 5;
  string id = 6;
  string kind = 7;
  string name = 8;
  int32 port = 9;
  string request_path = 10;
  string self_link = 11;
  int32 timeout_sec = 12;
  int32 unhealthy_threshold = 13;
}

message NetworkEndpointGroupsScopedList {
  repeated NetworkEndpointGroup network_endpoint_groups = 1;
  Warning warning = 2;
}

message NetworkEndpointGroupAggregatedList {
  string id = 1;
  map<string, NetworkEndpointGroupsScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message Reservation {
  enum Status {
    CREATING = 0;
    DELETING = 1;
    INVALID = 2;
    READY = 3;
    UPDATING = 4;
  }

  string commitment = 1;
  string creation_timestamp = 2;
  string description = 3;
  string id = 4;
  string kind = 5;
  string name = 6;
  string self_link = 7;
  AllocationSpecificSKUReservation specific_reservation = 8;
  bool specific_reservation_required = 9;
  Status status = 10;
  string zone = 11;
}

message ResourceCommitment {
  enum Type {
    ACCELERATOR = 0;
    LOCAL_SSD = 1;
    MEMORY = 2;
    UNSPECIFIED = 3;
    VCPU = 4;
  }

  string accelerator_type = 1;
  string amount = 2;
  Type type = 3;
}

message Commitment {
  enum Plan {
    INVALID = 0;
    THIRTY_SIX_MONTH = 1;
    TWELVE_MONTH = 2;
  }

  enum Status {
    ACTIVE = 0;
    CREATING = 1;
    EXPIRED = 2;
    NOT_YET_ACTIVE = 3;
  }

  string creation_timestamp = 1;
  string description = 2;
  string end_timestamp = 3;
  string id = 4;
  string kind = 5;
  string name = 6;
  Plan plan = 7;
  string region = 8;
  repeated Reservation reservations = 9;
  repeated ResourceCommitment resources = 10;
  string self_link = 11;
  string start_timestamp = 12;
  Status status = 13;
  string status_message = 14;
}

message InstancesSetMachineResourcesRequest {
  repeated AcceleratorConfig guest_accelerators = 1;
}

message NetworkPeering {
  enum State {
    ACTIVE = 0;
    INACTIVE = 1;
  }

  bool auto_create_routes = 1;
  bool exchange_subnet_routes = 2;
  bool export_custom_routes = 3;
  bool import_custom_routes = 4;
  string name = 5;
  string network = 6;
  State state = 7;
  string state_details = 8;
}

message SslCertificatesScopedList {
  repeated SslCertificate ssl_certificates = 1;
  Warning warning = 2;
}

message AuthorizationLoggingOptions {
  enum PermissionType {
    ADMIN_READ = 0;
    ADMIN_WRITE = 1;
    DATA_READ = 2;
    DATA_WRITE = 3;
    PERMISSION_TYPE_UNSPECIFIED = 4;
  }

  PermissionType permission_type = 1;
}

message InterconnectAttachmentPartnerMetadata {
  string interconnect_name = 1;
  string partner_name = 2;
  string portal_url = 3;
}

message ResourcePolicyWeeklyCycleDayOfWeek {
  enum Day {
    FRIDAY = 0;
    INVALID = 1;
    MONDAY = 2;
    SATURDAY = 3;
    SUNDAY = 4;
    THURSDAY = 5;
    TUESDAY = 6;
    WEDNESDAY = 7;
  }

  Day day = 1;
  string duration = 2;
  string start_time = 3;
}

message TargetInstance {
  enum NatPolicy {
    NO_NAT = 0;
  }

  string creation_timestamp = 1;
  string description = 2;
  string id = 3;
  string instance = 4;
  string kind = 5;
  string name = 6;
  NatPolicy nat_policy = 7;
  string self_link = 8;
  string zone = 9;
}

message TargetInstancesScopedList {
  repeated TargetInstance target_instances = 1;
  Warning warning = 2;
}

message InstanceGroupManagersRecreateInstancesRequest {
  repeated string instances = 1;
}

message AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk {
  enum Interface {
    NVME = 0;
    SCSI = 1;
  }

  string disk_size_gb = 1;
  Interface interface = 2;
}

message VmEndpointNatMappingsInterfaceNatMappings {
  repeated string drain_nat_ip_port_ranges = 1;
  repeated string nat_ip_port_ranges = 2;
  int32 num_total_drain_nat_ports = 3;
  int32 num_total_nat_ports = 4;
  string source_alias_ip_range = 5;
  string source_virtual_ip = 6;
}

message Binding {
  Expr condition = 1;
  repeated string members = 2;
  string role = 3;
}

message Policy {
  repeated AuditConfig audit_configs = 1;
  repeated Binding bindings = 2;
  string etag = 3;
  bool iam_owned = 4;
  repeated Rule rules = 5;
  int32 version = 6;
}

message GlobalSetPolicyRequest {
  repeated Binding bindings = 1;
  string etag = 2;
  Policy policy = 3;
}

message DiskType {
  string creation_timestamp = 1;
  string default_disk_size_gb = 2;
  DeprecationStatus deprecated = 3;
  string description = 4;
  string id = 5;
  string kind = 6;
  string name = 7;
  string region = 8;
  string self_link = 9;
  string valid_disk_size = 10;
  string zone = 11;
}

message TestPermissionsResponse {
  repeated string permissions = 1;
}

message TargetInstanceAggregatedList {
  string id = 1;
  map<string, TargetInstancesScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message InstanceWithNamedPorts {
  enum Status {
    DEPROVISIONING = 0;
    PROVISIONING = 1;
    REPAIRING = 2;
    RUNNING = 3;
    STAGING = 4;
    STOPPED = 5;
    STOPPING = 6;
    SUSPENDED = 7;
    SUSPENDING = 8;
    TERMINATED = 9;
  }

  string instance = 1;
  repeated NamedPort named_ports = 2;
  Status status = 3;
}

message RegionInstanceGroupsListInstances {
  string id = 1;
  repeated InstanceWithNamedPorts items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message SubnetworkSecondaryRange {
  string ip_cidr_range = 1;
  string range_name = 2;
}

message HealthCheckReference {
  string health_check = 1;
}

message TargetPoolsAddHealthCheckRequest {
  repeated HealthCheckReference health_checks = 1;
}

message HttpHeaderMatch {
  string exact_match = 1;
  string header_name = 2;
  bool invert_match = 3;
  string prefix_match = 4;
  bool present_match = 5;
  Int64RangeMatch range_match = 6;
  string regex_match = 7;
  string suffix_match = 8;
}

message HttpQueryParameterMatch {
  string exact_match = 1;
  string name = 2;
  bool present_match = 3;
  string regex_match = 4;
}

message HttpRouteRuleMatch {
  string full_path_match = 1;
  repeated HttpHeaderMatch header_matches = 2;
  bool ignore_case = 3;
  repeated MetadataFilter metadata_filters = 4;
  string prefix_match = 5;
  repeated HttpQueryParameterMatch query_parameter_matches = 6;
  string regex_match = 7;
}

message AllocationSpecificSKUAllocationReservedInstanceProperties {
  repeated AcceleratorConfig guest_accelerators = 1;
  repeated AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk local_ssds = 2;
  string machine_type = 3;
  string min_cpu_platform = 4;
}

message AllocationSpecificSKUReservation {
  string count = 1;
  string in_use_count = 2;
  AllocationSpecificSKUAllocationReservedInstanceProperties instance_properties = 3;
}

message Condition {
  string iam = 1;
  string op = 2;
  string svc = 3;
  string sys = 4;
  repeated string values = 5;
}

message CacheKeyPolicy {
  bool include_host = 1;
  bool include_protocol = 2;
  bool include_query_string = 3;
  repeated string query_string_blacklist = 4;
  repeated string query_string_whitelist = 5;
}

message ForwardingRulesScopedList {
  repeated ForwardingRule forwarding_rules = 1;
  Warning warning = 2;
}

message ForwardingRuleAggregatedList {
  string id = 1;
  map<string, ForwardingRulesScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message RouterStatusNatStatus {
  repeated string auto_allocated_nat_ips = 1;
  repeated string drain_auto_allocated_nat_ips = 2;
  repeated string drain_user_allocated_nat_ips = 3;
  int32 min_extra_nat_ips_needed = 4;
  string name = 5;
  int32 num_vm_endpoints_with_nat_mappings = 6;
  repeated string user_allocated_nat_ip_resources = 7;
  repeated string user_allocated_nat_ips = 8;
}

message BackendServiceGroupHealth {
  repeated HealthStatus health_status = 1;
  string kind = 2;
}

message Subnetwork {
  enum Purpose {
    INTERNAL_HTTPS_LOAD_BALANCER = 0;
    PRIVATE = 1;
    PRIVATE_RFC_1918 = 2;
  }

  enum Role {
    ACTIVE = 0;
    BACKUP = 1;
  }

  enum State {
    DRAINING = 0;
    READY = 1;
  }

  string creation_timestamp = 1;
  string description = 2;
  bool enable_flow_logs = 3;
  string fingerprint = 4;
  string gateway_address = 5;
  string id = 6;
  string ip_cidr_range = 7;
  string kind = 8;
  SubnetworkLogConfig log_config = 9;
  string name = 10;
  string network = 11;
  bool private_ip_google_access = 12;
  Purpose purpose = 13;
  string region = 14;
  Role role = 15;
  repeated SubnetworkSecondaryRange secondary_ip_ranges = 16;
  string self_link = 17;
  State state = 18;
}

message SubnetworksScopedList {
  repeated Subnetwork subnetworks = 1;
  Warning warning = 2;
}

message XpnResourceId {
  enum Type {
    PROJECT = 0;
    XPN_RESOURCE_TYPE_UNSPECIFIED = 1;
  }

  string id = 1;
  Type type = 2;
}

message ProjectsEnableXpnResourceRequest {
  XpnResourceId xpn_resource = 1;
}

message RegionDiskTypeList {
  string id = 1;
  repeated DiskType items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message HealthChecksScopedList {
  repeated HealthCheck health_checks = 1;
  Warning warning = 2;
}

message NetworkEndpointGroupsAttachEndpointsRequest {
  repeated NetworkEndpoint network_endpoints = 1;
}

message TargetSslProxiesSetBackendServiceRequest {
  string service = 1;
}

message Zone {
  enum Status {
    DOWN = 0;
    UP = 1;
  }

  repeated string available_cpu_platforms = 1;
  string creation_timestamp = 2;
  DeprecationStatus deprecated = 3;
  string description = 4;
  string id = 5;
  string kind = 6;
  string name = 7;
  string region = 8;
  string self_link = 9;
  Status status = 10;
}

message ZoneList {
  string id = 1;
  repeated Zone items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message InstanceTemplate {
  string creation_timestamp = 1;
  string description = 2;
  string id = 3;
  string kind = 4;
  string name = 5;
  InstanceProperties properties = 6;
  string self_link = 7;
  string source_instance = 8;
  SourceInstanceParams source_instance_params = 9;
}

message InstanceTemplateList {
  string id = 1;
  repeated InstanceTemplate items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message LicenseResourceRequirements {
  int32 min_guest_cpu_count = 1;
  int32 min_memory_mb = 2;
}

message NodeGroupsAddNodesRequest {
  int32 additional_node_count = 1;
}

message TargetVpnGateway {
  enum Status {
    CREATING = 0;
    DELETING = 1;
    FAILED = 2;
    READY = 3;
  }

  string creation_timestamp = 1;
  string description = 2;
  repeated string forwarding_rules = 3;
  string id = 4;
  string kind = 5;
  string name = 6;
  string network = 7;
  string region = 8;
  string self_link = 9;
  Status status = 10;
  repeated string tunnels = 11;
}

message TargetVpnGatewayList {
  string id = 1;
  repeated TargetVpnGateway items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message Backend {
  enum BalancingMode {
    CONNECTION = 0;
    RATE = 1;
    UTILIZATION = 2;
  }

  BalancingMode balancing_mode = 1;
  float capacity_scaler = 2;
  string description = 3;
  bool failover = 4;
  string group = 5;
  int32 max_connections = 6;
  int32 max_connections_per_endpoint = 7;
  int32 max_connections_per_instance = 8;
  int32 max_rate = 9;
  float max_rate_per_endpoint = 10;
  float max_rate_per_instance = 11;
  float max_utilization = 12;
}

message InstanceReference {
  string instance = 1;
}

message NodeGroupList {
  string id = 1;
  repeated NodeGroup items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message InstanceGroupsRemoveInstancesRequest {
  repeated InstanceReference instances = 1;
}

message ResourcePolicySnapshotSchedulePolicyRetentionPolicy {
  enum OnSourceDiskDelete {
    APPLY_RETENTION_POLICY = 0;
    KEEP_AUTO_SNAPSHOTS = 1;
    UNSPECIFIED_ON_SOURCE_DISK_DELETE = 2;
  }

  int32 max_retention_days = 1;
  OnSourceDiskDelete on_source_disk_delete = 2;
}

message ResourcePolicySnapshotSchedulePolicySchedule {
  ResourcePolicyDailyCycle daily_schedule = 1;
  ResourcePolicyHourlyCycle hourly_schedule = 2;
  ResourcePolicyWeeklyCycle weekly_schedule = 3;
}

message ResourcePolicySnapshotSchedulePolicy {
  ResourcePolicySnapshotSchedulePolicyRetentionPolicy retention_policy = 1;
  ResourcePolicySnapshotSchedulePolicySchedule schedule = 2;
  ResourcePolicySnapshotSchedulePolicySnapshotProperties snapshot_properties = 3;
}

message Disk {
  enum Status {
    CREATING = 0;
    DELETING = 1;
    FAILED = 2;
    READY = 3;
    RESTORING = 4;
  }

  string creation_timestamp = 1;
  string description = 2;
  CustomerEncryptionKey disk_encryption_key = 3;
  repeated GuestOsFeature guest_os_features = 4;
  string id = 5;
  string kind = 6;
  string label_fingerprint = 7;
  map<string, string> labels = 8;
  string last_attach_timestamp = 9;
  string last_detach_timestamp = 10;
  repeated string license_codes = 11;
  repeated string licenses = 12;
  string name = 13;
  string options = 14;
  string physical_block_size_bytes = 15;
  string region = 16;
  repeated string replica_zones = 17;
  repeated string resource_policies = 18;
  string self_link = 19;
  string size_gb = 20;
  string source_image = 21;
  CustomerEncryptionKey source_image_encryption_key = 22;
  string source_image_id = 23;
  string source_snapshot = 24;
  CustomerEncryptionKey source_snapshot_encryption_key = 25;
  string source_snapshot_id = 26;
  Status status = 27;
  string type = 28;
  repeated string users = 29;
  string zone = 30;
}

message DisksScopedList {
  repeated Disk disks = 1;
  Warning warning = 2;
}

message MachineType {
  string creation_timestamp = 1;
  DeprecationStatus deprecated = 2;
  string description = 3;
  int32 guest_cpus = 4;
  string id = 5;
  int32 image_space_gb = 6;
  bool is_shared_cpu = 7;
  string kind = 8;
  int32 maximum_persistent_disks = 9;
  string maximum_persistent_disks_size_gb = 10;
  int32 memory_mb = 11;
  string name = 12;
  repeated ScratchDisks scratch_disks = 13;
  string self_link = 14;
  string zone = 15;
}

message MachineTypeList {
  string id = 1;
  repeated MachineType items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message SslPolicy {
  enum MinTlsVersion {
    TLS_1_0 = 0;
    TLS_1_1 = 1;
    TLS_1_2 = 2;
  }

  enum Profile {
    COMPATIBLE = 0;
    CUSTOM = 1;
    MODERN = 2;
    RESTRICTED = 3;
  }

  string creation_timestamp = 1;
  repeated string custom_features = 2;
  string description = 3;
  repeated string enabled_features = 4;
  string fingerprint = 5;
  string id = 6;
  string kind = 7;
  MinTlsVersion min_tls_version = 8;
  string name = 9;
  Profile profile = 10;
  string self_link = 11;
  repeated Warnings warnings = 12;
}

message SslPoliciesList {
  string id = 1;
  repeated SslPolicy items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message ProjectsListXpnHostsRequest {
  string organization = 1;
}

message Address {
  enum AddressType {
    EXTERNAL = 0;
    INTERNAL = 1;
    UNSPECIFIED_TYPE = 2;
  }

  enum IpVersion {
    IPV4 = 0;
    IPV6 = 1;
    UNSPECIFIED_VERSION = 2;
  }

  enum NetworkTier {
    PREMIUM = 0;
    STANDARD = 1;
  }

  enum Purpose {
    DNS_RESOLVER = 0;
    GCE_ENDPOINT = 1;
    NAT_AUTO = 2;
    VPC_PEERING = 3;
  }

  enum Status {
    IN_USE = 0;
    RESERVED = 1;
    RESERVING = 2;
  }

  string address = 1;
  AddressType address_type = 2;
  string creation_timestamp = 3;
  string description = 4;
  string id = 5;
  IpVersion ip_version = 6;
  string kind = 7;
  string name = 8;
  string network = 9;
  NetworkTier network_tier = 10;
  int32 prefix_length = 11;
  Purpose purpose = 12;
  string region = 13;
  string self_link = 14;
  Status status = 15;
  string subnetwork = 16;
  repeated string users = 17;
}

message RegionInstanceGroupManagersApplyUpdatesRequest {
  repeated string instances = 1;
  string minimal_action = 2;
  string most_disruptive_allowed_action = 3;
}

message SubnetworksExpandIpCidrRangeRequest {
  string ip_cidr_range = 1;
}

message TargetSslProxiesSetProxyHeaderRequest {
  enum ProxyHeader {
    NONE = 0;
    PROXY_V1 = 1;
  }

  ProxyHeader proxy_header = 1;
}

message NetworksAddPeeringRequest {
  bool auto_create_routes = 1;
  string name = 2;
  NetworkPeering network_peering = 3;
  string peer_network = 4;
}

message CorsPolicy {
  bool allow_credentials = 1;
  repeated string allow_headers = 2;
  repeated string allow_methods = 3;
  repeated string allow_origin_regexes = 4;
  repeated string allow_origins = 5;
  bool disabled = 6;
  repeated string expose_headers = 7;
  int32 max_age = 8;
}

message RequestMirrorPolicy {
  string backend_service = 1;
}

message HttpRetryPolicy {
  uint32 num_retries = 1;
  Duration per_try_timeout = 2;
  repeated string retry_conditions = 3;
}

message UrlRewrite {
  string host_rewrite = 1;
  string path_prefix_rewrite = 2;
}

message WeightedBackendService {
  string backend_service = 1;
  HttpHeaderAction header_action = 2;
  uint32 weight = 3;
}

message HttpRouteAction {
  CorsPolicy cors_policy = 1;
  HttpFaultInjection fault_injection_policy = 2;
  RequestMirrorPolicy request_mirror_policy = 3;
  HttpRetryPolicy retry_policy = 4;
  Duration timeout = 5;
  UrlRewrite url_rewrite = 6;
  repeated WeightedBackendService weighted_backend_services = 7;
}

message HostRule {
  string description = 1;
  repeated string hosts = 2;
  string path_matcher = 3;
}

message DeprecationStatus {
  enum State {
    ACTIVE = 0;
    DELETED = 1;
    DEPRECATED = 2;
    OBSOLETE = 3;
  }

  string deleted = 1;
  string deprecated = 2;
  string obsolete = 3;
  string replacement = 4;
  State state = 5;
}

message GuestOsFeature {
  enum Type {
    FEATURE_TYPE_UNSPECIFIED = 0;
    MULTI_IP_SUBNET = 1;
    SECURE_BOOT = 2;
    UEFI_COMPATIBLE = 3;
    VIRTIO_SCSI_MULTIQUEUE = 4;
    WINDOWS = 5;
  }

  Type type = 1;
}

message CustomerEncryptionKey {
  string kms_key_name = 1;
  string kms_key_service_account = 2;
  string raw_key = 3;
  string sha256 = 4;
}

message RawDisk {
  enum ContainerType {
    TAR = 0;
  }

  ContainerType container_type = 1;
  string sha1_checksum = 2;
  string source = 3;
}

message InitialStateConfig {
  repeated FileContentBuffer dbs = 1;
  repeated FileContentBuffer dbxs = 2;
  repeated FileContentBuffer keks = 3;
  FileContentBuffer pk = 4;
}

message Image {
  enum SourceType {
    RAW = 0;
  }

  enum Status {
    DELETING = 0;
    FAILED = 1;
    PENDING = 2;
    READY = 3;
  }

  string archive_size_bytes = 1;
  string creation_timestamp = 2;
  DeprecationStatus deprecated = 3;
  string description = 4;
  string disk_size_gb = 5;
  string family = 6;
  repeated GuestOsFeature guest_os_features = 7;
  string id = 8;
  CustomerEncryptionKey image_encryption_key = 9;
  string kind = 10;
  string label_fingerprint = 11;
  map<string, string> labels = 12;
  repeated string license_codes = 13;
  repeated string licenses = 14;
  string name = 15;
  RawDisk raw_disk = 16;
  string self_link = 17;
  InitialStateConfig shielded_instance_initial_state = 18;
  string source_disk = 19;
  CustomerEncryptionKey source_disk_encryption_key = 20;
  string source_disk_id = 21;
  string source_image = 22;
  CustomerEncryptionKey source_image_encryption_key = 23;
  string source_image_id = 24;
  string source_snapshot = 25;
  CustomerEncryptionKey source_snapshot_encryption_key = 26;
  string source_snapshot_id = 27;
  SourceType source_type = 28;
  Status status = 29;
  repeated string storage_locations = 30;
}

message MachineTypesScopedList {
  repeated MachineType machine_types = 1;
  Warning warning = 2;
}

message MachineTypeAggregatedList {
  string id = 1;
  map<string, MachineTypesScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message PacketMirroringFilter {
  repeated string i_p_protocols = 1;
  repeated string cidr_ranges = 2;
}

message ExchangedPeeringRoute {
  enum Type {
    DYNAMIC_PEERING_ROUTE = 0;
    STATIC_PEERING_ROUTE = 1;
    SUBNET_PEERING_ROUTE = 2;
  }

  string dest_range = 1;
  bool imported = 2;
  string next_hop_region = 3;
  uint32 priority = 4;
  Type type = 5;
}

message ExchangedPeeringRoutesList {
  string id = 1;
  repeated ExchangedPeeringRoute items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message NamedPort {
  string name = 1;
  int32 port = 2;
}

message DiskInstantiationConfig {
  enum InstantiateFrom {
    ATTACH_READ_ONLY = 0;
    BLANK = 1;
    CUSTOM_IMAGE = 2;
    DEFAULT = 3;
    DO_NOT_INCLUDE = 4;
    SOURCE_IMAGE = 5;
    SOURCE_IMAGE_FAMILY = 6;
  }

  bool auto_delete = 1;
  string custom_image = 2;
  string device_name = 3;
  InstantiateFrom instantiate_from = 4;
}

message InstanceGroupManagerActionsSummary {
  int32 abandoning = 1;
  int32 creating = 2;
  int32 creating_without_retries = 3;
  int32 deleting = 4;
  int32 none = 5;
  int32 recreating = 6;
  int32 refreshing = 7;
  int32 restarting = 8;
  int32 verifying = 9;
}

message DistributionPolicy {
  repeated DistributionPolicyZoneConfiguration zones = 1;
}

message InstanceGroupManagerStatus {
  string autoscaler = 1;
  bool is_stable = 2;
  InstanceGroupManagerStatusVersionTarget version_target = 3;
}

message InstanceGroupManagerVersion {
  string instance_template = 1;
  string name = 2;
  FixedOrPercent target_size = 3;
}

message SubnetworkLogConfig {
  enum AggregationInterval {
    INTERVAL_10_MIN = 0;
    INTERVAL_15_MIN = 1;
    INTERVAL_1_MIN = 2;
    INTERVAL_30_SEC = 3;
    INTERVAL_5_MIN = 4;
    INTERVAL_5_SEC = 5;
  }

  enum Metadata {
    CUSTOM_METADATA = 0;
    EXCLUDE_ALL_METADATA = 1;
    INCLUDE_ALL_METADATA = 2;
  }

  AggregationInterval aggregation_interval = 1;
  bool enable = 2;
  string filter_expr = 3;
  float flow_sampling = 4;
  Metadata metadata = 5;
  repeated string metadata_fields = 6;
}

message UrlMap {
  string creation_timestamp = 1;
  HttpRouteAction default_route_action = 2;
  string default_service = 3;
  HttpRedirectAction default_url_redirect = 4;
  string description = 5;
  string fingerprint = 6;
  HttpHeaderAction header_action = 7;
  repeated HostRule host_rules = 8;
  string id = 9;
  string kind = 10;
  string name = 11;
  repeated PathMatcher path_matchers = 12;
  string region = 13;
  string self_link = 14;
  repeated UrlMapTest tests = 15;
}

message UrlMapList {
  string id = 1;
  repeated UrlMap items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message ZoneSetLabelsRequest {
  string label_fingerprint = 1;
  map<string, string> labels = 2;
}

message RouterBgp {
  enum AdvertiseMode {
    CUSTOM = 0;
    DEFAULT = 1;
  }

  enum AdvertisedGroups {
    ALL_SUBNETS = 0;
  }

  AdvertiseMode advertise_mode = 1;
  repeated AdvertisedGroups advertised_groups = 2;
  repeated RouterAdvertisedIpRange advertised_ip_ranges = 3;
  uint32 asn = 4;
}

message RouterBgpPeer {
  enum AdvertiseMode {
    CUSTOM = 0;
    DEFAULT = 1;
  }

  enum AdvertisedGroups {
    ALL_SUBNETS = 0;
  }

  enum ManagementType {
    MANAGED_BY_ATTACHMENT = 0;
    MANAGED_BY_USER = 1;
  }

  AdvertiseMode advertise_mode = 1;
  repeated AdvertisedGroups advertised_groups = 2;
  repeated RouterAdvertisedIpRange advertised_ip_ranges = 3;
  uint32 advertised_route_priority = 4;
  string interface_name = 5;
  string ip_address = 6;
  ManagementType management_type = 7;
  string name = 8;
  uint32 peer_asn = 9;
  string peer_ip_address = 10;
}

message RouterInterface {
  enum ManagementType {
    MANAGED_BY_ATTACHMENT = 0;
    MANAGED_BY_USER = 1;
  }

  string ip_range = 1;
  string linked_interconnect_attachment = 2;
  string linked_vpn_tunnel = 3;
  ManagementType management_type = 4;
  string name = 5;
}

message RouterNat {
  enum NatIpAllocateOption {
    AUTO_ONLY = 0;
    MANUAL_ONLY = 1;
  }

  enum SourceSubnetworkIpRangesToNat {
    ALL_SUBNETWORKS_ALL_IP_RANGES = 0;
    ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES = 1;
    LIST_OF_SUBNETWORKS = 2;
  }

  repeated string drain_nat_ips = 1;
  int32 icmp_idle_timeout_sec = 2;
  RouterNatLogConfig log_config = 3;
  int32 min_ports_per_vm = 4;
  string name = 5;
  NatIpAllocateOption nat_ip_allocate_option = 6;
  repeated string nat_ips = 7;
  SourceSubnetworkIpRangesToNat source_subnetwork_ip_ranges_to_nat = 8;
  repeated RouterNatSubnetworkToNat subnetworks = 9;
  int32 tcp_established_idle_timeout_sec = 10;
  int32 tcp_transitory_idle_timeout_sec = 11;
  int32 udp_idle_timeout_sec = 12;
}

message UrlMapsScopedList {
  repeated UrlMap url_maps = 1;
  Warning warning = 2;
}

message FileContentBuffer {
  enum FileType {
    BIN = 0;
    UNDEFINED = 1;
    X509 = 2;
  }

  string content = 1;
  FileType file_type = 2;
}

message VpnGatewaysScopedList {
  repeated VpnGateway vpn_gateways = 1;
  Warning warning = 2;
}

message VpnGatewayAggregatedList {
  string id = 1;
  map<string, VpnGatewaysScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message InterconnectDiagnosticsLinkLACPStatus {
  enum State {
    ACTIVE = 0;
    DETACHED = 1;
  }

  string google_system_id = 1;
  string neighbor_system_id = 2;
  State state = 3;
}

message InstanceGroup {
  string creation_timestamp = 1;
  string description = 2;
  string fingerprint = 3;
  string id = 4;
  string kind = 5;
  string name = 6;
  repeated NamedPort named_ports = 7;
  string network = 8;
  string region = 9;
  string self_link = 10;
  int32 size = 11;
  string subnetwork = 12;
  string zone = 13;
}

message GlobalNetworkEndpointGroupsDetachEndpointsRequest {
  repeated NetworkEndpoint network_endpoints = 1;
}

message Snapshot {
  enum Status {
    CREATING = 0;
    DELETING = 1;
    FAILED = 2;
    READY = 3;
    UPLOADING = 4;
  }

  enum StorageBytesStatus {
    UPDATING = 0;
    UP_TO_DATE = 1;
  }

  bool auto_created = 1;
  string creation_timestamp = 2;
  string description = 3;
  string disk_size_gb = 4;
  string download_bytes = 5;
  string id = 6;
  string kind = 7;
  string label_fingerprint = 8;
  map<string, string> labels = 9;
  repeated string license_codes = 10;
  repeated string licenses = 11;
  string name = 12;
  string self_link = 13;
  CustomerEncryptionKey snapshot_encryption_key = 14;
  string source_disk = 15;
  CustomerEncryptionKey source_disk_encryption_key = 16;
  string source_disk_id = 17;
  Status status = 18;
  string storage_bytes = 19;
  StorageBytesStatus storage_bytes_status = 20;
  repeated string storage_locations = 21;
}

message UrlMapsAggregatedList {
  string id = 1;
  map<string, UrlMapsScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message Int64RangeMatch {
  string range_end = 1;
  string range_start = 2;
}

message ShieldedInstanceIdentityEntry {
  string ek_cert = 1;
  string ek_pub = 2;
}

message ExternalVpnGatewayInterface {
  uint32 id = 1;
  string ip_address = 2;
}

message ExternalVpnGateway {
  enum RedundancyType {
    FOUR_IPS_REDUNDANCY = 0;
    SINGLE_IP_INTERNALLY_REDUNDANT = 1;
    TWO_IPS_REDUNDANCY = 2;
  }

  string creation_timestamp = 1;
  string description = 2;
  string id = 3;
  repeated ExternalVpnGatewayInterface interfaces = 4;
  string kind = 5;
  string label_fingerprint = 6;
  map<string, string> labels = 7;
  string name = 8;
  RedundancyType redundancy_type = 9;
  string self_link = 10;
}

message SourceInstanceParams {
  repeated DiskInstantiationConfig disk_configs = 1;
}

message HttpHealthCheck {
  int32 check_interval_sec = 1;
  string creation_timestamp = 2;
  string description = 3;
  int32 healthy_threshold = 4;
  string host = 5;
  string id = 6;
  string kind = 7;
  string name = 8;
  int32 port = 9;
  string request_path = 10;
  string self_link = 11;
  int32 timeout_sec = 12;
  int32 unhealthy_threshold = 13;
}

message HttpHealthCheckList {
  string id = 1;
  repeated HttpHealthCheck items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message ResourcePoliciesScopedList {
  repeated ResourcePolicy resource_policies = 1;
  Warning warning = 2;
}

message ResourcePolicyAggregatedList {
  string etag = 1;
  string id = 2;
  map<string, ResourcePoliciesScopedList> items = 3;
  string kind = 4;
  string next_page_token = 5;
  string self_link = 6;
  Warning warning = 7;
}

message AutoscalingPolicyCpuUtilization {
  double utilization_target = 1;
}

message UrlMapTest {
  string description = 1;
  string host = 2;
  string path = 3;
  string service = 4;
}

message HttpRedirectAction {
  enum RedirectResponseCode {
    FOUND = 0;
    MOVED_PERMANENTLY_DEFAULT = 1;
    PERMANENT_REDIRECT = 2;
    SEE_OTHER = 3;
    TEMPORARY_REDIRECT = 4;
  }

  string host_redirect = 1;
  bool https_redirect = 2;
  string path_redirect = 3;
  string prefix_redirect = 4;
  RedirectResponseCode redirect_response_code = 5;
  bool strip_query = 6;
}

message SecurityPolicyReference {
  string security_policy = 1;
}

message UrlMapReference {
  string url_map = 1;
}

message InterconnectLocation {
  enum Continent {
    AFRICA = 0;
    ASIA_PAC = 1;
    C_AFRICA = 2;
    C_ASIA_PAC = 3;
    C_EUROPE = 4;
    C_NORTH_AMERICA = 5;
    C_SOUTH_AMERICA = 6;
    EUROPE = 7;
    NORTH_AMERICA = 8;
    SOUTH_AMERICA = 9;
  }

  enum Status {
    AVAILABLE = 0;
    CLOSED = 1;
  }

  string address = 1;
  string availability_zone = 2;
  string city = 3;
  Continent continent = 4;
  string creation_timestamp = 5;
  string description = 6;
  string facility_provider = 7;
  string facility_provider_facility_id = 8;
  string id = 9;
  string kind = 10;
  string name = 11;
  string peeringdb_facility_id = 12;
  repeated InterconnectLocationRegionInfo region_infos = 13;
  string self_link = 14;
  Status status = 15;
}

message InterconnectLocationList {
  string id = 1;
  repeated InterconnectLocation items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message ConsistentHashLoadBalancerSettingsHttpCookie {
  string name = 1;
  string path = 2;
  Duration ttl = 3;
}

message InterconnectCircuitInfo {
  string customer_demarc_id = 1;
  string google_circuit_id = 2;
  string google_demarc_id = 3;
}

message BackendBucket {
  string bucket_name = 1;
  BackendBucketCdnPolicy cdn_policy = 2;
  string creation_timestamp = 3;
  string description = 4;
  bool enable_cdn = 5;
  string id = 6;
  string kind = 7;
  string name = 8;
  string self_link = 9;
}

message BackendBucketList {
  string id = 1;
  repeated BackendBucket items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message TargetHttpsProxyAggregatedList {
  string id = 1;
  map<string, TargetHttpsProxiesScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message DiskMoveRequest {
  string destination_zone = 1;
  string target_disk = 2;
}

message ResourcePolicy {
  enum Status {
    CREATING = 0;
    DELETING = 1;
    INVALID = 2;
    READY = 3;
  }

  string creation_timestamp = 1;
  string description = 2;
  ResourcePolicyGroupPlacementPolicy group_placement_policy = 3;
  string id = 4;
  string kind = 5;
  string name = 6;
  string region = 7;
  string self_link = 8;
  ResourcePolicySnapshotSchedulePolicy snapshot_schedule_policy = 9;
  Status status = 10;
}

message ResourcePolicyList {
  string etag = 1;
  string id = 2;
  repeated ResourcePolicy items = 3;
  string kind = 4;
  string next_page_token = 5;
  string self_link = 6;
  Warning warning = 7;
}

message BackendServiceCdnPolicy {
  CacheKeyPolicy cache_key_policy = 1;
  string signed_url_cache_max_age_sec = 2;
  repeated string signed_url_key_names = 3;
}

message InstanceGroupsScopedList {
  repeated InstanceGroup instance_groups = 1;
  Warning warning = 2;
}

message TargetVpnGatewaysScopedList {
  repeated TargetVpnGateway target_vpn_gateways = 1;
  Warning warning = 2;
}

message InstanceGroupManagersAbandonInstancesRequest {
  repeated string instances = 1;
}

message ReservationsScopedList {
  repeated Reservation reservations = 1;
  Warning warning = 2;
}

message SubnetworksSetPrivateIpGoogleAccessRequest {
  bool private_ip_google_access = 1;
}

message InstancesSetMinCpuPlatformRequest {
  string min_cpu_platform = 1;
}

message PacketMirroringForwardingRuleInfo {
  string canonical_url = 1;
  string url = 2;
}

message CommitmentList {
  string id = 1;
  repeated Commitment items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message RouterNatLogConfig {
  enum Filter {
    ALL = 0;
    ERRORS_ONLY = 1;
    TRANSLATIONS_ONLY = 2;
  }

  bool enable = 1;
  Filter filter = 2;
}

message RouterNatSubnetworkToNat {
  enum SourceIpRangesToNat {
    ALL_IP_RANGES = 0;
    LIST_OF_SECONDARY_IP_RANGES = 1;
    PRIMARY_IP_RANGE = 2;
  }

  string name = 1;
  repeated string secondary_ip_range_names = 2;
  repeated SourceIpRangesToNat source_ip_ranges_to_nat = 3;
}

message TargetVpnGatewayAggregatedList {
  string id = 1;
  map<string, TargetVpnGatewaysScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message UsableSubnetwork {
  string ip_cidr_range = 1;
  string network = 2;
  repeated UsableSubnetworkSecondaryRange secondary_ip_ranges = 3;
  string subnetwork = 4;
}

message UsableSubnetworksAggregatedList {
  string id = 1;
  repeated UsableSubnetwork items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message Route {
  string creation_timestamp = 1;
  string description = 2;
  string dest_range = 3;
  string id = 4;
  string kind = 5;
  string name = 6;
  string network = 7;
  string next_hop_gateway = 8;
  string next_hop_ilb = 9;
  string next_hop_instance = 10;
  string next_hop_ip = 11;
  string next_hop_network = 12;
  string next_hop_peering = 13;
  string next_hop_vpn_tunnel = 14;
  uint32 priority = 15;
  string self_link = 16;
  repeated string tags = 17;
  repeated Warnings warnings = 18;
}

message RouterStatusBgpPeerStatus {
  enum Status {
    DOWN = 0;
    UNKNOWN = 1;
    UP = 2;
  }

  repeated Route advertised_routes = 1;
  string ip_address = 2;
  string linked_vpn_tunnel = 3;
  string name = 4;
  uint32 num_learned_routes = 5;
  string peer_ip_address = 6;
  string state = 7;
  Status status = 8;
  string uptime = 9;
  string uptime_seconds = 10;
}

message RouterStatus {
  repeated Route best_routes = 1;
  repeated Route best_routes_for_router = 2;
  repeated RouterStatusBgpPeerStatus bgp_peer_status = 3;
  repeated RouterStatusNatStatus nat_status = 4;
  string network = 5;
}

message RegionTargetHttpsProxiesSetSslCertificatesRequest {
  repeated string ssl_certificates = 1;
}

message PacketMirroringMirroredResourceInfoInstanceInfo {
  string canonical_url = 1;
  string url = 2;
}

message PacketMirroringMirroredResourceInfoSubnetInfo {
  string canonical_url = 1;
  string url = 2;
}

message PacketMirroringMirroredResourceInfo {
  repeated PacketMirroringMirroredResourceInfoInstanceInfo instances = 1;
  repeated PacketMirroringMirroredResourceInfoSubnetInfo subnetworks = 2;
  repeated string tags = 3;
}

message InterconnectAttachmentPrivateInfo {
  uint32 tag8021q = 1;
}

message PathRule {
  repeated string paths = 1;
  HttpRouteAction route_action = 2;
  string service = 3;
  HttpRedirectAction url_redirect = 4;
}

message TargetPoolsScopedList {
  repeated TargetPool target_pools = 1;
  Warning warning = 2;
}

message TargetPoolAggregatedList {
  string id = 1;
  map<string, TargetPoolsScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message SecurityPolicy {
  string creation_timestamp = 1;
  string description = 2;
  string fingerprint = 3;
  string id = 4;
  string kind = 5;
  string name = 6;
  repeated SecurityPolicyRule rules = 7;
  string self_link = 8;
}

message SecurityPolicyList {
  string id = 1;
  repeated SecurityPolicy items = 2;
  string kind = 3;
  string next_page_token = 4;
  Warning warning = 5;
}

message VmEndpointNatMappings {
  string instance_name = 1;
  repeated VmEndpointNatMappingsInterfaceNatMappings interface_nat_mappings = 2;
}

message RouterList {
  string id = 1;
  repeated Router items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message AddressesScopedList {
  repeated Address addresses = 1;
  Warning warning = 2;
}

message AddressAggregatedList {
  string id = 1;
  map<string, AddressesScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message RouterAdvertisedIpRange {
  string description = 1;
  string range = 2;
}

message InstancesScopedList {
  repeated Instance instances = 1;
  Warning warning = 2;
}

message InstanceAggregatedList {
  string id = 1;
  map<string, InstancesScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message RegionInstanceGroupManagersListErrorsResponse {
  repeated InstanceManagedByIgmError items = 1;
  string next_page_token = 2;
}

message InstanceGroupManagersApplyUpdatesRequest {
  repeated string instances = 1;
  string minimal_action = 2;
  string most_disruptive_allowed_action = 3;
}

message BackendServiceReference {
  string backend_service = 1;
}

message InterconnectDiagnosticsLinkOpticalPower {
  enum State {
    HIGH_ALARM = 0;
    HIGH_WARNING = 1;
    LOW_ALARM = 2;
    LOW_WARNING = 3;
    OK = 4;
  }

  State state = 1;
  float value = 2;
}

message NodeTypeList {
  string id = 1;
  repeated NodeType items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message VpnGatewayVpnGatewayInterface {
  uint32 id = 1;
  string ip_address = 2;
}

message RegionInstanceGroupManagersSetTemplateRequest {
  string instance_template = 1;
}

message InstancesSetServiceAccountRequest {
  string email = 1;
  repeated string scopes = 2;
}

message TestPermissionsRequest {
  repeated string permissions = 1;
}

message DiskTypeList {
  string id = 1;
  repeated DiskType items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message TargetSslProxiesSetSslCertificatesRequest {
  repeated string ssl_certificates = 1;
}

message DistributionPolicyZoneConfiguration {
  string zone = 1;
}

message TargetHttpProxiesScopedList {
  repeated TargetHttpProxy target_http_proxies = 1;
  Warning warning = 2;
}

message SslPolicyReference {
  string ssl_policy = 1;
}

message PerInstanceConfig {
  string fingerprint = 1;
  string name = 2;
}

message RegionInstanceGroupManagersCreateInstancesRequest {
  repeated PerInstanceConfig instances = 1;
}

message TargetTcpProxy {
  enum ProxyHeader {
    NONE = 0;
    PROXY_V1 = 1;
  }

  string creation_timestamp = 1;
  string description = 2;
  string id = 3;
  string kind = 4;
  string name = 5;
  ProxyHeader proxy_header = 6;
  string self_link = 7;
  string service = 8;
}

message TargetTcpProxyList {
  string id = 1;
  repeated TargetTcpProxy items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message HealthChecksAggregatedList {
  string id = 1;
  map<string, HealthChecksScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message AutoscalingPolicyLoadBalancingUtilization {
  double utilization_target = 1;
}

message AutoscalingPolicy {
  enum Mode {
    OFF = 0;
    ON = 1;
    ONLY_UP = 2;
  }

  int32 cool_down_period_sec = 1;
  AutoscalingPolicyCpuUtilization cpu_utilization = 2;
  repeated AutoscalingPolicyCustomMetricUtilization custom_metric_utilizations = 3;
  AutoscalingPolicyLoadBalancingUtilization load_balancing_utilization = 4;
  int32 max_num_replicas = 5;
  int32 min_num_replicas = 6;
  Mode mode = 7;
}

message DisksAddResourcePoliciesRequest {
  repeated string resource_policies = 1;
}

message SecurityPolicyRule {
  string action = 1;
  string description = 2;
  string kind = 3;
  SecurityPolicyRuleMatcher match = 4;
  bool preview = 5;
  int32 priority = 6;
}

message InstancesSetLabelsRequest {
  string label_fingerprint = 1;
  map<string, string> labels = 2;
}

message Region {
  enum Status {
    DOWN = 0;
    UP = 1;
  }

  string creation_timestamp = 1;
  DeprecationStatus deprecated = 2;
  string description = 3;
  string id = 4;
  string kind = 5;
  string name = 6;
  repeated Quota quotas = 7;
  string self_link = 8;
  Status status = 9;
  repeated string zones = 10;
}

message RegionList {
  string id = 1;
  repeated Region items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message InstanceGroupAggregatedList {
  string id = 1;
  map<string, InstanceGroupsScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message FirewallLogConfig {
  bool enable = 1;
}

message TargetTcpProxiesSetProxyHeaderRequest {
  enum ProxyHeader {
    NONE = 0;
    PROXY_V1 = 1;
  }

  ProxyHeader proxy_header = 1;
}

message ReservationList {
  string id = 1;
  repeated Reservation items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message PathMatcher {
  HttpRouteAction default_route_action = 1;
  string default_service = 2;
  HttpRedirectAction default_url_redirect = 3;
  string description = 4;
  HttpHeaderAction header_action = 5;
  string name = 6;
  repeated PathRule path_rules = 7;
  repeated HttpRouteRule route_rules = 8;
}

message AcceleratorTypesScopedList {
  repeated AcceleratorType accelerator_types = 1;
  Warning warning = 2;
}

message AcceleratorTypeAggregatedList {
  string id = 1;
  map<string, AcceleratorTypesScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message CommitmentsScopedList {
  repeated Commitment commitments = 1;
  Warning warning = 2;
}

message CommitmentAggregatedList {
  string id = 1;
  map<string, CommitmentsScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message VpnGateway {
  string creation_timestamp = 1;
  string description = 2;
  string id = 3;
  string kind = 4;
  string label_fingerprint = 5;
  map<string, string> labels = 6;
  string name = 7;
  string network = 8;
  string region = 9;
  string self_link = 10;
  repeated VpnGatewayVpnGatewayInterface vpn_interfaces = 11;
}

message VpnGatewayList {
  string id = 1;
  repeated VpnGateway items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message VpnGatewaysGetStatusResponse {
  VpnGatewayStatus result = 1;
}

message SecurityPolicyRuleMatcherConfig {
  repeated string src_ip_ranges = 1;
}

message Expr {
  string description = 1;
  string expression = 2;
  string location = 3;
  string title = 4;
}

message SecurityPolicyRuleMatcher {
  enum VersionedExpr {
    SRC_IPS_V1 = 0;
  }

  SecurityPolicyRuleMatcherConfig config = 1;
  Expr expr = 2;
  VersionedExpr versioned_expr = 3;
}

message InstanceGroupManagersDeleteInstancesRequest {
  repeated string instances = 1;
}

message InstanceGroupManagersListErrorsResponse {
  repeated InstanceManagedByIgmError items = 1;
  string next_page_token = 2;
}

message RegionSetPolicyRequest {
  repeated Binding bindings = 1;
  string etag = 2;
  Policy policy = 3;
}

message Quota {
  enum Metric {
    AFFINITY_GROUPS = 0;
    AUTOSCALERS = 1;
    BACKEND_BUCKETS = 2;
    BACKEND_SERVICES = 3;
    C2_CPUS = 4;
    COMMITMENTS = 5;
    COMMITTED_C2_CPUS = 6;
    COMMITTED_CPUS = 7;
    COMMITTED_LICENSES = 8;
    COMMITTED_LOCAL_SSD_TOTAL_GB = 9;
    COMMITTED_N2D_CPUS = 10;
    COMMITTED_N2_CPUS = 11;
    COMMITTED_NVIDIA_K80_GPUS = 12;
    COMMITTED_NVIDIA_P100_GPUS = 13;
    COMMITTED_NVIDIA_P4_GPUS = 14;
    COMMITTED_NVIDIA_T4_GPUS = 15;
    COMMITTED_NVIDIA_V100_GPUS = 16;
    CPUS = 17;
    CPUS_ALL_REGIONS = 18;
    DISKS_TOTAL_GB = 19;
    EXTERNAL_VPN_GATEWAYS = 20;
    FIREWALLS = 21;
    FORWARDING_RULES = 22;
    GLOBAL_INTERNAL_ADDRESSES = 23;
    GPUS_ALL_REGIONS = 24;
    HEALTH_CHECKS = 25;
    IMAGES = 26;
    INSTANCES = 27;
    INSTANCE_GROUPS = 28;
    INSTANCE_GROUP_MANAGERS = 29;
    INSTANCE_TEMPLATES = 30;
    INTERCONNECTS = 31;
    INTERCONNECT_ATTACHMENTS_PER_REGION = 32;
    INTERCONNECT_ATTACHMENTS_TOTAL_MBPS = 33;
    INTERCONNECT_TOTAL_GBPS = 34;
    INTERNAL_ADDRESSES = 35;
    IN_USE_ADDRESSES = 36;
    IN_USE_BACKUP_SCHEDULES = 37;
    IN_USE_SNAPSHOT_SCHEDULES = 38;
    LOCAL_SSD_TOTAL_GB = 39;
    MACHINE_IMAGES = 40;
    N2D_CPUS = 41;
    N2_CPUS = 42;
    NETWORKS = 43;
    NETWORK_ENDPOINT_GROUPS = 44;
    NODE_GROUPS = 45;
    NODE_TEMPLATES = 46;
    NVIDIA_K80_GPUS = 47;
    NVIDIA_P100_GPUS = 48;
    NVIDIA_P100_VWS_GPUS = 49;
    NVIDIA_P4_GPUS = 50;
    NVIDIA_P4_VWS_GPUS = 51;
    NVIDIA_T4_GPUS = 52;
    NVIDIA_T4_VWS_GPUS = 53;
    NVIDIA_V100_GPUS = 54;
    PACKET_MIRRORINGS = 55;
    PREEMPTIBLE_CPUS = 56;
    PREEMPTIBLE_LOCAL_SSD_GB = 57;
    PREEMPTIBLE_NVIDIA_K80_GPUS = 58;
    PREEMPTIBLE_NVIDIA_P100_GPUS = 59;
    PREEMPTIBLE_NVIDIA_P100_VWS_GPUS = 60;
    PREEMPTIBLE_NVIDIA_P4_GPUS = 61;
    PREEMPTIBLE_NVIDIA_P4_VWS_GPUS = 62;
    PREEMPTIBLE_NVIDIA_T4_GPUS = 63;
    PREEMPTIBLE_NVIDIA_T4_VWS_GPUS = 64;
    PREEMPTIBLE_NVIDIA_V100_GPUS = 65;
    REGIONAL_AUTOSCALERS = 66;
    REGIONAL_INSTANCE_GROUP_MANAGERS = 67;
    RESERVATIONS = 68;
    RESOURCE_POLICIES = 69;
    ROUTERS = 70;
    ROUTES = 71;
    SECURITY_POLICIES = 72;
    SECURITY_POLICY_CEVAL_RULES = 73;
    SECURITY_POLICY_RULES = 74;
    SNAPSHOTS = 75;
    SSD_TOTAL_GB = 76;
    SSL_CERTIFICATES = 77;
    STATIC_ADDRESSES = 78;
    SUBNETWORKS = 79;
    TARGET_HTTPS_PROXIES = 80;
    TARGET_HTTP_PROXIES = 81;
    TARGET_INSTANCES = 82;
    TARGET_POOLS = 83;
    TARGET_SSL_PROXIES = 84;
    TARGET_TCP_PROXIES = 85;
    TARGET_VPN_GATEWAYS = 86;
    URL_MAPS = 87;
    VPN_GATEWAYS = 88;
    VPN_TUNNELS = 89;
  }

  double limit = 1;
  Metric metric = 2;
  string owner = 3;
  double usage = 4;
}

message UsageExportLocation {
  string bucket_name = 1;
  string report_name_prefix = 2;
}

message Project {
  enum DefaultNetworkTier {
    PREMIUM = 0;
    STANDARD = 1;
  }

  enum XpnProjectStatus {
    HOST = 0;
    UNSPECIFIED_XPN_PROJECT_STATUS = 1;
  }

  Metadata common_instance_metadata = 1;
  string creation_timestamp = 2;
  DefaultNetworkTier default_network_tier = 3;
  string default_service_account = 4;
  string description = 5;
  repeated string enabled_features = 6;
  string id = 7;
  string kind = 8;
  string name = 9;
  repeated Quota quotas = 10;
  string self_link = 11;
  UsageExportLocation usage_export_location = 12;
  XpnProjectStatus xpn_project_status = 13;
}

message InstancesRemoveResourcePoliciesRequest {
  repeated string resource_policies = 1;
}

message HttpRouteRule {
  string description = 1;
  HttpHeaderAction header_action = 2;
  repeated HttpRouteRuleMatch match_rules = 3;
  int32 priority = 4;
  HttpRouteAction route_action = 5;
  string service = 6;
  HttpRedirectAction url_redirect = 7;
}

message PacketMirroringNetworkInfo {
  string canonical_url = 1;
  string url = 2;
}

message MetadataFilterLabelMatch {
  string name = 1;
  string value = 2;
}

message GlobalNetworkEndpointGroupsAttachEndpointsRequest {
  repeated NetworkEndpoint network_endpoints = 1;
}

message Items {
  string key = 1;
  string value = 2;
}

message NetworkEndpointGroup {
  enum NetworkEndpointType {
    GCE_VM_IP_PORT = 0;
    INTERNET_FQDN_PORT = 1;
    INTERNET_IP_PORT = 2;
  }

  string creation_timestamp = 1;
  int32 default_port = 2;
  string description = 3;
  string id = 4;
  string kind = 5;
  string name = 6;
  string network = 7;
  NetworkEndpointType network_endpoint_type = 8;
  string self_link = 9;
  int32 size = 10;
  string subnetwork = 11;
  string zone = 12;
}

message ConnectionDraining {
  int32 draining_timeout_sec = 1;
}

message ConsistentHashLoadBalancerSettings {
  ConsistentHashLoadBalancerSettingsHttpCookie http_cookie = 1;
  string http_header_name = 2;
  string minimum_ring_size = 3;
}

message OutlierDetection {
  Duration base_ejection_time = 1;
  int32 consecutive_errors = 2;
  int32 consecutive_gateway_failure = 3;
  int32 enforcing_consecutive_errors = 4;
  int32 enforcing_consecutive_gateway_failure = 5;
  int32 enforcing_success_rate = 6;
  Duration interval = 7;
  int32 max_ejection_percent = 8;
  int32 success_rate_minimum_hosts = 9;
  int32 success_rate_request_volume = 10;
  int32 success_rate_stdev_factor = 11;
}

message BackendService {
  enum LoadBalancingScheme {
    EXTERNAL = 0;
    INTERNAL = 1;
    INTERNAL_MANAGED = 2;
    INTERNAL_SELF_MANAGED = 3;
    INVALID_LOAD_BALANCING_SCHEME = 4;
  }

  enum LocalityLbPolicy {
    INVALID_LB_POLICY = 0;
    LEAST_REQUEST = 1;
    MAGLEV = 2;
    ORIGINAL_DESTINATION = 3;
    RANDOM = 4;
    RING_HASH = 5;
    ROUND_ROBIN = 6;
  }

  enum Protocol {
    HTTP = 0;
    HTTP2 = 1;
    HTTPS = 2;
    SSL = 3;
    TCP = 4;
    UDP = 5;
  }

  enum SessionAffinity {
    CLIENT_IP = 0;
    CLIENT_IP_PORT_PROTO = 1;
    CLIENT_IP_PROTO = 2;
    GENERATED_COOKIE = 3;
    HEADER_FIELD = 4;
    HTTP_COOKIE = 5;
    NONE = 6;
  }

  int32 affinity_cookie_ttl_sec = 1;
  repeated Backend backends = 2;
  BackendServiceCdnPolicy cdn_policy = 3;
  CircuitBreakers circuit_breakers = 4;
  ConnectionDraining connection_draining = 5;
  ConsistentHashLoadBalancerSettings consistent_hash = 6;
  string creation_timestamp = 7;
  repeated string custom_request_headers = 8;
  string description = 9;
  bool enable_c_d_n = 10;
  BackendServiceFailoverPolicy failover_policy = 11;
  string fingerprint = 12;
  repeated string health_checks = 13;
  BackendServiceIAP iap = 14;
  string id = 15;
  string kind = 16;
  LoadBalancingScheme load_balancing_scheme = 17;
  LocalityLbPolicy locality_lb_policy = 18;
  BackendServiceLogConfig log_config = 19;
  string name = 20;
  string network = 21;
  OutlierDetection outlier_detection = 22;
  int32 port = 23;
  string port_name = 24;
  Protocol protocol = 25;
  string region = 26;
  string security_policy = 27;
  string self_link = 28;
  SessionAffinity session_affinity = 29;
  int32 timeout_sec = 30;
}

message InstanceGroupsListInstances {
  string id = 1;
  repeated InstanceWithNamedPorts items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message NodeGroupNode {
  enum Status {
    CREATING = 0;
    DELETING = 1;
    INVALID = 2;
    READY = 3;
    REPAIRING = 4;
  }

  repeated string instances = 1;
  string name = 2;
  string node_type = 3;
  ServerBinding server_binding = 4;
  string server_id = 5;
  Status status = 6;
}

message ResourcePolicyHourlyCycle {
  string duration = 1;
  int32 hours_in_cycle = 2;
  string start_time = 3;
}

message TargetPoolsRemoveHealthCheckRequest {
  repeated HealthCheckReference health_checks = 1;
}

message BackendBucketCdnPolicy {
  string signed_url_cache_max_age_sec = 1;
  repeated string signed_url_key_names = 2;
}

message NodeGroupsDeleteNodesRequest {
  repeated string nodes = 1;
}

message AcceleratorType {
  string creation_timestamp = 1;
  DeprecationStatus deprecated = 2;
  string description = 3;
  string id = 4;
  string kind = 5;
  int32 maximum_cards_per_instance = 6;
  string name = 7;
  string self_link = 8;
  string zone = 9;
}

message TargetPoolsAddInstanceRequest {
  repeated InstanceReference instances = 1;
}

message VpnTunnelList {
  string id = 1;
  repeated VpnTunnel items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message TargetSslProxy {
  enum ProxyHeader {
    NONE = 0;
    PROXY_V1 = 1;
  }

  string creation_timestamp = 1;
  string description = 2;
  string id = 3;
  string kind = 4;
  string name = 5;
  ProxyHeader proxy_header = 6;
  string self_link = 7;
  string service = 8;
  repeated string ssl_certificates = 9;
  string ssl_policy = 10;
}

message TargetSslProxyList {
  string id = 1;
  repeated TargetSslProxy items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message ScratchDisks {
  int32 disk_gb = 1;
}

message BackendServicesScopedList {
  repeated BackendService backend_services = 1;
  Warning warning = 2;
}

message BackendServiceAggregatedList {
  string id = 1;
  map<string, BackendServicesScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message InterconnectDiagnosticsARPEntry {
  string ip_address = 1;
  string mac_address = 2;
}

message ZoneSetPolicyRequest {
  repeated Binding bindings = 1;
  string etag = 2;
  Policy policy = 3;
}

message Warnings {
  enum Code {
    CLEANUP_FAILED = 0;
    DEPRECATED_RESOURCE_USED = 1;
    DEPRECATED_TYPE_USED = 2;
    DISK_SIZE_LARGER_THAN_IMAGE_SIZE = 3;
    EXPERIMENTAL_TYPE_USED = 4;
    EXTERNAL_API_WARNING = 5;
    FIELD_VALUE_OVERRIDEN = 6;
    INJECTED_KERNELS_DEPRECATED = 7;
    MISSING_TYPE_DEPENDENCY = 8;
    NEXT_HOP_ADDRESS_NOT_ASSIGNED = 9;
    NEXT_HOP_CANNOT_IP_FORWARD = 10;
    NEXT_HOP_INSTANCE_NOT_FOUND = 11;
    NEXT_HOP_INSTANCE_NOT_ON_NETWORK = 12;
    NEXT_HOP_NOT_RUNNING = 13;
    NOT_CRITICAL_ERROR = 14;
    NO_RESULTS_ON_PAGE = 15;
    REQUIRED_TOS_AGREEMENT = 16;
    RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING = 17;
    RESOURCE_NOT_DELETED = 18;
    SCHEMA_VALIDATION_IGNORED = 19;
    SINGLE_INSTANCE_PROPERTY_TEMPLATE = 20;
    UNDECLARED_PROPERTIES = 21;
    UNREACHABLE = 22;
  }

  Code code = 1;
  repeated Data data = 2;
  string message = 3;
}

message GuestAttributes {
  string kind = 1;
  string query_path = 2;
  GuestAttributesValue query_value = 3;
  string self_link = 4;
  string variable_key = 5;
  string variable_value = 6;
}

message ManagedInstanceLastAttempt {
  Errors errors = 1;
}

message ManagedInstanceVersion {
  string instance_template = 1;
  string name = 2;
}

message ManagedInstance {
  enum CurrentAction {
    ABANDONING = 0;
    CREATING = 1;
    CREATING_WITHOUT_RETRIES = 2;
    DELETING = 3;
    NONE = 4;
    RECREATING = 5;
    REFRESHING = 6;
    RESTARTING = 7;
    VERIFYING = 8;
  }

  enum InstanceStatus {
    DEPROVISIONING = 0;
    PROVISIONING = 1;
    REPAIRING = 2;
    RUNNING = 3;
    STAGING = 4;
    STOPPED = 5;
    STOPPING = 6;
    SUSPENDED = 7;
    SUSPENDING = 8;
    TERMINATED = 9;
  }

  CurrentAction current_action = 1;
  string id = 2;
  string instance = 3;
  repeated ManagedInstanceInstanceHealth instance_health = 4;
  InstanceStatus instance_status = 5;
  ManagedInstanceLastAttempt last_attempt = 6;
  ManagedInstanceVersion version = 7;
}

message AcceleratorTypeList {
  string id = 1;
  repeated AcceleratorType items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message OperationsScopedList {
  repeated Operation operations = 1;
  Warning warning = 2;
}

message OperationAggregatedList {
  string id = 1;
  map<string, OperationsScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message Firewall {
  enum Direction {
    EGRESS = 0;
    INGRESS = 1;
  }

  repeated Allowed allowed = 1;
  string creation_timestamp = 2;
  repeated Denied denied = 3;
  string description = 4;
  repeated string destination_ranges = 5;
  Direction direction = 6;
  bool disabled = 7;
  string id = 8;
  string kind = 9;
  FirewallLogConfig log_config = 10;
  string name = 11;
  string network = 12;
  int32 priority = 13;
  string self_link = 14;
  repeated string source_ranges = 15;
  repeated string source_service_accounts = 16;
  repeated string source_tags = 17;
  repeated string target_service_accounts = 18;
  repeated string target_tags = 19;
}

message FirewallList {
  string id = 1;
  repeated Firewall items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message RoutersPreviewResponse {
  Router resource = 1;
}

message RegionUrlMapsValidateRequest {
  UrlMap resource = 1;
}

message Interconnect {
  enum InterconnectType {
    DEDICATED = 0;
    IT_PRIVATE = 1;
    PARTNER = 2;
  }

  enum LinkType {
    LINK_TYPE_ETHERNET_100G_LR = 0;
    LINK_TYPE_ETHERNET_10G_LR = 1;
  }

  enum OperationalStatus {
    OS_ACTIVE = 0;
    OS_UNPROVISIONED = 1;
  }

  enum State {
    ACTIVE = 0;
    UNPROVISIONED = 1;
  }

  bool admin_enabled = 1;
  repeated InterconnectCircuitInfo circuit_infos = 2;
  string creation_timestamp = 3;
  string customer_name = 4;
  string description = 5;
  repeated InterconnectOutageNotification expected_outages = 6;
  string google_ip_address = 7;
  string google_reference_id = 8;
  string id = 9;
  repeated string interconnect_attachments = 10;
  InterconnectType interconnect_type = 11;
  string kind = 12;
  LinkType link_type = 13;
  string location = 14;
  string name = 15;
  string noc_contact_email = 16;
  OperationalStatus operational_status = 17;
  string peer_ip_address = 18;
  int32 provisioned_link_count = 19;
  int32 requested_link_count = 20;
  string self_link = 21;
  State state = 22;
}

message InterconnectList {
  string id = 1;
  repeated Interconnect items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message RouterAggregatedList {
  string id = 1;
  map<string, RoutersScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message TargetHttpsProxiesSetSslCertificatesRequest {
  repeated string ssl_certificates = 1;
}

message LogConfigDataAccessOptions {
  enum LogMode {
    LOG_FAIL_CLOSED = 0;
    LOG_MODE_UNSPECIFIED = 1;
  }

  LogMode log_mode = 1;
}

message PacketMirroring {
  enum Enable {
    FALSE = 0;
    TRUE = 1;
  }

  PacketMirroringForwardingRuleInfo collector_ilb = 1;
  string creation_timestamp = 2;
  string description = 3;
  Enable enable = 4;
  PacketMirroringFilter filter = 5;
  string id = 6;
  string kind = 7;
  PacketMirroringMirroredResourceInfo mirrored_resources = 8;
  string name = 9;
  PacketMirroringNetworkInfo network = 10;
  uint32 priority = 11;
  string region = 12;
  string self_link = 13;
}

message LogConfigCloudAuditOptions {
  enum LogName {
    ADMIN_ACTIVITY = 0;
    DATA_ACCESS = 1;
    UNSPECIFIED_LOG_NAME = 2;
  }

  AuthorizationLoggingOptions authorization_logging_options = 1;
  LogName log_name = 2;
}

message TargetPoolsRemoveInstanceRequest {
  repeated InstanceReference instances = 1;
}

message UrlMapsValidateRequest {
  UrlMap resource = 1;
}

message GlobalSetLabelsRequest {
  string label_fingerprint = 1;
  map<string, string> labels = 2;
}

message RouterStatusResponse {
  string kind = 1;
  RouterStatus result = 2;
}

message InterconnectAttachment {
  enum Bandwidth {
    BPS_100M = 0;
    BPS_10G = 1;
    BPS_1G = 2;
    BPS_200M = 3;
    BPS_20G = 4;
    BPS_2G = 5;
    BPS_300M = 6;
    BPS_400M = 7;
    BPS_500M = 8;
    BPS_50G = 9;
    BPS_50M = 10;
    BPS_5G = 11;
  }

  enum EdgeAvailabilityDomain {
    AVAILABILITY_DOMAIN_1 = 0;
    AVAILABILITY_DOMAIN_2 = 1;
    AVAILABILITY_DOMAIN_ANY = 2;
  }

  enum OperationalStatus {
    OS_ACTIVE = 0;
    OS_UNPROVISIONED = 1;
  }

  enum State {
    ACTIVE = 0;
    DEFUNCT = 1;
    PARTNER_REQUEST_RECEIVED = 2;
    PENDING_CUSTOMER = 3;
    PENDING_PARTNER = 4;
    STATE_UNSPECIFIED = 5;
    UNPROVISIONED = 6;
  }

  enum Type {
    DEDICATED = 0;
    PARTNER = 1;
    PARTNER_PROVIDER = 2;
  }

  bool admin_enabled = 1;
  Bandwidth bandwidth = 2;
  repeated string candidate_subnets = 3;
  string cloud_router_ip_address = 4;
  string creation_timestamp = 5;
  string customer_router_ip_address = 6;
  string description = 7;
  EdgeAvailabilityDomain edge_availability_domain = 8;
  string google_reference_id = 9;
  string id = 10;
  string interconnect = 11;
  string kind = 12;
  string name = 13;
  OperationalStatus operational_status = 14;
  string pairing_key = 15;
  string partner_asn = 16;
  InterconnectAttachmentPartnerMetadata partner_metadata = 17;
  InterconnectAttachmentPrivateInfo private_interconnect_info = 18;
  string region = 19;
  string router = 20;
  string self_link = 21;
  State state = 22;
  Type type = 23;
  int32 vlan_tag8021q = 24;
}

message AutoscalerList {
  string id = 1;
  repeated Autoscaler items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message ResourcePolicyDailyCycle {
  int32 days_in_cycle = 1;
  string duration = 2;
  string start_time = 3;
}

message SubnetworkAggregatedList {
  string id = 1;
  map<string, SubnetworksScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message InstanceGroupsListInstancesRequest {
  enum InstanceState {
    ALL = 0;
    RUNNING = 1;
  }

  InstanceState instance_state = 1;
}

message LogConfigCounterOptionsCustomField {
  string name = 1;
  string value = 2;
}

message LogConfigCounterOptions {
  repeated LogConfigCounterOptionsCustomField custom_fields = 1;
  string field = 2;
  string metric = 3;
}

message ProjectsDisableXpnResourceRequest {
  XpnResourceId xpn_resource = 1;
}

message ReservationAggregatedList {
  string id = 1;
  map<string, ReservationsScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message DiskAggregatedList {
  string id = 1;
  map<string, DisksScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message InstanceGroupManagersCreateInstancesRequest {
  repeated PerInstanceConfig instances = 1;
}

message NetworksUpdatePeeringRequest {
  NetworkPeering network_peering = 1;
}

message PacketMirroringList {
  string id = 1;
  repeated PacketMirroring items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message XpnHostList {
  string id = 1;
  repeated Project items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message SubnetworkList {
  string id = 1;
  repeated Subnetwork items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message UsableSubnetworkSecondaryRange {
  string ip_cidr_range = 1;
  string range_name = 2;
}

message VpnGatewayStatusTunnel {
  uint32 local_gateway_interface = 1;
  uint32 peer_gateway_interface = 2;
  string tunnel_url = 3;
}

message AutoscalerAggregatedList {
  string id = 1;
  map<string, AutoscalersScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message RegionInstanceGroupManagersListInstancesResponse {
  repeated ManagedInstance managed_instances = 1;
}

message ProjectsGetXpnResources {
  string kind = 1;
  string next_page_token = 2;
  repeated XpnResourceId resources = 3;
}

message SnapshotList {
  string id = 1;
  repeated Snapshot items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message RegionInstanceGroupsListInstancesRequest {
  enum InstanceState {
    ALL = 0;
    RUNNING = 1;
  }

  InstanceState instance_state = 1;
  string port_name = 2;
}

message TargetHttpProxyAggregatedList {
  string id = 1;
  map<string, TargetHttpProxiesScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
}

message AttachedDiskInitializeParams {
  enum OnUpdateAction {
    RECREATE_DISK = 0;
    RECREATE_DISK_IF_SOURCE_CHANGED = 1;
    USE_EXISTING_DISK = 2;
  }

  string description = 1;
  string disk_name = 2;
  string disk_size_gb = 3;
  string disk_type = 4;
  map<string, string> labels = 5;
  OnUpdateAction on_update_action = 6;
  repeated string resource_policies = 7;
  string source_image = 8;
  CustomerEncryptionKey source_image_encryption_key = 9;
  string source_snapshot = 10;
  CustomerEncryptionKey source_snapshot_encryption_key = 11;
}

message TargetHttpProxyList {
  string id = 1;
  repeated TargetHttpProxy items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message AutoscalerStatusDetails {
  enum Type {
    ALL_INSTANCES_UNHEALTHY = 0;
    BACKEND_SERVICE_DOES_NOT_EXIST = 1;
    CAPPED_AT_MAX_NUM_REPLICAS = 2;
    CUSTOM_METRIC_DATA_POINTS_TOO_SPARSE = 3;
    CUSTOM_METRIC_INVALID = 4;
    MIN_EQUALS_MAX = 5;
    MISSING_CUSTOM_METRIC_DATA_POINTS = 6;
    MISSING_LOAD_BALANCING_DATA_POINTS = 7;
    MODE_OFF = 8;
    MODE_ONLY_UP = 9;
    MORE_THAN_ONE_BACKEND_SERVICE = 10;
    NOT_ENOUGH_QUOTA_AVAILABLE = 11;
    REGION_RESOURCE_STOCKOUT = 12;
    SCALING_TARGET_DOES_NOT_EXIST = 13;
    UNKNOWN = 14;
    UNSUPPORTED_MAX_RATE_LOAD_BALANCING_CONFIGURATION = 15;
    ZONE_RESOURCE_STOCKOUT = 16;
  }

  string message = 1;
  Type type = 2;
}

message InstanceGroupManagerStatusVersionTarget {
  bool is_reached = 1;
}

message NodeGroupsListNodes {
  string id = 1;
  repeated NodeGroupNode items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message ForwardingRuleReference {
  string forwarding_rule = 1;
}

message HealthStatusForNetworkEndpoint {
  enum HealthState {
    DRAINING = 0;
    HEALTHY = 1;
    UNHEALTHY = 2;
    UNKNOWN = 3;
  }

  BackendServiceReference backend_service = 1;
  ForwardingRuleReference forwarding_rule = 2;
  HealthCheckReference health_check = 3;
  HealthState health_state = 4;
}

message TargetTcpProxiesSetBackendServiceRequest {
  string service = 1;
}

message NetworkEndpointGroupList {
  string id = 1;
  repeated NetworkEndpointGroup items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message TargetInstanceList {
  string id = 1;
  repeated TargetInstance items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message InstanceGroupManagerList {
  string id = 1;
  repeated InstanceGroupManager items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message RouteList {
  string id = 1;
  repeated Route items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message ReservationsResizeRequest {
  string specific_sku_count = 1;
}

message InstanceGroupList {
  string id = 1;
  repeated InstanceGroup items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message InstancesSetMachineTypeRequest {
  string machine_type = 1;
}

message VpnTunnelsScopedList {
  repeated VpnTunnel vpn_tunnels = 1;
  Warning warning = 2;
}

message VpnTunnelAggregatedList {
  string id = 1;
  map<string, VpnTunnelsScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message ResourcePolicyWeeklyCycle {
  repeated ResourcePolicyWeeklyCycleDayOfWeek day_of_weeks = 1;
}

message RegionInstanceGroupManagersAbandonInstancesRequest {
  repeated string instances = 1;
}

message RegionAutoscalerList {
  string id = 1;
  repeated Autoscaler items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message TargetReference {
  string target = 1;
}

message InterconnectAttachmentList {
  string id = 1;
  repeated InterconnectAttachment items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message VmEndpointNatMappingsList {
  string id = 1;
  string kind = 2;
  string next_page_token = 3;
  repeated VmEndpointNatMappings result = 4;
  string self_link = 5;
  Warning warning = 6;
}

message RegionInstanceGroupsSetNamedPortsRequest {
  string fingerprint = 1;
  repeated NamedPort named_ports = 2;
}

message LogConfig {
  LogConfigCloudAuditOptions cloud_audit = 1;
  LogConfigCounterOptions counter = 2;
  LogConfigDataAccessOptions data_access = 3;
}

message Rule {
  enum Action {
    ALLOW = 0;
    ALLOW_WITH_LOG = 1;
    DENY = 2;
    DENY_WITH_LOG = 3;
    LOG = 4;
    NO_ACTION = 5;
  }

  Action action = 1;
  repeated Condition conditions = 2;
  string description = 3;
  repeated string ins = 4;
  repeated LogConfig log_configs = 5;
  repeated string not_ins = 6;
  repeated string permissions = 7;
}

message InstanceList {
  string id = 1;
  repeated Instance items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message CacheInvalidationRule {
  string host = 1;
  string path = 2;
}

message RegionInstanceGroupList {
  string id = 1;
  repeated InstanceGroup items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message ShieldedInstanceIdentity {
  ShieldedInstanceIdentityEntry encryption_key = 1;
  string kind = 2;
  ShieldedInstanceIdentityEntry signing_key = 3;
}

message Errors {
  string code = 1;
  string location = 2;
  string message = 3;
}

message HttpsHealthCheckList {
  string id = 1;
  repeated HttpsHealthCheck items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message BackendServiceList {
  string id = 1;
  repeated BackendService items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message Reference {
  string kind = 1;
  string reference_type = 2;
  string referrer = 3;
  string target = 4;
}

message Allowed {
  string i_p_protocol = 1;
  repeated string ports = 2;
}

message Denied {
  string i_p_protocol = 1;
  repeated string ports = 2;
}

message ImageList {
  string id = 1;
  repeated Image items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message ForwardingRuleList {
  string id = 1;
  repeated ForwardingRule items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message SslCertificateAggregatedList {
  string id = 1;
  map<string, SslCertificatesScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message DiskList {
  string id = 1;
  repeated Disk items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message ProjectsSetDefaultNetworkTierRequest {
  enum NetworkTier {
    PREMIUM = 0;
    STANDARD = 1;
  }

  NetworkTier network_tier = 1;
}

message InterconnectDiagnosticsLinkStatus {
  repeated InterconnectDiagnosticsARPEntry arp_caches = 1;
  string circuit_id = 2;
  string google_demarc = 3;
  InterconnectDiagnosticsLinkLACPStatus lacp_status = 4;
  InterconnectDiagnosticsLinkOpticalPower receiving_optical_power = 5;
  InterconnectDiagnosticsLinkOpticalPower transmitting_optical_power = 6;
}

message ExternalVpnGatewayList {
  string etag = 1;
  string id = 2;
  repeated ExternalVpnGateway items = 3;
  string kind = 4;
  string next_page_token = 5;
  string self_link = 6;
  Warning warning = 7;
}

message NodeTemplateAggregatedList {
  string id = 1;
  map<string, NodeTemplatesScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message Operation {
  enum Status {
    DONE = 0;
    PENDING = 1;
    RUNNING = 2;
  }

  string client_operation_id = 1;
  string creation_timestamp = 2;
  string description = 3;
  string end_time = 4;
  Error error = 5;
  string http_error_message = 6;
  int32 http_error_status_code = 7;
  string id = 8;
  string insert_time = 9;
  string kind = 10;
  string name = 11;
  string operation_type = 12;
  int32 progress = 13;
  string region = 14;
  string self_link = 15;
  string start_time = 16;
  Status status = 17;
  string status_message = 18;
  string target_id = 19;
  string target_link = 20;
  string user = 21;
  repeated Warnings warnings = 22;
  string zone = 23;
}

message OperationList {
  string id = 1;
  repeated Operation items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message RegionSetLabelsRequest {
  string label_fingerprint = 1;
  map<string, string> labels = 2;
}

message InstanceGroupManagersListManagedInstancesResponse {
  repeated ManagedInstance managed_instances = 1;
}

message AccessConfig {
  enum NetworkTier {
    PREMIUM = 0;
    STANDARD = 1;
  }

  enum Type {
    ONE_TO_ONE_NAT = 0;
  }

  string kind = 1;
  string name = 2;
  string nat_i_p = 3;
  NetworkTier network_tier = 4;
  string public_ptr_domain_name = 5;
  bool set_public_ptr = 6;
  Type type = 7;
}

message DisksResizeRequest {
  string size_gb = 1;
}

message NetworksRemovePeeringRequest {
  string name = 1;
}

message ResourceGroupReference {
  string group = 1;
}

message SerialPortOutput {
  string contents = 1;
  string kind = 2;
  string next = 3;
  string self_link = 4;
  string start = 5;
}

message InstanceListReferrers {
  string id = 1;
  repeated Reference items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message Error {
  repeated Errors errors = 1;
}

message NodeTypeAggregatedList {
  string id = 1;
  map<string, NodeTypesScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message TargetHttpsProxyList {
  string id = 1;
  repeated TargetHttpsProxy items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message AddressList {
  string id = 1;
  repeated Address items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message HealthCheckList {
  string id = 1;
  repeated HealthCheck items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message InstanceMoveRequest {
  string destination_zone = 1;
  string target_instance = 2;
}

message InstanceGroupsSetNamedPortsRequest {
  string fingerprint = 1;
  repeated NamedPort named_ports = 2;
}

message InstanceGroupManagersSetInstanceTemplateRequest {
  string instance_template = 1;
}

message RegionInstanceGroupManagersRecreateRequest {
  repeated string instances = 1;
}

message InstanceGroupsAddInstancesRequest {
  repeated InstanceReference instances = 1;
}

message NodeTemplateList {
  string id = 1;
  repeated NodeTemplate items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message AggregatedListAcceleratorTypesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectAggregatedAcceleratorType"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message AggregatedListAcceleratorTypesResponse {
  AcceleratorTypeAggregatedList accelerator_type_aggregated_list = 1;
}

message GetAcceleratorTypeRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneAcceleratorType"
    }
  ];
}

message GetAcceleratorTypeResponse {
  AcceleratorType accelerator_type = 1;
}

message ListAcceleratorTypesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneAcceleratorType"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListAcceleratorTypesResponse {
  AcceleratorTypeList accelerator_type_list = 1;
}

message AggregatedListAddressesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectAggregatedAddress"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message AggregatedListAddressesResponse {
  AddressAggregatedList address_aggregated_list = 1;
}

message DeleteAddressRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionAddress"
    }
  ];
  string request_id = 2;
}

message DeleteAddressResponse {
  Operation operation = 1;
}

message GetAddressRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionAddress"
    }
  ];
}

message GetAddressResponse {
  Address address = 1;
}

message InsertAddressRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionAddress"
    }
  ];
  string request_id = 2;
  Address address_resource = 3;
}

message InsertAddressResponse {
  Operation operation = 1;
}

message ListAddressesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionAddress"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListAddressesResponse {
  AddressList address_list = 1;
}

message AggregatedListAutoscalersRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectAggregatedAutoscaler"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message AggregatedListAutoscalersResponse {
  AutoscalerAggregatedList autoscaler_aggregated_list = 1;
}

message DeleteAutoscalerRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneAutoscaler"
    }
  ];
  string request_id = 2;
}

message DeleteAutoscalerResponse {
  Operation operation = 1;
}

message GetAutoscalerRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneAutoscaler"
    }
  ];
}

message GetAutoscalerResponse {
  Autoscaler autoscaler = 1;
}

message InsertAutoscalerRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneAutoscaler"
    }
  ];
  string request_id = 2;
  Autoscaler autoscaler_resource = 3;
}

message InsertAutoscalerResponse {
  Operation operation = 1;
}

message ListAutoscalersRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneAutoscaler"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListAutoscalersResponse {
  AutoscalerList autoscaler_list = 1;
}

message PatchAutoscalerRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneAutoscaler"
    }
  ];
  string autoscaler = 2;
  string request_id = 3;
  Autoscaler autoscaler_resource = 4;
}

message PatchAutoscalerResponse {
  Operation operation = 1;
}

message UpdateAutoscalerRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneAutoscaler"
    }
  ];
  string autoscaler = 2;
  string request_id = 3;
  Autoscaler autoscaler_resource = 4;
}

message UpdateAutoscalerResponse {
  Operation operation = 1;
}

message AddSignedUrlKeyBackendBucketRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalBackendBucketAddSignedUrlKey"
    }
  ];
  string request_id = 2;
  SignedUrlKey signed_url_key_resource = 3;
}

message AddSignedUrlKeyBackendBucketResponse {
  Operation operation = 1;
}

message DeleteBackendBucketRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalBackendBucket"
    }
  ];
  string request_id = 2;
}

message DeleteBackendBucketResponse {
  Operation operation = 1;
}

message DeleteSignedUrlKeyBackendBucketRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalBackendBucketDeleteSignedUrlKey"
    }
  ];
  string request_id = 2;
  string key_name = 3;
}

message DeleteSignedUrlKeyBackendBucketResponse {
  Operation operation = 1;
}

message GetBackendBucketRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalBackendBucket"
    }
  ];
}

message GetBackendBucketResponse {
  BackendBucket backend_bucket = 1;
}

message InsertBackendBucketRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalBackendBucket"
    }
  ];
  string request_id = 2;
  BackendBucket backend_bucket_resource = 3;
}

message InsertBackendBucketResponse {
  Operation operation = 1;
}

message ListBackendBucketsRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalBackendBucket"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListBackendBucketsResponse {
  BackendBucketList backend_bucket_list = 1;
}

message PatchBackendBucketRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalBackendBucket"
    }
  ];
  string request_id = 2;
  BackendBucket backend_bucket_resource = 3;
}

message PatchBackendBucketResponse {
  Operation operation = 1;
}

message UpdateBackendBucketRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalBackendBucket"
    }
  ];
  string request_id = 2;
  BackendBucket backend_bucket_resource = 3;
}

message UpdateBackendBucketResponse {
  Operation operation = 1;
}

message AddSignedUrlKeyBackendServiceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalBackendServiceAddSignedUrlKey"
    }
  ];
  string request_id = 2;
  SignedUrlKey signed_url_key_resource = 3;
}

message AddSignedUrlKeyBackendServiceResponse {
  Operation operation = 1;
}

message AggregatedListBackendServicesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectAggregatedBackendService"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message AggregatedListBackendServicesResponse {
  BackendServiceAggregatedList backend_service_aggregated_list = 1;
}

message DeleteBackendServiceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalBackendService"
    }
  ];
  string request_id = 2;
}

message DeleteBackendServiceResponse {
  Operation operation = 1;
}

message DeleteSignedUrlKeyBackendServiceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalBackendServiceDeleteSignedUrlKey"
    }
  ];
  string request_id = 2;
  string key_name = 3;
}

message DeleteSignedUrlKeyBackendServiceResponse {
  Operation operation = 1;
}

message GetBackendServiceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalBackendService"
    }
  ];
}

message GetBackendServiceResponse {
  BackendService backend_service = 1;
}

message GetHealthBackendServiceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalBackendServiceGetHealth"
    }
  ];
  ResourceGroupReference resource_group_reference_resource = 2;
}

message GetHealthBackendServiceResponse {
  BackendServiceGroupHealth backend_service_group_health = 1;
}

message InsertBackendServiceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalBackendService"
    }
  ];
  string request_id = 2;
  BackendService backend_service_resource = 3;
}

message InsertBackendServiceResponse {
  Operation operation = 1;
}

message ListBackendServicesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalBackendService"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListBackendServicesResponse {
  BackendServiceList backend_service_list = 1;
}

message PatchBackendServiceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalBackendService"
    }
  ];
  string request_id = 2;
  BackendService backend_service_resource = 3;
}

message PatchBackendServiceResponse {
  Operation operation = 1;
}

message SetSecurityPolicyBackendServiceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalBackendServiceSetSecurityPolicy"
    }
  ];
  string request_id = 2;
  SecurityPolicyReference security_policy_reference_resource = 3;
}

message SetSecurityPolicyBackendServiceResponse {
  Operation operation = 1;
}

message UpdateBackendServiceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalBackendService"
    }
  ];
  string request_id = 2;
  BackendService backend_service_resource = 3;
}

message UpdateBackendServiceResponse {
  Operation operation = 1;
}

message AggregatedListDiskTypesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectAggregatedDiskType"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message AggregatedListDiskTypesResponse {
  DiskTypeAggregatedList disk_type_aggregated_list = 1;
}

message GetDiskTypeRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneDiskType"
    }
  ];
}

message GetDiskTypeResponse {
  DiskType disk_type = 1;
}

message ListDiskTypesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneDiskType"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListDiskTypesResponse {
  DiskTypeList disk_type_list = 1;
}

message AddResourcePoliciesDiskRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneDiskAddResourcePolicy"
    }
  ];
  string request_id = 2;
  DisksAddResourcePoliciesRequest disks_add_resource_policies_request_resource = 3;
}

message AddResourcePoliciesDiskResponse {
  Operation operation = 1;
}

message AggregatedListDisksRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectAggregatedDisk"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message AggregatedListDisksResponse {
  DiskAggregatedList disk_aggregated_list = 1;
}

message CreateSnapshotDiskRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneDiskCreateSnapshot"
    }
  ];
  string request_id = 2;
  bool guest_flush = 3;
  Snapshot snapshot_resource = 4;
}

message CreateSnapshotDiskResponse {
  Operation operation = 1;
}

message DeleteDiskRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneDisk"
    }
  ];
  string request_id = 2;
}

message DeleteDiskResponse {
  Operation operation = 1;
}

message GetDiskRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneDisk"
    }
  ];
}

message GetDiskResponse {
  Disk disk = 1;
}

message GetIamPolicyDiskRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneDiskResourceGetIamPolicy"
    }
  ];
}

message GetIamPolicyDiskResponse {
  Policy policy = 1;
}

message InsertDiskRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneDisk"
    }
  ];
  string request_id = 2;
  string source_image = 3;
  Disk disk_resource = 4;
}

message InsertDiskResponse {
  Operation operation = 1;
}

message ListDisksRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneDisk"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListDisksResponse {
  DiskList disk_list = 1;
}

message RemoveResourcePoliciesDiskRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneDiskRemoveResourcePolicy"
    }
  ];
  string request_id = 2;
  DisksRemoveResourcePoliciesRequest disks_remove_resource_policies_request_resource = 3;
}

message RemoveResourcePoliciesDiskResponse {
  Operation operation = 1;
}

message ResizeDiskRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneDiskResize"
    }
  ];
  string request_id = 2;
  DisksResizeRequest disks_resize_request_resource = 3;
}

message ResizeDiskResponse {
  Operation operation = 1;
}

message SetIamPolicyDiskRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneDiskResourceSetIamPolicy"
    }
  ];
  ZoneSetPolicyRequest zone_set_policy_request_resource = 2;
}

message SetIamPolicyDiskResponse {
  Policy policy = 1;
}

message SetLabelsDiskRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneDiskResourceSetLabel"
    }
  ];
  string request_id = 2;
  ZoneSetLabelsRequest zone_set_labels_request_resource = 3;
}

message SetLabelsDiskResponse {
  Operation operation = 1;
}

message TestIamPermissionsDiskRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneDiskResourceTestIamPermission"
    }
  ];
  TestPermissionsRequest test_permissions_request_resource = 2;
}

message TestIamPermissionsDiskResponse {
  TestPermissionsResponse test_permissions_response = 1;
}

message DeleteExternalVpnGatewayRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalExternalVpnGateway"
    }
  ];
  string request_id = 2;
}

message DeleteExternalVpnGatewayResponse {
  Operation operation = 1;
}

message GetExternalVpnGatewayRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalExternalVpnGateway"
    }
  ];
}

message GetExternalVpnGatewayResponse {
  ExternalVpnGateway external_vpn_gateway = 1;
}

message InsertExternalVpnGatewayRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalExternalVpnGateway"
    }
  ];
  string request_id = 2;
  ExternalVpnGateway external_vpn_gateway_resource = 3;
}

message InsertExternalVpnGatewayResponse {
  Operation operation = 1;
}

message ListExternalVpnGatewaysRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalExternalVpnGateway"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListExternalVpnGatewaysResponse {
  ExternalVpnGatewayList external_vpn_gateway_list = 1;
}

message SetLabelsExternalVpnGatewayRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalExternalVpnGatewayResourceSetLabel"
    }
  ];
  GlobalSetLabelsRequest global_set_labels_request_resource = 2;
}

message SetLabelsExternalVpnGatewayResponse {
  Operation operation = 1;
}

message TestIamPermissionsExternalVpnGatewayRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalExternalVpnGatewayResourceTestIamPermission"
    }
  ];
  TestPermissionsRequest test_permissions_request_resource = 2;
}

message TestIamPermissionsExternalVpnGatewayResponse {
  TestPermissionsResponse test_permissions_response = 1;
}

message DeleteFirewallRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalFirewall"
    }
  ];
  string request_id = 2;
}

message DeleteFirewallResponse {
  Operation operation = 1;
}

message GetFirewallRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalFirewall"
    }
  ];
}

message GetFirewallResponse {
  Firewall firewall = 1;
}

message InsertFirewallRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalFirewall"
    }
  ];
  string request_id = 2;
  Firewall firewall_resource = 3;
}

message InsertFirewallResponse {
  Operation operation = 1;
}

message ListFirewallsRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalFirewall"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListFirewallsResponse {
  FirewallList firewall_list = 1;
}

message PatchFirewallRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalFirewall"
    }
  ];
  string request_id = 2;
  Firewall firewall_resource = 3;
}

message PatchFirewallResponse {
  Operation operation = 1;
}

message UpdateFirewallRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalFirewall"
    }
  ];
  string request_id = 2;
  Firewall firewall_resource = 3;
}

message UpdateFirewallResponse {
  Operation operation = 1;
}

message AggregatedListForwardingRulesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectAggregatedForwardingRule"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message AggregatedListForwardingRulesResponse {
  ForwardingRuleAggregatedList forwarding_rule_aggregated_list = 1;
}

message DeleteForwardingRuleRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionForwardingRule"
    }
  ];
  string request_id = 2;
}

message DeleteForwardingRuleResponse {
  Operation operation = 1;
}

message GetForwardingRuleRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionForwardingRule"
    }
  ];
}

message GetForwardingRuleResponse {
  ForwardingRule forwarding_rule = 1;
}

message InsertForwardingRuleRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionForwardingRule"
    }
  ];
  string request_id = 2;
  ForwardingRule forwarding_rule_resource = 3;
}

message InsertForwardingRuleResponse {
  Operation operation = 1;
}

message ListForwardingRulesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionForwardingRule"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListForwardingRulesResponse {
  ForwardingRuleList forwarding_rule_list = 1;
}

message PatchForwardingRuleRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionForwardingRule"
    }
  ];
  string request_id = 2;
  ForwardingRule forwarding_rule_resource = 3;
}

message PatchForwardingRuleResponse {
  Operation operation = 1;
}

message SetTargetForwardingRuleRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionForwardingRuleSetTarget"
    }
  ];
  string request_id = 2;
  TargetReference target_reference_resource = 3;
}

message SetTargetForwardingRuleResponse {
  Operation operation = 1;
}

message DeleteGlobalAddressRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalAddress"
    }
  ];
  string request_id = 2;
}

message DeleteGlobalAddressResponse {
  Operation operation = 1;
}

message GetGlobalAddressRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalAddress"
    }
  ];
}

message GetGlobalAddressResponse {
  Address address = 1;
}

message InsertGlobalAddressRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalAddress"
    }
  ];
  string request_id = 2;
  Address address_resource = 3;
}

message InsertGlobalAddressResponse {
  Operation operation = 1;
}

message ListGlobalAddressesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalAddress"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListGlobalAddressesResponse {
  AddressList address_list = 1;
}

message DeleteGlobalForwardingRuleRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalForwardingRule"
    }
  ];
  string request_id = 2;
}

message DeleteGlobalForwardingRuleResponse {
  Operation operation = 1;
}

message GetGlobalForwardingRuleRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalForwardingRule"
    }
  ];
}

message GetGlobalForwardingRuleResponse {
  ForwardingRule forwarding_rule = 1;
}

message InsertGlobalForwardingRuleRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalForwardingRule"
    }
  ];
  string request_id = 2;
  ForwardingRule forwarding_rule_resource = 3;
}

message InsertGlobalForwardingRuleResponse {
  Operation operation = 1;
}

message ListGlobalForwardingRulesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalForwardingRule"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListGlobalForwardingRulesResponse {
  ForwardingRuleList forwarding_rule_list = 1;
}

message PatchGlobalForwardingRuleRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalForwardingRule"
    }
  ];
  string request_id = 2;
  ForwardingRule forwarding_rule_resource = 3;
}

message PatchGlobalForwardingRuleResponse {
  Operation operation = 1;
}

message SetTargetGlobalForwardingRuleRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalForwardingRuleSetTarget"
    }
  ];
  string request_id = 2;
  TargetReference target_reference_resource = 3;
}

message SetTargetGlobalForwardingRuleResponse {
  Operation operation = 1;
}

message AttachNetworkEndpointsGlobalNetworkEndpointGroupRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalNetworkEndpointGroupAttachNetworkEndpoint"
    }
  ];
  string request_id = 2;
  GlobalNetworkEndpointGroupsAttachEndpointsRequest global_network_endpoint_groups_attach_endpoints_request_resource = 3;
}

message AttachNetworkEndpointsGlobalNetworkEndpointGroupResponse {
  Operation operation = 1;
}

message DeleteGlobalNetworkEndpointGroupRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalNetworkEndpointGroup"
    }
  ];
  string request_id = 2;
}

message DeleteGlobalNetworkEndpointGroupResponse {
  Operation operation = 1;
}

message DetachNetworkEndpointsGlobalNetworkEndpointGroupRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalNetworkEndpointGroupDetachNetworkEndpoint"
    }
  ];
  string request_id = 2;
  GlobalNetworkEndpointGroupsDetachEndpointsRequest global_network_endpoint_groups_detach_endpoints_request_resource = 3;
}

message DetachNetworkEndpointsGlobalNetworkEndpointGroupResponse {
  Operation operation = 1;
}

message GetGlobalNetworkEndpointGroupRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalNetworkEndpointGroup"
    }
  ];
}

message GetGlobalNetworkEndpointGroupResponse {
  NetworkEndpointGroup network_endpoint_group = 1;
}

message InsertGlobalNetworkEndpointGroupRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalNetworkEndpointGroup"
    }
  ];
  string request_id = 2;
  NetworkEndpointGroup network_endpoint_group_resource = 3;
}

message InsertGlobalNetworkEndpointGroupResponse {
  Operation operation = 1;
}

message ListGlobalNetworkEndpointGroupsRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalNetworkEndpointGroup"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListGlobalNetworkEndpointGroupsResponse {
  NetworkEndpointGroupList network_endpoint_group_list = 1;
}

message ListNetworkEndpointsGlobalNetworkEndpointGroupsRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalNetworkEndpointGroupListNetworkEndpoint"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListNetworkEndpointsGlobalNetworkEndpointGroupsResponse {
  NetworkEndpointGroupsListNetworkEndpoints network_endpoint_groups_list_network_endpoints = 1;
}

message AggregatedListGlobalOperationsRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectAggregatedOperation"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message AggregatedListGlobalOperationsResponse {
  OperationAggregatedList operation_aggregated_list = 1;
}

message DeleteGlobalOperationRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalOperation"
    }
  ];
}

message DeleteGlobalOperationResponse {
}

message GetGlobalOperationRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalOperation"
    }
  ];
}

message GetGlobalOperationResponse {
  Operation operation = 1;
}

message ListGlobalOperationsRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalOperation"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListGlobalOperationsResponse {
  OperationList operation_list = 1;
}

message WaitGlobalOperationRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalOperationWait"
    }
  ];
}

message WaitGlobalOperationResponse {
  Operation operation = 1;
}

message AggregatedListHealthChecksRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectAggregatedHealthCheck"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message AggregatedListHealthChecksResponse {
  HealthChecksAggregatedList health_checks_aggregated_list = 1;
}

message DeleteHealthCheckRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalHealthCheck"
    }
  ];
  string request_id = 2;
}

message DeleteHealthCheckResponse {
  Operation operation = 1;
}

message GetHealthCheckRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalHealthCheck"
    }
  ];
}

message GetHealthCheckResponse {
  HealthCheck health_check = 1;
}

message InsertHealthCheckRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalHealthCheck"
    }
  ];
  string request_id = 2;
  HealthCheck health_check_resource = 3;
}

message InsertHealthCheckResponse {
  Operation operation = 1;
}

message ListHealthChecksRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalHealthCheck"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListHealthChecksResponse {
  HealthCheckList health_check_list = 1;
}

message PatchHealthCheckRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalHealthCheck"
    }
  ];
  string request_id = 2;
  HealthCheck health_check_resource = 3;
}

message PatchHealthCheckResponse {
  Operation operation = 1;
}

message UpdateHealthCheckRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalHealthCheck"
    }
  ];
  string request_id = 2;
  HealthCheck health_check_resource = 3;
}

message UpdateHealthCheckResponse {
  Operation operation = 1;
}

message DeleteHttpHealthCheckRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalHttpHealthCheck"
    }
  ];
  string request_id = 2;
}

message DeleteHttpHealthCheckResponse {
  Operation operation = 1;
}

message GetHttpHealthCheckRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalHttpHealthCheck"
    }
  ];
}

message GetHttpHealthCheckResponse {
  HttpHealthCheck http_health_check = 1;
}

message InsertHttpHealthCheckRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalHttpHealthCheck"
    }
  ];
  string request_id = 2;
  HttpHealthCheck http_health_check_resource = 3;
}

message InsertHttpHealthCheckResponse {
  Operation operation = 1;
}

message ListHttpHealthChecksRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalHttpHealthCheck"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListHttpHealthChecksResponse {
  HttpHealthCheckList http_health_check_list = 1;
}

message PatchHttpHealthCheckRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalHttpHealthCheck"
    }
  ];
  string request_id = 2;
  HttpHealthCheck http_health_check_resource = 3;
}

message PatchHttpHealthCheckResponse {
  Operation operation = 1;
}

message UpdateHttpHealthCheckRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalHttpHealthCheck"
    }
  ];
  string request_id = 2;
  HttpHealthCheck http_health_check_resource = 3;
}

message UpdateHttpHealthCheckResponse {
  Operation operation = 1;
}

message DeleteHttpsHealthCheckRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalHttpsHealthCheck"
    }
  ];
  string request_id = 2;
}

message DeleteHttpsHealthCheckResponse {
  Operation operation = 1;
}

message GetHttpsHealthCheckRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalHttpsHealthCheck"
    }
  ];
}

message GetHttpsHealthCheckResponse {
  HttpsHealthCheck https_health_check = 1;
}

message InsertHttpsHealthCheckRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalHttpsHealthCheck"
    }
  ];
  string request_id = 2;
  HttpsHealthCheck https_health_check_resource = 3;
}

message InsertHttpsHealthCheckResponse {
  Operation operation = 1;
}

message ListHttpsHealthChecksRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalHttpsHealthCheck"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListHttpsHealthChecksResponse {
  HttpsHealthCheckList https_health_check_list = 1;
}

message PatchHttpsHealthCheckRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalHttpsHealthCheck"
    }
  ];
  string request_id = 2;
  HttpsHealthCheck https_health_check_resource = 3;
}

message PatchHttpsHealthCheckResponse {
  Operation operation = 1;
}

message UpdateHttpsHealthCheckRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalHttpsHealthCheck"
    }
  ];
  string request_id = 2;
  HttpsHealthCheck https_health_check_resource = 3;
}

message UpdateHttpsHealthCheckResponse {
  Operation operation = 1;
}

message DeleteImageRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalImage"
    }
  ];
  string request_id = 2;
}

message DeleteImageResponse {
  Operation operation = 1;
}

message DeprecateImageRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalImageDeprecate"
    }
  ];
  string request_id = 2;
  DeprecationStatus deprecation_status_resource = 3;
}

message DeprecateImageResponse {
  Operation operation = 1;
}

message GetImageRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalImage"
    }
  ];
}

message GetImageResponse {
  Image image = 1;
}

message GetFromFamilyImageRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalImageFamily"
    }
  ];
}

message GetFromFamilyImageResponse {
  Image image = 1;
}

message GetIamPolicyImageRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalImageResourceGetIamPolicy"
    }
  ];
}

message GetIamPolicyImageResponse {
  Policy policy = 1;
}

message InsertImageRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalImage"
    }
  ];
  bool force_create = 2;
  string request_id = 3;
  Image image_resource = 4;
}

message InsertImageResponse {
  Operation operation = 1;
}

message ListImagesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalImage"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListImagesResponse {
  ImageList image_list = 1;
}

message SetIamPolicyImageRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalImageResourceSetIamPolicy"
    }
  ];
  GlobalSetPolicyRequest global_set_policy_request_resource = 2;
}

message SetIamPolicyImageResponse {
  Policy policy = 1;
}

message SetLabelsImageRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalImageResourceSetLabel"
    }
  ];
  GlobalSetLabelsRequest global_set_labels_request_resource = 2;
}

message SetLabelsImageResponse {
  Operation operation = 1;
}

message TestIamPermissionsImageRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalImageResourceTestIamPermission"
    }
  ];
  TestPermissionsRequest test_permissions_request_resource = 2;
}

message TestIamPermissionsImageResponse {
  TestPermissionsResponse test_permissions_response = 1;
}

message AbandonInstancesInstanceGroupManagerRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceGroupManagerAbandonInstance"
    }
  ];
  string request_id = 2;
  InstanceGroupManagersAbandonInstancesRequest instance_group_managers_abandon_instances_request_resource = 3;
}

message AbandonInstancesInstanceGroupManagerResponse {
  Operation operation = 1;
}

message AggregatedListInstanceGroupManagersRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectAggregatedInstanceGroupManager"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message AggregatedListInstanceGroupManagersResponse {
  InstanceGroupManagerAggregatedList instance_group_manager_aggregated_list = 1;
}

message ApplyUpdatesToInstancesInstanceGroupManagerRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceGroupManagerApplyUpdatesToInstance"
    }
  ];
  InstanceGroupManagersApplyUpdatesRequest instance_group_managers_apply_updates_request_resource = 2;
}

message ApplyUpdatesToInstancesInstanceGroupManagerResponse {
  Operation operation = 1;
}

message CreateInstancesInstanceGroupManagerRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceGroupManagerCreateInstance"
    }
  ];
  string request_id = 2;
  InstanceGroupManagersCreateInstancesRequest instance_group_managers_create_instances_request_resource = 3;
}

message CreateInstancesInstanceGroupManagerResponse {
  Operation operation = 1;
}

message DeleteInstanceGroupManagerRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceGroupManager"
    }
  ];
  string request_id = 2;
}

message DeleteInstanceGroupManagerResponse {
  Operation operation = 1;
}

message DeleteInstancesInstanceGroupManagerRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceGroupManagerDeleteInstance"
    }
  ];
  string request_id = 2;
  InstanceGroupManagersDeleteInstancesRequest instance_group_managers_delete_instances_request_resource = 3;
}

message DeleteInstancesInstanceGroupManagerResponse {
  Operation operation = 1;
}

message GetInstanceGroupManagerRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceGroupManager"
    }
  ];
}

message GetInstanceGroupManagerResponse {
  InstanceGroupManager instance_group_manager = 1;
}

message InsertInstanceGroupManagerRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceGroupManager"
    }
  ];
  string request_id = 2;
  InstanceGroupManager instance_group_manager_resource = 3;
}

message InsertInstanceGroupManagerResponse {
  Operation operation = 1;
}

message ListInstanceGroupManagersRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceGroupManager"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListInstanceGroupManagersResponse {
  InstanceGroupManagerList instance_group_manager_list = 1;
}

message ListErrorsInstanceGroupManagersRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceGroupManagerListError"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListErrorsInstanceGroupManagersResponse {
  InstanceGroupManagersListErrorsResponse instance_group_managers_list_errors_response = 1;
}

message ListManagedInstancesInstanceGroupManagersRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceGroupManagerListManagedInstance"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListManagedInstancesInstanceGroupManagersResponse {
  InstanceGroupManagersListManagedInstancesResponse instance_group_managers_list_managed_instances_response = 1;
}

message PatchInstanceGroupManagerRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceGroupManager"
    }
  ];
  string request_id = 2;
  InstanceGroupManager instance_group_manager_resource = 3;
}

message PatchInstanceGroupManagerResponse {
  Operation operation = 1;
}

message RecreateInstancesInstanceGroupManagerRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceGroupManagerRecreateInstance"
    }
  ];
  string request_id = 2;
  InstanceGroupManagersRecreateInstancesRequest instance_group_managers_recreate_instances_request_resource = 3;
}

message RecreateInstancesInstanceGroupManagerResponse {
  Operation operation = 1;
}

message ResizeInstanceGroupManagerRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceGroupManagerResize"
    }
  ];
  int32 size = 2;
  string request_id = 3;
}

message ResizeInstanceGroupManagerResponse {
  Operation operation = 1;
}

message SetInstanceTemplateInstanceGroupManagerRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceGroupManagerSetInstanceTemplate"
    }
  ];
  string request_id = 2;
  InstanceGroupManagersSetInstanceTemplateRequest instance_group_managers_set_instance_template_request_resource = 3;
}

message SetInstanceTemplateInstanceGroupManagerResponse {
  Operation operation = 1;
}

message SetTargetPoolsInstanceGroupManagerRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceGroupManagerSetTargetPool"
    }
  ];
  string request_id = 2;
  InstanceGroupManagersSetTargetPoolsRequest instance_group_managers_set_target_pools_request_resource = 3;
}

message SetTargetPoolsInstanceGroupManagerResponse {
  Operation operation = 1;
}

message AddInstancesInstanceGroupRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceGroupAddInstance"
    }
  ];
  string request_id = 2;
  InstanceGroupsAddInstancesRequest instance_groups_add_instances_request_resource = 3;
}

message AddInstancesInstanceGroupResponse {
  Operation operation = 1;
}

message AggregatedListInstanceGroupsRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectAggregatedInstanceGroup"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message AggregatedListInstanceGroupsResponse {
  InstanceGroupAggregatedList instance_group_aggregated_list = 1;
}

message DeleteInstanceGroupRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceGroup"
    }
  ];
  string request_id = 2;
}

message DeleteInstanceGroupResponse {
  Operation operation = 1;
}

message GetInstanceGroupRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceGroup"
    }
  ];
}

message GetInstanceGroupResponse {
  InstanceGroup instance_group = 1;
}

message InsertInstanceGroupRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceGroup"
    }
  ];
  string request_id = 2;
  InstanceGroup instance_group_resource = 3;
}

message InsertInstanceGroupResponse {
  Operation operation = 1;
}

message ListInstanceGroupsRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceGroup"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListInstanceGroupsResponse {
  InstanceGroupList instance_group_list = 1;
}

message ListInstancesInstanceGroupsRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceGroupListInstance"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
  InstanceGroupsListInstancesRequest instance_groups_list_instances_request_resource = 6;
}

message ListInstancesInstanceGroupsResponse {
  InstanceGroupsListInstances instance_groups_list_instances = 1;
}

message RemoveInstancesInstanceGroupRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceGroupRemoveInstance"
    }
  ];
  string request_id = 2;
  InstanceGroupsRemoveInstancesRequest instance_groups_remove_instances_request_resource = 3;
}

message RemoveInstancesInstanceGroupResponse {
  Operation operation = 1;
}

message SetNamedPortsInstanceGroupRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceGroupSetNamedPort"
    }
  ];
  string request_id = 2;
  InstanceGroupsSetNamedPortsRequest instance_groups_set_named_ports_request_resource = 3;
}

message SetNamedPortsInstanceGroupResponse {
  Operation operation = 1;
}

message DeleteInstanceTemplateRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalInstanceTemplate"
    }
  ];
  string request_id = 2;
}

message DeleteInstanceTemplateResponse {
  Operation operation = 1;
}

message GetInstanceTemplateRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalInstanceTemplate"
    }
  ];
}

message GetInstanceTemplateResponse {
  InstanceTemplate instance_template = 1;
}

message GetIamPolicyInstanceTemplateRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalInstanceTemplateResourceGetIamPolicy"
    }
  ];
}

message GetIamPolicyInstanceTemplateResponse {
  Policy policy = 1;
}

message InsertInstanceTemplateRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalInstanceTemplate"
    }
  ];
  string request_id = 2;
  InstanceTemplate instance_template_resource = 3;
}

message InsertInstanceTemplateResponse {
  Operation operation = 1;
}

message ListInstanceTemplatesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalInstanceTemplate"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListInstanceTemplatesResponse {
  InstanceTemplateList instance_template_list = 1;
}

message SetIamPolicyInstanceTemplateRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalInstanceTemplateResourceSetIamPolicy"
    }
  ];
  GlobalSetPolicyRequest global_set_policy_request_resource = 2;
}

message SetIamPolicyInstanceTemplateResponse {
  Policy policy = 1;
}

message TestIamPermissionsInstanceTemplateRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalInstanceTemplateResourceTestIamPermission"
    }
  ];
  TestPermissionsRequest test_permissions_request_resource = 2;
}

message TestIamPermissionsInstanceTemplateResponse {
  TestPermissionsResponse test_permissions_response = 1;
}

message AddAccessConfigInstanceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceAddAccessConfig"
    }
  ];
  string network_interface = 2;
  string request_id = 3;
  AccessConfig access_config_resource = 4;
}

message AddAccessConfigInstanceResponse {
  Operation operation = 1;
}

message AddResourcePoliciesInstanceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceAddResourcePolicy"
    }
  ];
  string request_id = 2;
  InstancesAddResourcePoliciesRequest instances_add_resource_policies_request_resource = 3;
}

message AddResourcePoliciesInstanceResponse {
  Operation operation = 1;
}

message AggregatedListInstancesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectAggregatedInstance"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message AggregatedListInstancesResponse {
  InstanceAggregatedList instance_aggregated_list = 1;
}

message AttachDiskInstanceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceAttachDisk"
    }
  ];
  string request_id = 2;
  bool force_attach = 3;
  AttachedDisk attached_disk_resource = 4;
}

message AttachDiskInstanceResponse {
  Operation operation = 1;
}

message DeleteInstanceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstance"
    }
  ];
  string request_id = 2;
}

message DeleteInstanceResponse {
  Operation operation = 1;
}

message DeleteAccessConfigInstanceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceDeleteAccessConfig"
    }
  ];
  string network_interface = 2;
  string request_id = 3;
  string access_config = 4;
}

message DeleteAccessConfigInstanceResponse {
  Operation operation = 1;
}

message DetachDiskInstanceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceDetachDisk"
    }
  ];
  string request_id = 2;
  string device_name = 3;
}

message DetachDiskInstanceResponse {
  Operation operation = 1;
}

message GetInstanceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstance"
    }
  ];
}

message GetInstanceResponse {
  Instance instance = 1;
}

message GetGuestAttributesInstanceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceGetGuestAttribute"
    }
  ];
  string query_path = 2;
  string variable_key = 3;
}

message GetGuestAttributesInstanceResponse {
  GuestAttributes guest_attributes = 1;
}

message GetIamPolicyInstanceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceResourceGetIamPolicy"
    }
  ];
}

message GetIamPolicyInstanceResponse {
  Policy policy = 1;
}

message GetSerialPortOutputInstanceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceSerialPort"
    }
  ];
  int32 port = 2;
  string start = 3;
}

message GetSerialPortOutputInstanceResponse {
  SerialPortOutput serial_port_output = 1;
}

message GetShieldedInstanceIdentityInstanceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceGetShieldedInstanceIdentity"
    }
  ];
}

message GetShieldedInstanceIdentityInstanceResponse {
  ShieldedInstanceIdentity shielded_instance_identity = 1;
}

message InsertInstanceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstance"
    }
  ];
  string source_instance_template = 2;
  string request_id = 3;
  Instance instance_resource = 4;
}

message InsertInstanceResponse {
  Operation operation = 1;
}

message ListInstancesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstance"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListInstancesResponse {
  InstanceList instance_list = 1;
}

message ListReferrersInstancesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceReferrer"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListReferrersInstancesResponse {
  InstanceListReferrers instance_list_referrers = 1;
}

message RemoveResourcePoliciesInstanceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceRemoveResourcePolicy"
    }
  ];
  string request_id = 2;
  InstancesRemoveResourcePoliciesRequest instances_remove_resource_policies_request_resource = 3;
}

message RemoveResourcePoliciesInstanceResponse {
  Operation operation = 1;
}

message ResetInstanceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceReset"
    }
  ];
  string request_id = 2;
}

message ResetInstanceResponse {
  Operation operation = 1;
}

message SetDeletionProtectionInstanceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceResourceSetDeletionProtection"
    }
  ];
  string request_id = 2;
  bool deletion_protection = 3;
}

message SetDeletionProtectionInstanceResponse {
  Operation operation = 1;
}

message SetDiskAutoDeleteInstanceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceSetDiskAutoDelete"
    }
  ];
  string request_id = 2;
  bool auto_delete = 3;
  string device_name = 4;
}

message SetDiskAutoDeleteInstanceResponse {
  Operation operation = 1;
}

message SetIamPolicyInstanceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceResourceSetIamPolicy"
    }
  ];
  ZoneSetPolicyRequest zone_set_policy_request_resource = 2;
}

message SetIamPolicyInstanceResponse {
  Policy policy = 1;
}

message SetLabelsInstanceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceSetLabel"
    }
  ];
  string request_id = 2;
  InstancesSetLabelsRequest instances_set_labels_request_resource = 3;
}

message SetLabelsInstanceResponse {
  Operation operation = 1;
}

message SetMachineResourcesInstanceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceSetMachineResource"
    }
  ];
  string request_id = 2;
  InstancesSetMachineResourcesRequest instances_set_machine_resources_request_resource = 3;
}

message SetMachineResourcesInstanceResponse {
  Operation operation = 1;
}

message SetMachineTypeInstanceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceSetMachineType"
    }
  ];
  string request_id = 2;
  InstancesSetMachineTypeRequest instances_set_machine_type_request_resource = 3;
}

message SetMachineTypeInstanceResponse {
  Operation operation = 1;
}

message SetMetadataInstanceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceSetMetadata"
    }
  ];
  string request_id = 2;
  Metadata metadata_resource = 3;
}

message SetMetadataInstanceResponse {
  Operation operation = 1;
}

message SetMinCpuPlatformInstanceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceSetMinCpuPlatform"
    }
  ];
  string request_id = 2;
  InstancesSetMinCpuPlatformRequest instances_set_min_cpu_platform_request_resource = 3;
}

message SetMinCpuPlatformInstanceResponse {
  Operation operation = 1;
}

message SetSchedulingInstanceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceSetScheduling"
    }
  ];
  string request_id = 2;
  Scheduling scheduling_resource = 3;
}

message SetSchedulingInstanceResponse {
  Operation operation = 1;
}

message SetServiceAccountInstanceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceSetServiceAccount"
    }
  ];
  string request_id = 2;
  InstancesSetServiceAccountRequest instances_set_service_account_request_resource = 3;
}

message SetServiceAccountInstanceResponse {
  Operation operation = 1;
}

message SetShieldedInstanceIntegrityPolicyInstanceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceSetShieldedInstanceIntegrityPolicy"
    }
  ];
  string request_id = 2;
  ShieldedInstanceIntegrityPolicy shielded_instance_integrity_policy_resource = 3;
}

message SetShieldedInstanceIntegrityPolicyInstanceResponse {
  Operation operation = 1;
}

message SetTagsInstanceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceSetTag"
    }
  ];
  string request_id = 2;
  Tags tags_resource = 3;
}

message SetTagsInstanceResponse {
  Operation operation = 1;
}

message SimulateMaintenanceEventInstanceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceSimulateMaintenanceEvent"
    }
  ];
}

message SimulateMaintenanceEventInstanceResponse {
  Operation operation = 1;
}

message StartInstanceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceStart"
    }
  ];
  string request_id = 2;
}

message StartInstanceResponse {
  Operation operation = 1;
}

message StartWithEncryptionKeyInstanceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceStartWithEncryptionKey"
    }
  ];
  string request_id = 2;
  InstancesStartWithEncryptionKeyRequest instances_start_with_encryption_key_request_resource = 3;
}

message StartWithEncryptionKeyInstanceResponse {
  Operation operation = 1;
}

message StopInstanceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceStop"
    }
  ];
  string request_id = 2;
}

message StopInstanceResponse {
  Operation operation = 1;
}

message TestIamPermissionsInstanceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceResourceTestIamPermission"
    }
  ];
  TestPermissionsRequest test_permissions_request_resource = 2;
}

message TestIamPermissionsInstanceResponse {
  TestPermissionsResponse test_permissions_response = 1;
}

message UpdateInstanceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstance"
    }
  ];
  string most_disruptive_allowed_action = 2;
  string minimal_action = 3;
  string request_id = 4;
  Instance instance_resource = 5;
}

message UpdateInstanceResponse {
  Operation operation = 1;
}

message UpdateAccessConfigInstanceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceUpdateAccessConfig"
    }
  ];
  string network_interface = 2;
  string request_id = 3;
  AccessConfig access_config_resource = 4;
}

message UpdateAccessConfigInstanceResponse {
  Operation operation = 1;
}

message UpdateDisplayDeviceInstanceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceUpdateDisplayDevice"
    }
  ];
  string request_id = 2;
  DisplayDevice display_device_resource = 3;
}

message UpdateDisplayDeviceInstanceResponse {
  Operation operation = 1;
}

message UpdateNetworkInterfaceInstanceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceUpdateNetworkInterface"
    }
  ];
  string network_interface = 2;
  string request_id = 3;
  NetworkInterface network_interface_resource = 4;
}

message UpdateNetworkInterfaceInstanceResponse {
  Operation operation = 1;
}

message UpdateShieldedInstanceConfigInstanceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneInstanceUpdateShieldedInstanceConfig"
    }
  ];
  string request_id = 2;
  ShieldedInstanceConfig shielded_instance_config_resource = 3;
}

message UpdateShieldedInstanceConfigInstanceResponse {
  Operation operation = 1;
}

message AggregatedListInterconnectAttachmentsRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectAggregatedInterconnectAttachment"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message AggregatedListInterconnectAttachmentsResponse {
  InterconnectAttachmentAggregatedList interconnect_attachment_aggregated_list = 1;
}

message DeleteInterconnectAttachmentRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionInterconnectAttachment"
    }
  ];
  string request_id = 2;
}

message DeleteInterconnectAttachmentResponse {
  Operation operation = 1;
}

message GetInterconnectAttachmentRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionInterconnectAttachment"
    }
  ];
}

message GetInterconnectAttachmentResponse {
  InterconnectAttachment interconnect_attachment = 1;
}

message InsertInterconnectAttachmentRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionInterconnectAttachment"
    }
  ];
  bool validate_only = 2;
  string request_id = 3;
  InterconnectAttachment interconnect_attachment_resource = 4;
}

message InsertInterconnectAttachmentResponse {
  Operation operation = 1;
}

message ListInterconnectAttachmentsRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionInterconnectAttachment"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListInterconnectAttachmentsResponse {
  InterconnectAttachmentList interconnect_attachment_list = 1;
}

message PatchInterconnectAttachmentRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionInterconnectAttachment"
    }
  ];
  string request_id = 2;
  InterconnectAttachment interconnect_attachment_resource = 3;
}

message PatchInterconnectAttachmentResponse {
  Operation operation = 1;
}

message GetInterconnectLocationRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalInterconnectLocation"
    }
  ];
}

message GetInterconnectLocationResponse {
  InterconnectLocation interconnect_location = 1;
}

message ListInterconnectLocationsRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalInterconnectLocation"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListInterconnectLocationsResponse {
  InterconnectLocationList interconnect_location_list = 1;
}

message DeleteInterconnectRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalInterconnect"
    }
  ];
  string request_id = 2;
}

message DeleteInterconnectResponse {
  Operation operation = 1;
}

message GetInterconnectRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalInterconnect"
    }
  ];
}

message GetInterconnectResponse {
  Interconnect interconnect = 1;
}

message GetDiagnosticsInterconnectRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalInterconnectGetDiagnostic"
    }
  ];
}

message GetDiagnosticsInterconnectResponse {
  InterconnectsGetDiagnosticsResponse interconnects_get_diagnostics_response = 1;
}

message InsertInterconnectRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalInterconnect"
    }
  ];
  string request_id = 2;
  Interconnect interconnect_resource = 3;
}

message InsertInterconnectResponse {
  Operation operation = 1;
}

message ListInterconnectsRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalInterconnect"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListInterconnectsResponse {
  InterconnectList interconnect_list = 1;
}

message PatchInterconnectRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalInterconnect"
    }
  ];
  string request_id = 2;
  Interconnect interconnect_resource = 3;
}

message PatchInterconnectResponse {
  Operation operation = 1;
}

message GetLicenseCodeRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalLicenseCode"
    }
  ];
}

message GetLicenseCodeResponse {
  LicenseCode license_code = 1;
}

message TestIamPermissionsLicenseCodeRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalLicenseCodeResourceTestIamPermission"
    }
  ];
  TestPermissionsRequest test_permissions_request_resource = 2;
}

message TestIamPermissionsLicenseCodeResponse {
  TestPermissionsResponse test_permissions_response = 1;
}

message DeleteLicenseRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalLicense"
    }
  ];
  string request_id = 2;
}

message DeleteLicenseResponse {
  Operation operation = 1;
}

message GetLicenseRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalLicense"
    }
  ];
}

message GetLicenseResponse {
  License license = 1;
}

message GetIamPolicyLicenseRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalLicenseResourceGetIamPolicy"
    }
  ];
}

message GetIamPolicyLicenseResponse {
  Policy policy = 1;
}

message InsertLicenseRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalLicense"
    }
  ];
  string request_id = 2;
  License license_resource = 3;
}

message InsertLicenseResponse {
  Operation operation = 1;
}

message ListLicensesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalLicense"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListLicensesResponse {
  LicensesListResponse licenses_list_response = 1;
}

message SetIamPolicyLicenseRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalLicenseResourceSetIamPolicy"
    }
  ];
  GlobalSetPolicyRequest global_set_policy_request_resource = 2;
}

message SetIamPolicyLicenseResponse {
  Policy policy = 1;
}

message TestIamPermissionsLicenseRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalLicenseResourceTestIamPermission"
    }
  ];
  TestPermissionsRequest test_permissions_request_resource = 2;
}

message TestIamPermissionsLicenseResponse {
  TestPermissionsResponse test_permissions_response = 1;
}

message AggregatedListMachineTypesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectAggregatedMachineType"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message AggregatedListMachineTypesResponse {
  MachineTypeAggregatedList machine_type_aggregated_list = 1;
}

message GetMachineTypeRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneMachineType"
    }
  ];
}

message GetMachineTypeResponse {
  MachineType machine_type = 1;
}

message ListMachineTypesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneMachineType"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListMachineTypesResponse {
  MachineTypeList machine_type_list = 1;
}

message AggregatedListNetworkEndpointGroupsRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectAggregatedNetworkEndpointGroup"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message AggregatedListNetworkEndpointGroupsResponse {
  NetworkEndpointGroupAggregatedList network_endpoint_group_aggregated_list = 1;
}

message AttachNetworkEndpointsNetworkEndpointGroupRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneNetworkEndpointGroupAttachNetworkEndpoint"
    }
  ];
  string request_id = 2;
  NetworkEndpointGroupsAttachEndpointsRequest network_endpoint_groups_attach_endpoints_request_resource = 3;
}

message AttachNetworkEndpointsNetworkEndpointGroupResponse {
  Operation operation = 1;
}

message DeleteNetworkEndpointGroupRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneNetworkEndpointGroup"
    }
  ];
  string request_id = 2;
}

message DeleteNetworkEndpointGroupResponse {
  Operation operation = 1;
}

message DetachNetworkEndpointsNetworkEndpointGroupRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneNetworkEndpointGroupDetachNetworkEndpoint"
    }
  ];
  string request_id = 2;
  NetworkEndpointGroupsDetachEndpointsRequest network_endpoint_groups_detach_endpoints_request_resource = 3;
}

message DetachNetworkEndpointsNetworkEndpointGroupResponse {
  Operation operation = 1;
}

message GetNetworkEndpointGroupRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneNetworkEndpointGroup"
    }
  ];
}

message GetNetworkEndpointGroupResponse {
  NetworkEndpointGroup network_endpoint_group = 1;
}

message InsertNetworkEndpointGroupRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneNetworkEndpointGroup"
    }
  ];
  string request_id = 2;
  NetworkEndpointGroup network_endpoint_group_resource = 3;
}

message InsertNetworkEndpointGroupResponse {
  Operation operation = 1;
}

message ListNetworkEndpointGroupsRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneNetworkEndpointGroup"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListNetworkEndpointGroupsResponse {
  NetworkEndpointGroupList network_endpoint_group_list = 1;
}

message ListNetworkEndpointsNetworkEndpointGroupsRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneNetworkEndpointGroupListNetworkEndpoint"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
  NetworkEndpointGroupsListEndpointsRequest network_endpoint_groups_list_endpoints_request_resource = 6;
}

message ListNetworkEndpointsNetworkEndpointGroupsResponse {
  NetworkEndpointGroupsListNetworkEndpoints network_endpoint_groups_list_network_endpoints = 1;
}

message TestIamPermissionsNetworkEndpointGroupRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneNetworkEndpointGroupResourceTestIamPermission"
    }
  ];
  TestPermissionsRequest test_permissions_request_resource = 2;
}

message TestIamPermissionsNetworkEndpointGroupResponse {
  TestPermissionsResponse test_permissions_response = 1;
}

message AddPeeringNetworkRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalNetworkAddPeering"
    }
  ];
  string request_id = 2;
  NetworksAddPeeringRequest networks_add_peering_request_resource = 3;
}

message AddPeeringNetworkResponse {
  Operation operation = 1;
}

message DeleteNetworkRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalNetwork"
    }
  ];
  string request_id = 2;
}

message DeleteNetworkResponse {
  Operation operation = 1;
}

message GetNetworkRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalNetwork"
    }
  ];
}

message GetNetworkResponse {
  Network network = 1;
}

message InsertNetworkRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalNetwork"
    }
  ];
  string request_id = 2;
  Network network_resource = 3;
}

message InsertNetworkResponse {
  Operation operation = 1;
}

message ListNetworksRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalNetwork"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListNetworksResponse {
  NetworkList network_list = 1;
}

message ListPeeringRoutesNetworksRequest {
  enum Direction {
    INCOMING = 0;
    OUTGOING = 1;
  }

  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalNetworkListPeeringRoute"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string peering_name = 5;
  string page_token = 6;
  string region = 7;
  Direction direction = 8;
}

message ListPeeringRoutesNetworksResponse {
  ExchangedPeeringRoutesList exchanged_peering_routes_list = 1;
}

message PatchNetworkRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalNetwork"
    }
  ];
  string request_id = 2;
  Network network_resource = 3;
}

message PatchNetworkResponse {
  Operation operation = 1;
}

message RemovePeeringNetworkRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalNetworkRemovePeering"
    }
  ];
  string request_id = 2;
  NetworksRemovePeeringRequest networks_remove_peering_request_resource = 3;
}

message RemovePeeringNetworkResponse {
  Operation operation = 1;
}

message SwitchToCustomModeNetworkRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalNetworkSwitchToCustomMode"
    }
  ];
  string request_id = 2;
}

message SwitchToCustomModeNetworkResponse {
  Operation operation = 1;
}

message UpdatePeeringNetworkRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalNetworkUpdatePeering"
    }
  ];
  string request_id = 2;
  NetworksUpdatePeeringRequest networks_update_peering_request_resource = 3;
}

message UpdatePeeringNetworkResponse {
  Operation operation = 1;
}

message AddNodesNodeGroupRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneNodeGroupAddNode"
    }
  ];
  string request_id = 2;
  NodeGroupsAddNodesRequest node_groups_add_nodes_request_resource = 3;
}

message AddNodesNodeGroupResponse {
  Operation operation = 1;
}

message AggregatedListNodeGroupsRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectAggregatedNodeGroup"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message AggregatedListNodeGroupsResponse {
  NodeGroupAggregatedList node_group_aggregated_list = 1;
}

message DeleteNodeGroupRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneNodeGroup"
    }
  ];
  string request_id = 2;
}

message DeleteNodeGroupResponse {
  Operation operation = 1;
}

message DeleteNodesNodeGroupRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneNodeGroupDeleteNode"
    }
  ];
  string request_id = 2;
  NodeGroupsDeleteNodesRequest node_groups_delete_nodes_request_resource = 3;
}

message DeleteNodesNodeGroupResponse {
  Operation operation = 1;
}

message GetNodeGroupRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneNodeGroup"
    }
  ];
}

message GetNodeGroupResponse {
  NodeGroup node_group = 1;
}

message GetIamPolicyNodeGroupRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneNodeGroupResourceGetIamPolicy"
    }
  ];
}

message GetIamPolicyNodeGroupResponse {
  Policy policy = 1;
}

message InsertNodeGroupRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneNodeGroup"
    }
  ];
  int32 initial_node_count = 2;
  string request_id = 3;
  NodeGroup node_group_resource = 4;
}

message InsertNodeGroupResponse {
  Operation operation = 1;
}

message ListNodeGroupsRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneNodeGroup"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListNodeGroupsResponse {
  NodeGroupList node_group_list = 1;
}

message ListNodesNodeGroupsRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneNodeGroupListNode"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListNodesNodeGroupsResponse {
  NodeGroupsListNodes node_groups_list_nodes = 1;
}

message PatchNodeGroupRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneNodeGroup"
    }
  ];
  string request_id = 2;
  NodeGroup node_group_resource = 3;
}

message PatchNodeGroupResponse {
  Operation operation = 1;
}

message SetIamPolicyNodeGroupRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneNodeGroupResourceSetIamPolicy"
    }
  ];
  ZoneSetPolicyRequest zone_set_policy_request_resource = 2;
}

message SetIamPolicyNodeGroupResponse {
  Policy policy = 1;
}

message SetNodeTemplateNodeGroupRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneNodeGroupSetNodeTemplate"
    }
  ];
  string request_id = 2;
  NodeGroupsSetNodeTemplateRequest node_groups_set_node_template_request_resource = 3;
}

message SetNodeTemplateNodeGroupResponse {
  Operation operation = 1;
}

message TestIamPermissionsNodeGroupRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneNodeGroupResourceTestIamPermission"
    }
  ];
  TestPermissionsRequest test_permissions_request_resource = 2;
}

message TestIamPermissionsNodeGroupResponse {
  TestPermissionsResponse test_permissions_response = 1;
}

message AggregatedListNodeTemplatesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectAggregatedNodeTemplate"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message AggregatedListNodeTemplatesResponse {
  NodeTemplateAggregatedList node_template_aggregated_list = 1;
}

message DeleteNodeTemplateRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionNodeTemplate"
    }
  ];
  string request_id = 2;
}

message DeleteNodeTemplateResponse {
  Operation operation = 1;
}

message GetNodeTemplateRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionNodeTemplate"
    }
  ];
}

message GetNodeTemplateResponse {
  NodeTemplate node_template = 1;
}

message GetIamPolicyNodeTemplateRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionNodeTemplateResourceGetIamPolicy"
    }
  ];
}

message GetIamPolicyNodeTemplateResponse {
  Policy policy = 1;
}

message InsertNodeTemplateRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionNodeTemplate"
    }
  ];
  string request_id = 2;
  NodeTemplate node_template_resource = 3;
}

message InsertNodeTemplateResponse {
  Operation operation = 1;
}

message ListNodeTemplatesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionNodeTemplate"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListNodeTemplatesResponse {
  NodeTemplateList node_template_list = 1;
}

message SetIamPolicyNodeTemplateRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionNodeTemplateResourceSetIamPolicy"
    }
  ];
  RegionSetPolicyRequest region_set_policy_request_resource = 2;
}

message SetIamPolicyNodeTemplateResponse {
  Policy policy = 1;
}

message TestIamPermissionsNodeTemplateRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionNodeTemplateResourceTestIamPermission"
    }
  ];
  TestPermissionsRequest test_permissions_request_resource = 2;
}

message TestIamPermissionsNodeTemplateResponse {
  TestPermissionsResponse test_permissions_response = 1;
}

message AggregatedListNodeTypesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectAggregatedNodeType"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message AggregatedListNodeTypesResponse {
  NodeTypeAggregatedList node_type_aggregated_list = 1;
}

message GetNodeTypeRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneNodeType"
    }
  ];
}

message GetNodeTypeResponse {
  NodeType node_type = 1;
}

message ListNodeTypesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneNodeType"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListNodeTypesResponse {
  NodeTypeList node_type_list = 1;
}

message AggregatedListPacketMirroringsRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectAggregatedPacketMirroring"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message AggregatedListPacketMirroringsResponse {
  PacketMirroringAggregatedList packet_mirroring_aggregated_list = 1;
}

message DeletePacketMirroringRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionPacketMirroring"
    }
  ];
  string request_id = 2;
}

message DeletePacketMirroringResponse {
  Operation operation = 1;
}

message GetPacketMirroringRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionPacketMirroring"
    }
  ];
}

message GetPacketMirroringResponse {
  PacketMirroring packet_mirroring = 1;
}

message InsertPacketMirroringRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionPacketMirroring"
    }
  ];
  string request_id = 2;
  PacketMirroring packet_mirroring_resource = 3;
}

message InsertPacketMirroringResponse {
  Operation operation = 1;
}

message ListPacketMirroringsRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionPacketMirroring"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListPacketMirroringsResponse {
  PacketMirroringList packet_mirroring_list = 1;
}

message PatchPacketMirroringRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionPacketMirroring"
    }
  ];
  string request_id = 2;
  PacketMirroring packet_mirroring_resource = 3;
}

message PatchPacketMirroringResponse {
  Operation operation = 1;
}

message TestIamPermissionsPacketMirroringRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionPacketMirroringResourceTestIamPermission"
    }
  ];
  TestPermissionsRequest test_permissions_request_resource = 2;
}

message TestIamPermissionsPacketMirroringResponse {
  TestPermissionsResponse test_permissions_response = 1;
}

message DisableXpnHostProjectRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectDisableXpnHost"
    }
  ];
  string request_id = 2;
}

message DisableXpnHostProjectResponse {
  Operation operation = 1;
}

message DisableXpnResourceProjectRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectDisableXpnResource"
    }
  ];
  string request_id = 2;
  ProjectsDisableXpnResourceRequest projects_disable_xpn_resource_request_resource = 3;
}

message DisableXpnResourceProjectResponse {
  Operation operation = 1;
}

message EnableXpnHostProjectRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectEnableXpnHost"
    }
  ];
  string request_id = 2;
}

message EnableXpnHostProjectResponse {
  Operation operation = 1;
}

message EnableXpnResourceProjectRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectEnableXpnResource"
    }
  ];
  string request_id = 2;
  ProjectsEnableXpnResourceRequest projects_enable_xpn_resource_request_resource = 3;
}

message EnableXpnResourceProjectResponse {
  Operation operation = 1;
}

message GetProjectRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/Project"
    }
  ];
}

message GetProjectResponse {
  Project project = 1;
}

message GetXpnHostProjectRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGetXpnHost"
    }
  ];
}

message GetXpnHostProjectResponse {
  Project project = 1;
}

message GetXpnResourcesProjectsRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGetXpnResource"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message GetXpnResourcesProjectsResponse {
  ProjectsGetXpnResources projects_get_xpn_resources = 1;
}

message ListXpnHostsProjectsRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectListXpnHost"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
  ProjectsListXpnHostsRequest projects_list_xpn_hosts_request_resource = 6;
}

message ListXpnHostsProjectsResponse {
  XpnHostList xpn_host_list = 1;
}

message MoveDiskProjectRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectMoveDisk"
    }
  ];
  string request_id = 2;
  DiskMoveRequest disk_move_request_resource = 3;
}

message MoveDiskProjectResponse {
  Operation operation = 1;
}

message MoveInstanceProjectRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectMoveInstance"
    }
  ];
  string request_id = 2;
  InstanceMoveRequest instance_move_request_resource = 3;
}

message MoveInstanceProjectResponse {
  Operation operation = 1;
}

message SetCommonInstanceMetadataProjectRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectSetCommonInstanceMetadata"
    }
  ];
  string request_id = 2;
  Metadata metadata_resource = 3;
}

message SetCommonInstanceMetadataProjectResponse {
  Operation operation = 1;
}

message SetDefaultNetworkTierProjectRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectSetDefaultNetworkTier"
    }
  ];
  string request_id = 2;
  ProjectsSetDefaultNetworkTierRequest projects_set_default_network_tier_request_resource = 3;
}

message SetDefaultNetworkTierProjectResponse {
  Operation operation = 1;
}

message SetUsageExportBucketProjectRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectSetUsageExportBucket"
    }
  ];
  string request_id = 2;
  UsageExportLocation usage_export_location_resource = 3;
}

message SetUsageExportBucketProjectResponse {
  Operation operation = 1;
}

message DeleteRegionAutoscalerRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionAutoscaler"
    }
  ];
  string request_id = 2;
}

message DeleteRegionAutoscalerResponse {
  Operation operation = 1;
}

message GetRegionAutoscalerRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionAutoscaler"
    }
  ];
}

message GetRegionAutoscalerResponse {
  Autoscaler autoscaler = 1;
}

message InsertRegionAutoscalerRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionAutoscaler"
    }
  ];
  string request_id = 2;
  Autoscaler autoscaler_resource = 3;
}

message InsertRegionAutoscalerResponse {
  Operation operation = 1;
}

message ListRegionAutoscalersRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionAutoscaler"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListRegionAutoscalersResponse {
  RegionAutoscalerList region_autoscaler_list = 1;
}

message PatchRegionAutoscalerRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionAutoscaler"
    }
  ];
  string autoscaler = 2;
  string request_id = 3;
  Autoscaler autoscaler_resource = 4;
}

message PatchRegionAutoscalerResponse {
  Operation operation = 1;
}

message UpdateRegionAutoscalerRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionAutoscaler"
    }
  ];
  string autoscaler = 2;
  string request_id = 3;
  Autoscaler autoscaler_resource = 4;
}

message UpdateRegionAutoscalerResponse {
  Operation operation = 1;
}

message DeleteRegionBackendServiceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionBackendService"
    }
  ];
  string request_id = 2;
}

message DeleteRegionBackendServiceResponse {
  Operation operation = 1;
}

message GetRegionBackendServiceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionBackendService"
    }
  ];
}

message GetRegionBackendServiceResponse {
  BackendService backend_service = 1;
}

message GetHealthRegionBackendServiceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionBackendServiceGetHealth"
    }
  ];
  ResourceGroupReference resource_group_reference_resource = 2;
}

message GetHealthRegionBackendServiceResponse {
  BackendServiceGroupHealth backend_service_group_health = 1;
}

message InsertRegionBackendServiceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionBackendService"
    }
  ];
  string request_id = 2;
  BackendService backend_service_resource = 3;
}

message InsertRegionBackendServiceResponse {
  Operation operation = 1;
}

message ListRegionBackendServicesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionBackendService"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListRegionBackendServicesResponse {
  BackendServiceList backend_service_list = 1;
}

message PatchRegionBackendServiceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionBackendService"
    }
  ];
  string request_id = 2;
  BackendService backend_service_resource = 3;
}

message PatchRegionBackendServiceResponse {
  Operation operation = 1;
}

message UpdateRegionBackendServiceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionBackendService"
    }
  ];
  string request_id = 2;
  BackendService backend_service_resource = 3;
}

message UpdateRegionBackendServiceResponse {
  Operation operation = 1;
}

message AggregatedListRegionCommitmentsRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectAggregatedCommitment"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message AggregatedListRegionCommitmentsResponse {
  CommitmentAggregatedList commitment_aggregated_list = 1;
}

message GetRegionCommitmentRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionCommitment"
    }
  ];
}

message GetRegionCommitmentResponse {
  Commitment commitment = 1;
}

message InsertRegionCommitmentRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionCommitment"
    }
  ];
  string request_id = 2;
  Commitment commitment_resource = 3;
}

message InsertRegionCommitmentResponse {
  Operation operation = 1;
}

message ListRegionCommitmentsRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionCommitment"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListRegionCommitmentsResponse {
  CommitmentList commitment_list = 1;
}

message GetRegionDiskTypeRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionDiskType"
    }
  ];
}

message GetRegionDiskTypeResponse {
  DiskType disk_type = 1;
}

message ListRegionDiskTypesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionDiskType"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListRegionDiskTypesResponse {
  RegionDiskTypeList region_disk_type_list = 1;
}

message AddResourcePoliciesRegionDiskRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionDiskAddResourcePolicy"
    }
  ];
  string request_id = 2;
  RegionDisksAddResourcePoliciesRequest region_disks_add_resource_policies_request_resource = 3;
}

message AddResourcePoliciesRegionDiskResponse {
  Operation operation = 1;
}

message CreateSnapshotRegionDiskRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionDiskCreateSnapshot"
    }
  ];
  string request_id = 2;
  Snapshot snapshot_resource = 3;
}

message CreateSnapshotRegionDiskResponse {
  Operation operation = 1;
}

message DeleteRegionDiskRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionDisk"
    }
  ];
  string request_id = 2;
}

message DeleteRegionDiskResponse {
  Operation operation = 1;
}

message GetRegionDiskRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionDisk"
    }
  ];
}

message GetRegionDiskResponse {
  Disk disk = 1;
}

message InsertRegionDiskRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionDisk"
    }
  ];
  string request_id = 2;
  string source_image = 3;
  Disk disk_resource = 4;
}

message InsertRegionDiskResponse {
  Operation operation = 1;
}

message ListRegionDisksRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionDisk"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListRegionDisksResponse {
  DiskList disk_list = 1;
}

message RemoveResourcePoliciesRegionDiskRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionDiskRemoveResourcePolicy"
    }
  ];
  string request_id = 2;
  RegionDisksRemoveResourcePoliciesRequest region_disks_remove_resource_policies_request_resource = 3;
}

message RemoveResourcePoliciesRegionDiskResponse {
  Operation operation = 1;
}

message ResizeRegionDiskRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionDiskResize"
    }
  ];
  string request_id = 2;
  RegionDisksResizeRequest region_disks_resize_request_resource = 3;
}

message ResizeRegionDiskResponse {
  Operation operation = 1;
}

message SetLabelsRegionDiskRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionDiskResourceSetLabel"
    }
  ];
  string request_id = 2;
  RegionSetLabelsRequest region_set_labels_request_resource = 3;
}

message SetLabelsRegionDiskResponse {
  Operation operation = 1;
}

message TestIamPermissionsRegionDiskRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionDiskResourceTestIamPermission"
    }
  ];
  TestPermissionsRequest test_permissions_request_resource = 2;
}

message TestIamPermissionsRegionDiskResponse {
  TestPermissionsResponse test_permissions_response = 1;
}

message DeleteRegionHealthCheckRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionHealthCheck"
    }
  ];
  string request_id = 2;
}

message DeleteRegionHealthCheckResponse {
  Operation operation = 1;
}

message GetRegionHealthCheckRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionHealthCheck"
    }
  ];
}

message GetRegionHealthCheckResponse {
  HealthCheck health_check = 1;
}

message InsertRegionHealthCheckRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionHealthCheck"
    }
  ];
  string request_id = 2;
  HealthCheck health_check_resource = 3;
}

message InsertRegionHealthCheckResponse {
  Operation operation = 1;
}

message ListRegionHealthChecksRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionHealthCheck"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListRegionHealthChecksResponse {
  HealthCheckList health_check_list = 1;
}

message PatchRegionHealthCheckRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionHealthCheck"
    }
  ];
  string request_id = 2;
  HealthCheck health_check_resource = 3;
}

message PatchRegionHealthCheckResponse {
  Operation operation = 1;
}

message UpdateRegionHealthCheckRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionHealthCheck"
    }
  ];
  string request_id = 2;
  HealthCheck health_check_resource = 3;
}

message UpdateRegionHealthCheckResponse {
  Operation operation = 1;
}

message AbandonInstancesRegionInstanceGroupManagerRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionInstanceGroupManagerAbandonInstance"
    }
  ];
  string request_id = 2;
  RegionInstanceGroupManagersAbandonInstancesRequest region_instance_group_managers_abandon_instances_request_resource = 3;
}

message AbandonInstancesRegionInstanceGroupManagerResponse {
  Operation operation = 1;
}

message ApplyUpdatesToInstancesRegionInstanceGroupManagerRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionInstanceGroupManagerApplyUpdatesToInstance"
    }
  ];
  RegionInstanceGroupManagersApplyUpdatesRequest region_instance_group_managers_apply_updates_request_resource = 2;
}

message ApplyUpdatesToInstancesRegionInstanceGroupManagerResponse {
  Operation operation = 1;
}

message CreateInstancesRegionInstanceGroupManagerRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionInstanceGroupManagerCreateInstance"
    }
  ];
  string request_id = 2;
  RegionInstanceGroupManagersCreateInstancesRequest region_instance_group_managers_create_instances_request_resource = 3;
}

message CreateInstancesRegionInstanceGroupManagerResponse {
  Operation operation = 1;
}

message DeleteRegionInstanceGroupManagerRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionInstanceGroupManager"
    }
  ];
  string request_id = 2;
}

message DeleteRegionInstanceGroupManagerResponse {
  Operation operation = 1;
}

message DeleteInstancesRegionInstanceGroupManagerRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionInstanceGroupManagerDeleteInstance"
    }
  ];
  string request_id = 2;
  RegionInstanceGroupManagersDeleteInstancesRequest region_instance_group_managers_delete_instances_request_resource = 3;
}

message DeleteInstancesRegionInstanceGroupManagerResponse {
  Operation operation = 1;
}

message GetRegionInstanceGroupManagerRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionInstanceGroupManager"
    }
  ];
}

message GetRegionInstanceGroupManagerResponse {
  InstanceGroupManager instance_group_manager = 1;
}

message InsertRegionInstanceGroupManagerRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionInstanceGroupManager"
    }
  ];
  string request_id = 2;
  InstanceGroupManager instance_group_manager_resource = 3;
}

message InsertRegionInstanceGroupManagerResponse {
  Operation operation = 1;
}

message ListRegionInstanceGroupManagersRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionInstanceGroupManager"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListRegionInstanceGroupManagersResponse {
  RegionInstanceGroupManagerList region_instance_group_manager_list = 1;
}

message ListErrorsRegionInstanceGroupManagersRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionInstanceGroupManagerListError"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListErrorsRegionInstanceGroupManagersResponse {
  RegionInstanceGroupManagersListErrorsResponse region_instance_group_managers_list_errors_response = 1;
}

message ListManagedInstancesRegionInstanceGroupManagersRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionInstanceGroupManagerListManagedInstance"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListManagedInstancesRegionInstanceGroupManagersResponse {
  RegionInstanceGroupManagersListInstancesResponse region_instance_group_managers_list_instances_response = 1;
}

message PatchRegionInstanceGroupManagerRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionInstanceGroupManager"
    }
  ];
  string request_id = 2;
  InstanceGroupManager instance_group_manager_resource = 3;
}

message PatchRegionInstanceGroupManagerResponse {
  Operation operation = 1;
}

message RecreateInstancesRegionInstanceGroupManagerRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionInstanceGroupManagerRecreateInstance"
    }
  ];
  string request_id = 2;
  RegionInstanceGroupManagersRecreateRequest region_instance_group_managers_recreate_request_resource = 3;
}

message RecreateInstancesRegionInstanceGroupManagerResponse {
  Operation operation = 1;
}

message ResizeRegionInstanceGroupManagerRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionInstanceGroupManagerResize"
    }
  ];
  int32 size = 2;
  string request_id = 3;
}

message ResizeRegionInstanceGroupManagerResponse {
  Operation operation = 1;
}

message SetInstanceTemplateRegionInstanceGroupManagerRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionInstanceGroupManagerSetInstanceTemplate"
    }
  ];
  string request_id = 2;
  RegionInstanceGroupManagersSetTemplateRequest region_instance_group_managers_set_template_request_resource = 3;
}

message SetInstanceTemplateRegionInstanceGroupManagerResponse {
  Operation operation = 1;
}

message SetTargetPoolsRegionInstanceGroupManagerRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionInstanceGroupManagerSetTargetPool"
    }
  ];
  string request_id = 2;
  RegionInstanceGroupManagersSetTargetPoolsRequest region_instance_group_managers_set_target_pools_request_resource = 3;
}

message SetTargetPoolsRegionInstanceGroupManagerResponse {
  Operation operation = 1;
}

message GetRegionInstanceGroupRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionInstanceGroup"
    }
  ];
}

message GetRegionInstanceGroupResponse {
  InstanceGroup instance_group = 1;
}

message ListRegionInstanceGroupsRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionInstanceGroup"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListRegionInstanceGroupsResponse {
  RegionInstanceGroupList region_instance_group_list = 1;
}

message ListInstancesRegionInstanceGroupsRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionInstanceGroupListInstance"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
  RegionInstanceGroupsListInstancesRequest region_instance_groups_list_instances_request_resource = 6;
}

message ListInstancesRegionInstanceGroupsResponse {
  RegionInstanceGroupsListInstances region_instance_groups_list_instances = 1;
}

message SetNamedPortsRegionInstanceGroupRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionInstanceGroupSetNamedPort"
    }
  ];
  string request_id = 2;
  RegionInstanceGroupsSetNamedPortsRequest region_instance_groups_set_named_ports_request_resource = 3;
}

message SetNamedPortsRegionInstanceGroupResponse {
  Operation operation = 1;
}

message DeleteRegionOperationRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionOperation"
    }
  ];
}

message DeleteRegionOperationResponse {
}

message GetRegionOperationRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionOperation"
    }
  ];
}

message GetRegionOperationResponse {
  Operation operation = 1;
}

message ListRegionOperationsRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionOperation"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListRegionOperationsResponse {
  OperationList operation_list = 1;
}

message WaitRegionOperationRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionOperationWait"
    }
  ];
}

message WaitRegionOperationResponse {
  Operation operation = 1;
}

message DeleteRegionSslCertificateRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionSslCertificate"
    }
  ];
  string request_id = 2;
}

message DeleteRegionSslCertificateResponse {
  Operation operation = 1;
}

message GetRegionSslCertificateRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionSslCertificate"
    }
  ];
}

message GetRegionSslCertificateResponse {
  SslCertificate ssl_certificate = 1;
}

message InsertRegionSslCertificateRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionSslCertificate"
    }
  ];
  string request_id = 2;
  SslCertificate ssl_certificate_resource = 3;
}

message InsertRegionSslCertificateResponse {
  Operation operation = 1;
}

message ListRegionSslCertificatesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionSslCertificate"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListRegionSslCertificatesResponse {
  SslCertificateList ssl_certificate_list = 1;
}

message DeleteRegionTargetHttpProxyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionTargetHttpProxy"
    }
  ];
  string request_id = 2;
}

message DeleteRegionTargetHttpProxyResponse {
  Operation operation = 1;
}

message GetRegionTargetHttpProxyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionTargetHttpProxy"
    }
  ];
}

message GetRegionTargetHttpProxyResponse {
  TargetHttpProxy target_http_proxy = 1;
}

message InsertRegionTargetHttpProxyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionTargetHttpProxy"
    }
  ];
  string request_id = 2;
  TargetHttpProxy target_http_proxy_resource = 3;
}

message InsertRegionTargetHttpProxyResponse {
  Operation operation = 1;
}

message ListRegionTargetHttpProxiesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionTargetHttpProxy"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListRegionTargetHttpProxiesResponse {
  TargetHttpProxyList target_http_proxy_list = 1;
}

message SetUrlMapRegionTargetHttpProxyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionTargetHttpProxySetUrlMap"
    }
  ];
  string request_id = 2;
  UrlMapReference url_map_reference_resource = 3;
}

message SetUrlMapRegionTargetHttpProxyResponse {
  Operation operation = 1;
}

message DeleteRegionTargetHttpsProxyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionTargetHttpsProxy"
    }
  ];
  string request_id = 2;
}

message DeleteRegionTargetHttpsProxyResponse {
  Operation operation = 1;
}

message GetRegionTargetHttpsProxyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionTargetHttpsProxy"
    }
  ];
}

message GetRegionTargetHttpsProxyResponse {
  TargetHttpsProxy target_https_proxy = 1;
}

message InsertRegionTargetHttpsProxyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionTargetHttpsProxy"
    }
  ];
  string request_id = 2;
  TargetHttpsProxy target_https_proxy_resource = 3;
}

message InsertRegionTargetHttpsProxyResponse {
  Operation operation = 1;
}

message ListRegionTargetHttpsProxiesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionTargetHttpsProxy"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListRegionTargetHttpsProxiesResponse {
  TargetHttpsProxyList target_https_proxy_list = 1;
}

message SetSslCertificatesRegionTargetHttpsProxyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionTargetHttpsProxySetSslCertificate"
    }
  ];
  string request_id = 2;
  RegionTargetHttpsProxiesSetSslCertificatesRequest region_target_https_proxies_set_ssl_certificates_request_resource = 3;
}

message SetSslCertificatesRegionTargetHttpsProxyResponse {
  Operation operation = 1;
}

message SetUrlMapRegionTargetHttpsProxyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionTargetHttpsProxySetUrlMap"
    }
  ];
  string request_id = 2;
  UrlMapReference url_map_reference_resource = 3;
}

message SetUrlMapRegionTargetHttpsProxyResponse {
  Operation operation = 1;
}

message DeleteRegionUrlMapRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionUrlMap"
    }
  ];
  string request_id = 2;
}

message DeleteRegionUrlMapResponse {
  Operation operation = 1;
}

message GetRegionUrlMapRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionUrlMap"
    }
  ];
}

message GetRegionUrlMapResponse {
  UrlMap url_map = 1;
}

message InsertRegionUrlMapRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionUrlMap"
    }
  ];
  string request_id = 2;
  UrlMap url_map_resource = 3;
}

message InsertRegionUrlMapResponse {
  Operation operation = 1;
}

message ListRegionUrlMapsRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionUrlMap"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListRegionUrlMapsResponse {
  UrlMapList url_map_list = 1;
}

message PatchRegionUrlMapRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionUrlMap"
    }
  ];
  string request_id = 2;
  UrlMap url_map_resource = 3;
}

message PatchRegionUrlMapResponse {
  Operation operation = 1;
}

message UpdateRegionUrlMapRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionUrlMap"
    }
  ];
  string request_id = 2;
  UrlMap url_map_resource = 3;
}

message UpdateRegionUrlMapResponse {
  Operation operation = 1;
}

message ValidateRegionUrlMapRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionUrlMapValidate"
    }
  ];
  RegionUrlMapsValidateRequest region_url_maps_validate_request_resource = 2;
}

message ValidateRegionUrlMapResponse {
  UrlMapsValidateResponse url_maps_validate_response = 1;
}

message GetRegionRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegion"
    }
  ];
}

message GetRegionResponse {
  Region region = 1;
}

message ListRegionsRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegion"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListRegionsResponse {
  RegionList region_list = 1;
}

message AggregatedListReservationsRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectAggregatedReservation"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message AggregatedListReservationsResponse {
  ReservationAggregatedList reservation_aggregated_list = 1;
}

message DeleteReservationRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneReservation"
    }
  ];
  string request_id = 2;
}

message DeleteReservationResponse {
  Operation operation = 1;
}

message GetReservationRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneReservation"
    }
  ];
}

message GetReservationResponse {
  Reservation reservation = 1;
}

message GetIamPolicyReservationRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneReservationResourceGetIamPolicy"
    }
  ];
}

message GetIamPolicyReservationResponse {
  Policy policy = 1;
}

message InsertReservationRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneReservation"
    }
  ];
  string request_id = 2;
  Reservation reservation_resource = 3;
}

message InsertReservationResponse {
  Operation operation = 1;
}

message ListReservationsRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneReservation"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListReservationsResponse {
  ReservationList reservation_list = 1;
}

message ResizeReservationRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneReservationResize"
    }
  ];
  string request_id = 2;
  ReservationsResizeRequest reservations_resize_request_resource = 3;
}

message ResizeReservationResponse {
  Operation operation = 1;
}

message SetIamPolicyReservationRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneReservationResourceSetIamPolicy"
    }
  ];
  ZoneSetPolicyRequest zone_set_policy_request_resource = 2;
}

message SetIamPolicyReservationResponse {
  Policy policy = 1;
}

message TestIamPermissionsReservationRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneReservationResourceTestIamPermission"
    }
  ];
  TestPermissionsRequest test_permissions_request_resource = 2;
}

message TestIamPermissionsReservationResponse {
  TestPermissionsResponse test_permissions_response = 1;
}

message AggregatedListResourcePoliciesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectAggregatedResourcePolicy"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message AggregatedListResourcePoliciesResponse {
  ResourcePolicyAggregatedList resource_policy_aggregated_list = 1;
}

message DeleteResourcePolicyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionResourcePolicy"
    }
  ];
  string request_id = 2;
}

message DeleteResourcePolicyResponse {
  Operation operation = 1;
}

message GetResourcePolicyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionResourcePolicy"
    }
  ];
}

message GetResourcePolicyResponse {
  ResourcePolicy resource_policy = 1;
}

message GetIamPolicyResourcePolicyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionResourcePolicyResourceGetIamPolicy"
    }
  ];
}

message GetIamPolicyResourcePolicyResponse {
  Policy policy = 1;
}

message InsertResourcePolicyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionResourcePolicy"
    }
  ];
  string request_id = 2;
  ResourcePolicy resource_policy_resource = 3;
}

message InsertResourcePolicyResponse {
  Operation operation = 1;
}

message ListResourcePoliciesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionResourcePolicy"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListResourcePoliciesResponse {
  ResourcePolicyList resource_policy_list = 1;
}

message SetIamPolicyResourcePolicyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionResourcePolicyResourceSetIamPolicy"
    }
  ];
  RegionSetPolicyRequest region_set_policy_request_resource = 2;
}

message SetIamPolicyResourcePolicyResponse {
  Policy policy = 1;
}

message TestIamPermissionsResourcePolicyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionResourcePolicyResourceTestIamPermission"
    }
  ];
  TestPermissionsRequest test_permissions_request_resource = 2;
}

message TestIamPermissionsResourcePolicyResponse {
  TestPermissionsResponse test_permissions_response = 1;
}

message AggregatedListRoutersRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectAggregatedRouter"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message AggregatedListRoutersResponse {
  RouterAggregatedList router_aggregated_list = 1;
}

message DeleteRouterRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionRouter"
    }
  ];
  string request_id = 2;
}

message DeleteRouterResponse {
  Operation operation = 1;
}

message GetRouterRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionRouter"
    }
  ];
}

message GetRouterResponse {
  Router router = 1;
}

message GetNatMappingInfoRoutersRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionRouterGetNatMappingInfo"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message GetNatMappingInfoRoutersResponse {
  VmEndpointNatMappingsList vm_endpoint_nat_mappings_list = 1;
}

message GetRouterStatusRouterRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionRouterGetRouterStatu"
    }
  ];
}

message GetRouterStatusRouterResponse {
  RouterStatusResponse router_status_response = 1;
}

message InsertRouterRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionRouter"
    }
  ];
  string request_id = 2;
  Router router_resource = 3;
}

message InsertRouterResponse {
  Operation operation = 1;
}

message ListRoutersRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionRouter"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListRoutersResponse {
  RouterList router_list = 1;
}

message PatchRouterRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionRouter"
    }
  ];
  string request_id = 2;
  Router router_resource = 3;
}

message PatchRouterResponse {
  Operation operation = 1;
}

message PreviewRouterRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionRouterPreview"
    }
  ];
  Router router_resource = 2;
}

message PreviewRouterResponse {
  RoutersPreviewResponse routers_preview_response = 1;
}

message UpdateRouterRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionRouter"
    }
  ];
  string request_id = 2;
  Router router_resource = 3;
}

message UpdateRouterResponse {
  Operation operation = 1;
}

message DeleteRouteRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalRoute"
    }
  ];
  string request_id = 2;
}

message DeleteRouteResponse {
  Operation operation = 1;
}

message GetRouteRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalRoute"
    }
  ];
}

message GetRouteResponse {
  Route route = 1;
}

message InsertRouteRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalRoute"
    }
  ];
  string request_id = 2;
  Route route_resource = 3;
}

message InsertRouteResponse {
  Operation operation = 1;
}

message ListRoutesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalRoute"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListRoutesResponse {
  RouteList route_list = 1;
}

message AddRuleSecurityPolicyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalSecurityPolicyAddRule"
    }
  ];
  SecurityPolicyRule security_policy_rule_resource = 2;
}

message AddRuleSecurityPolicyResponse {
  Operation operation = 1;
}

message DeleteSecurityPolicyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalSecurityPolicy"
    }
  ];
  string request_id = 2;
}

message DeleteSecurityPolicyResponse {
  Operation operation = 1;
}

message GetSecurityPolicyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalSecurityPolicy"
    }
  ];
}

message GetSecurityPolicyResponse {
  SecurityPolicy security_policy = 1;
}

message GetRuleSecurityPolicyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalSecurityPolicyGetRule"
    }
  ];
  int32 priority = 2;
}

message GetRuleSecurityPolicyResponse {
  SecurityPolicyRule security_policy_rule = 1;
}

message InsertSecurityPolicyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalSecurityPolicy"
    }
  ];
  string request_id = 2;
  SecurityPolicy security_policy_resource = 3;
}

message InsertSecurityPolicyResponse {
  Operation operation = 1;
}

message ListSecurityPoliciesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalSecurityPolicy"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListSecurityPoliciesResponse {
  SecurityPolicyList security_policy_list = 1;
}

message PatchSecurityPolicyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalSecurityPolicy"
    }
  ];
  string request_id = 2;
  SecurityPolicy security_policy_resource = 3;
}

message PatchSecurityPolicyResponse {
  Operation operation = 1;
}

message PatchRuleSecurityPolicyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalSecurityPolicyPatchRule"
    }
  ];
  int32 priority = 2;
  SecurityPolicyRule security_policy_rule_resource = 3;
}

message PatchRuleSecurityPolicyResponse {
  Operation operation = 1;
}

message RemoveRuleSecurityPolicyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalSecurityPolicyRemoveRule"
    }
  ];
  int32 priority = 2;
}

message RemoveRuleSecurityPolicyResponse {
  Operation operation = 1;
}

message DeleteSnapshotRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalSnapshot"
    }
  ];
  string request_id = 2;
}

message DeleteSnapshotResponse {
  Operation operation = 1;
}

message GetSnapshotRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalSnapshot"
    }
  ];
}

message GetSnapshotResponse {
  Snapshot snapshot = 1;
}

message GetIamPolicySnapshotRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalSnapshotResourceGetIamPolicy"
    }
  ];
}

message GetIamPolicySnapshotResponse {
  Policy policy = 1;
}

message ListSnapshotsRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalSnapshot"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListSnapshotsResponse {
  SnapshotList snapshot_list = 1;
}

message SetIamPolicySnapshotRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalSnapshotResourceSetIamPolicy"
    }
  ];
  GlobalSetPolicyRequest global_set_policy_request_resource = 2;
}

message SetIamPolicySnapshotResponse {
  Policy policy = 1;
}

message SetLabelsSnapshotRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalSnapshotResourceSetLabel"
    }
  ];
  GlobalSetLabelsRequest global_set_labels_request_resource = 2;
}

message SetLabelsSnapshotResponse {
  Operation operation = 1;
}

message TestIamPermissionsSnapshotRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalSnapshotResourceTestIamPermission"
    }
  ];
  TestPermissionsRequest test_permissions_request_resource = 2;
}

message TestIamPermissionsSnapshotResponse {
  TestPermissionsResponse test_permissions_response = 1;
}

message AggregatedListSslCertificatesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectAggregatedSslCertificate"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message AggregatedListSslCertificatesResponse {
  SslCertificateAggregatedList ssl_certificate_aggregated_list = 1;
}

message DeleteSslCertificateRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalSslCertificate"
    }
  ];
  string request_id = 2;
}

message DeleteSslCertificateResponse {
  Operation operation = 1;
}

message GetSslCertificateRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalSslCertificate"
    }
  ];
}

message GetSslCertificateResponse {
  SslCertificate ssl_certificate = 1;
}

message InsertSslCertificateRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalSslCertificate"
    }
  ];
  string request_id = 2;
  SslCertificate ssl_certificate_resource = 3;
}

message InsertSslCertificateResponse {
  Operation operation = 1;
}

message ListSslCertificatesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalSslCertificate"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListSslCertificatesResponse {
  SslCertificateList ssl_certificate_list = 1;
}

message DeleteSslPolicyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalSslPolicy"
    }
  ];
  string request_id = 2;
}

message DeleteSslPolicyResponse {
  Operation operation = 1;
}

message GetSslPolicyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalSslPolicy"
    }
  ];
}

message GetSslPolicyResponse {
  SslPolicy ssl_policy = 1;
}

message InsertSslPolicyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalSslPolicy"
    }
  ];
  string request_id = 2;
  SslPolicy ssl_policy_resource = 3;
}

message InsertSslPolicyResponse {
  Operation operation = 1;
}

message ListSslPoliciesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalSslPolicy"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListSslPoliciesResponse {
  SslPoliciesList ssl_policies_list = 1;
}

message ListAvailableFeaturesSslPoliciesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalSslPolicyListAvailableFeature"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListAvailableFeaturesSslPoliciesResponse {
  SslPoliciesListAvailableFeaturesResponse ssl_policies_list_available_features_response = 1;
}

message PatchSslPolicyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalSslPolicy"
    }
  ];
  string request_id = 2;
  SslPolicy ssl_policy_resource = 3;
}

message PatchSslPolicyResponse {
  Operation operation = 1;
}

message AggregatedListSubnetworksRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectAggregatedSubnetwork"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message AggregatedListSubnetworksResponse {
  SubnetworkAggregatedList subnetwork_aggregated_list = 1;
}

message DeleteSubnetworkRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionSubnetwork"
    }
  ];
  string request_id = 2;
}

message DeleteSubnetworkResponse {
  Operation operation = 1;
}

message ExpandIpCidrRangeSubnetworkRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionSubnetworkExpandIpCidrRange"
    }
  ];
  string request_id = 2;
  SubnetworksExpandIpCidrRangeRequest subnetworks_expand_ip_cidr_range_request_resource = 3;
}

message ExpandIpCidrRangeSubnetworkResponse {
  Operation operation = 1;
}

message GetSubnetworkRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionSubnetwork"
    }
  ];
}

message GetSubnetworkResponse {
  Subnetwork subnetwork = 1;
}

message GetIamPolicySubnetworkRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionSubnetworkResourceGetIamPolicy"
    }
  ];
}

message GetIamPolicySubnetworkResponse {
  Policy policy = 1;
}

message InsertSubnetworkRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionSubnetwork"
    }
  ];
  string request_id = 2;
  Subnetwork subnetwork_resource = 3;
}

message InsertSubnetworkResponse {
  Operation operation = 1;
}

message ListSubnetworksRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionSubnetwork"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListSubnetworksResponse {
  SubnetworkList subnetwork_list = 1;
}

message ListUsableSubnetworksRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectAggregatedSubnetworkListUsable"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListUsableSubnetworksResponse {
  UsableSubnetworksAggregatedList usable_subnetworks_aggregated_list = 1;
}

message PatchSubnetworkRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionSubnetwork"
    }
  ];
  string request_id = 2;
  int32 drain_timeout_seconds = 3;
  Subnetwork subnetwork_resource = 4;
}

message PatchSubnetworkResponse {
  Operation operation = 1;
}

message SetIamPolicySubnetworkRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionSubnetworkResourceSetIamPolicy"
    }
  ];
  RegionSetPolicyRequest region_set_policy_request_resource = 2;
}

message SetIamPolicySubnetworkResponse {
  Policy policy = 1;
}

message SetPrivateIpGoogleAccessSubnetworkRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionSubnetworkSetPrivateIpGoogleAccess"
    }
  ];
  string request_id = 2;
  SubnetworksSetPrivateIpGoogleAccessRequest subnetworks_set_private_ip_google_access_request_resource = 3;
}

message SetPrivateIpGoogleAccessSubnetworkResponse {
  Operation operation = 1;
}

message TestIamPermissionsSubnetworkRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionSubnetworkResourceTestIamPermission"
    }
  ];
  TestPermissionsRequest test_permissions_request_resource = 2;
}

message TestIamPermissionsSubnetworkResponse {
  TestPermissionsResponse test_permissions_response = 1;
}

message AggregatedListTargetHttpProxiesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectAggregatedTargetHttpProxy"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message AggregatedListTargetHttpProxiesResponse {
  TargetHttpProxyAggregatedList target_http_proxy_aggregated_list = 1;
}

message DeleteTargetHttpProxyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalTargetHttpProxy"
    }
  ];
  string request_id = 2;
}

message DeleteTargetHttpProxyResponse {
  Operation operation = 1;
}

message GetTargetHttpProxyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalTargetHttpProxy"
    }
  ];
}

message GetTargetHttpProxyResponse {
  TargetHttpProxy target_http_proxy = 1;
}

message InsertTargetHttpProxyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalTargetHttpProxy"
    }
  ];
  string request_id = 2;
  TargetHttpProxy target_http_proxy_resource = 3;
}

message InsertTargetHttpProxyResponse {
  Operation operation = 1;
}

message ListTargetHttpProxiesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalTargetHttpProxy"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListTargetHttpProxiesResponse {
  TargetHttpProxyList target_http_proxy_list = 1;
}

message SetUrlMapTargetHttpProxyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectTargetHttpProxySetUrlMap"
    }
  ];
  string request_id = 2;
  UrlMapReference url_map_reference_resource = 3;
}

message SetUrlMapTargetHttpProxyResponse {
  Operation operation = 1;
}

message AggregatedListTargetHttpsProxiesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectAggregatedTargetHttpsProxy"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message AggregatedListTargetHttpsProxiesResponse {
  TargetHttpsProxyAggregatedList target_https_proxy_aggregated_list = 1;
}

message DeleteTargetHttpsProxyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalTargetHttpsProxy"
    }
  ];
  string request_id = 2;
}

message DeleteTargetHttpsProxyResponse {
  Operation operation = 1;
}

message GetTargetHttpsProxyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalTargetHttpsProxy"
    }
  ];
}

message GetTargetHttpsProxyResponse {
  TargetHttpsProxy target_https_proxy = 1;
}

message InsertTargetHttpsProxyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalTargetHttpsProxy"
    }
  ];
  string request_id = 2;
  TargetHttpsProxy target_https_proxy_resource = 3;
}

message InsertTargetHttpsProxyResponse {
  Operation operation = 1;
}

message ListTargetHttpsProxiesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalTargetHttpsProxy"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListTargetHttpsProxiesResponse {
  TargetHttpsProxyList target_https_proxy_list = 1;
}

message SetQuicOverrideTargetHttpsProxyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalTargetHttpsProxySetQuicOverride"
    }
  ];
  string request_id = 2;
  TargetHttpsProxiesSetQuicOverrideRequest target_https_proxies_set_quic_override_request_resource = 3;
}

message SetQuicOverrideTargetHttpsProxyResponse {
  Operation operation = 1;
}

message SetSslCertificatesTargetHttpsProxyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectTargetHttpsProxySetSslCertificate"
    }
  ];
  string request_id = 2;
  TargetHttpsProxiesSetSslCertificatesRequest target_https_proxies_set_ssl_certificates_request_resource = 3;
}

message SetSslCertificatesTargetHttpsProxyResponse {
  Operation operation = 1;
}

message SetSslPolicyTargetHttpsProxyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalTargetHttpsProxySetSslPolicy"
    }
  ];
  string request_id = 2;
  SslPolicyReference ssl_policy_reference_resource = 3;
}

message SetSslPolicyTargetHttpsProxyResponse {
  Operation operation = 1;
}

message SetUrlMapTargetHttpsProxyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectTargetHttpsProxySetUrlMap"
    }
  ];
  string request_id = 2;
  UrlMapReference url_map_reference_resource = 3;
}

message SetUrlMapTargetHttpsProxyResponse {
  Operation operation = 1;
}

message AggregatedListTargetInstancesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectAggregatedTargetInstance"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message AggregatedListTargetInstancesResponse {
  TargetInstanceAggregatedList target_instance_aggregated_list = 1;
}

message DeleteTargetInstanceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneTargetInstance"
    }
  ];
  string request_id = 2;
}

message DeleteTargetInstanceResponse {
  Operation operation = 1;
}

message GetTargetInstanceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneTargetInstance"
    }
  ];
}

message GetTargetInstanceResponse {
  TargetInstance target_instance = 1;
}

message InsertTargetInstanceRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneTargetInstance"
    }
  ];
  string request_id = 2;
  TargetInstance target_instance_resource = 3;
}

message InsertTargetInstanceResponse {
  Operation operation = 1;
}

message ListTargetInstancesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneTargetInstance"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListTargetInstancesResponse {
  TargetInstanceList target_instance_list = 1;
}

message AddHealthCheckTargetPoolRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionTargetPoolAddHealthCheck"
    }
  ];
  string request_id = 2;
  TargetPoolsAddHealthCheckRequest target_pools_add_health_check_request_resource = 3;
}

message AddHealthCheckTargetPoolResponse {
  Operation operation = 1;
}

message AddInstanceTargetPoolRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionTargetPoolAddInstance"
    }
  ];
  string request_id = 2;
  TargetPoolsAddInstanceRequest target_pools_add_instance_request_resource = 3;
}

message AddInstanceTargetPoolResponse {
  Operation operation = 1;
}

message AggregatedListTargetPoolsRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectAggregatedTargetPool"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message AggregatedListTargetPoolsResponse {
  TargetPoolAggregatedList target_pool_aggregated_list = 1;
}

message DeleteTargetPoolRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionTargetPool"
    }
  ];
  string request_id = 2;
}

message DeleteTargetPoolResponse {
  Operation operation = 1;
}

message GetTargetPoolRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionTargetPool"
    }
  ];
}

message GetTargetPoolResponse {
  TargetPool target_pool = 1;
}

message GetHealthTargetPoolRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionTargetPoolGetHealth"
    }
  ];
  InstanceReference instance_reference_resource = 2;
}

message GetHealthTargetPoolResponse {
  TargetPoolInstanceHealth target_pool_instance_health = 1;
}

message InsertTargetPoolRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionTargetPool"
    }
  ];
  string request_id = 2;
  TargetPool target_pool_resource = 3;
}

message InsertTargetPoolResponse {
  Operation operation = 1;
}

message ListTargetPoolsRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionTargetPool"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListTargetPoolsResponse {
  TargetPoolList target_pool_list = 1;
}

message RemoveHealthCheckTargetPoolRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionTargetPoolRemoveHealthCheck"
    }
  ];
  string request_id = 2;
  TargetPoolsRemoveHealthCheckRequest target_pools_remove_health_check_request_resource = 3;
}

message RemoveHealthCheckTargetPoolResponse {
  Operation operation = 1;
}

message RemoveInstanceTargetPoolRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionTargetPoolRemoveInstance"
    }
  ];
  string request_id = 2;
  TargetPoolsRemoveInstanceRequest target_pools_remove_instance_request_resource = 3;
}

message RemoveInstanceTargetPoolResponse {
  Operation operation = 1;
}

message SetBackupTargetPoolRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionTargetPoolSetBackup"
    }
  ];
  string request_id = 2;
  float failover_ratio = 3;
  TargetReference target_reference_resource = 4;
}

message SetBackupTargetPoolResponse {
  Operation operation = 1;
}

message DeleteTargetSslProxyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalTargetSslProxy"
    }
  ];
  string request_id = 2;
}

message DeleteTargetSslProxyResponse {
  Operation operation = 1;
}

message GetTargetSslProxyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalTargetSslProxy"
    }
  ];
}

message GetTargetSslProxyResponse {
  TargetSslProxy target_ssl_proxy = 1;
}

message InsertTargetSslProxyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalTargetSslProxy"
    }
  ];
  string request_id = 2;
  TargetSslProxy target_ssl_proxy_resource = 3;
}

message InsertTargetSslProxyResponse {
  Operation operation = 1;
}

message ListTargetSslProxiesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalTargetSslProxy"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListTargetSslProxiesResponse {
  TargetSslProxyList target_ssl_proxy_list = 1;
}

message SetBackendServiceTargetSslProxyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalTargetSslProxySetBackendService"
    }
  ];
  string request_id = 2;
  TargetSslProxiesSetBackendServiceRequest target_ssl_proxies_set_backend_service_request_resource = 3;
}

message SetBackendServiceTargetSslProxyResponse {
  Operation operation = 1;
}

message SetProxyHeaderTargetSslProxyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalTargetSslProxySetProxyHeader"
    }
  ];
  string request_id = 2;
  TargetSslProxiesSetProxyHeaderRequest target_ssl_proxies_set_proxy_header_request_resource = 3;
}

message SetProxyHeaderTargetSslProxyResponse {
  Operation operation = 1;
}

message SetSslCertificatesTargetSslProxyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalTargetSslProxySetSslCertificate"
    }
  ];
  string request_id = 2;
  TargetSslProxiesSetSslCertificatesRequest target_ssl_proxies_set_ssl_certificates_request_resource = 3;
}

message SetSslCertificatesTargetSslProxyResponse {
  Operation operation = 1;
}

message SetSslPolicyTargetSslProxyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalTargetSslProxySetSslPolicy"
    }
  ];
  string request_id = 2;
  SslPolicyReference ssl_policy_reference_resource = 3;
}

message SetSslPolicyTargetSslProxyResponse {
  Operation operation = 1;
}

message DeleteTargetTcpProxyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalTargetTcpProxy"
    }
  ];
  string request_id = 2;
}

message DeleteTargetTcpProxyResponse {
  Operation operation = 1;
}

message GetTargetTcpProxyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalTargetTcpProxy"
    }
  ];
}

message GetTargetTcpProxyResponse {
  TargetTcpProxy target_tcp_proxy = 1;
}

message InsertTargetTcpProxyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalTargetTcpProxy"
    }
  ];
  string request_id = 2;
  TargetTcpProxy target_tcp_proxy_resource = 3;
}

message InsertTargetTcpProxyResponse {
  Operation operation = 1;
}

message ListTargetTcpProxiesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalTargetTcpProxy"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListTargetTcpProxiesResponse {
  TargetTcpProxyList target_tcp_proxy_list = 1;
}

message SetBackendServiceTargetTcpProxyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalTargetTcpProxySetBackendService"
    }
  ];
  string request_id = 2;
  TargetTcpProxiesSetBackendServiceRequest target_tcp_proxies_set_backend_service_request_resource = 3;
}

message SetBackendServiceTargetTcpProxyResponse {
  Operation operation = 1;
}

message SetProxyHeaderTargetTcpProxyRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalTargetTcpProxySetProxyHeader"
    }
  ];
  string request_id = 2;
  TargetTcpProxiesSetProxyHeaderRequest target_tcp_proxies_set_proxy_header_request_resource = 3;
}

message SetProxyHeaderTargetTcpProxyResponse {
  Operation operation = 1;
}

message AggregatedListTargetVpnGatewaysRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectAggregatedTargetVpnGateway"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message AggregatedListTargetVpnGatewaysResponse {
  TargetVpnGatewayAggregatedList target_vpn_gateway_aggregated_list = 1;
}

message DeleteTargetVpnGatewayRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionTargetVpnGateway"
    }
  ];
  string request_id = 2;
}

message DeleteTargetVpnGatewayResponse {
  Operation operation = 1;
}

message GetTargetVpnGatewayRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionTargetVpnGateway"
    }
  ];
}

message GetTargetVpnGatewayResponse {
  TargetVpnGateway target_vpn_gateway = 1;
}

message InsertTargetVpnGatewayRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionTargetVpnGateway"
    }
  ];
  string request_id = 2;
  TargetVpnGateway target_vpn_gateway_resource = 3;
}

message InsertTargetVpnGatewayResponse {
  Operation operation = 1;
}

message ListTargetVpnGatewaysRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionTargetVpnGateway"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListTargetVpnGatewaysResponse {
  TargetVpnGatewayList target_vpn_gateway_list = 1;
}

message AggregatedListUrlMapsRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectAggregatedUrlMap"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message AggregatedListUrlMapsResponse {
  UrlMapsAggregatedList url_maps_aggregated_list = 1;
}

message DeleteUrlMapRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalUrlMap"
    }
  ];
  string request_id = 2;
}

message DeleteUrlMapResponse {
  Operation operation = 1;
}

message GetUrlMapRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalUrlMap"
    }
  ];
}

message GetUrlMapResponse {
  UrlMap url_map = 1;
}

message InsertUrlMapRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalUrlMap"
    }
  ];
  string request_id = 2;
  UrlMap url_map_resource = 3;
}

message InsertUrlMapResponse {
  Operation operation = 1;
}

message InvalidateCacheUrlMapRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalUrlMapInvalidateCache"
    }
  ];
  string request_id = 2;
  CacheInvalidationRule cache_invalidation_rule_resource = 3;
}

message InvalidateCacheUrlMapResponse {
  Operation operation = 1;
}

message ListUrlMapsRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalUrlMap"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListUrlMapsResponse {
  UrlMapList url_map_list = 1;
}

message PatchUrlMapRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalUrlMap"
    }
  ];
  string request_id = 2;
  UrlMap url_map_resource = 3;
}

message PatchUrlMapResponse {
  Operation operation = 1;
}

message UpdateUrlMapRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalUrlMap"
    }
  ];
  string request_id = 2;
  UrlMap url_map_resource = 3;
}

message UpdateUrlMapResponse {
  Operation operation = 1;
}

message ValidateUrlMapRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectGlobalUrlMapValidate"
    }
  ];
  UrlMapsValidateRequest url_maps_validate_request_resource = 2;
}

message ValidateUrlMapResponse {
  UrlMapsValidateResponse url_maps_validate_response = 1;
}

message AggregatedListVpnGatewaysRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectAggregatedVpnGateway"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message AggregatedListVpnGatewaysResponse {
  VpnGatewayAggregatedList vpn_gateway_aggregated_list = 1;
}

message DeleteVpnGatewayRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionVpnGateway"
    }
  ];
  string request_id = 2;
}

message DeleteVpnGatewayResponse {
  Operation operation = 1;
}

message GetVpnGatewayRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionVpnGateway"
    }
  ];
}

message GetVpnGatewayResponse {
  VpnGateway vpn_gateway = 1;
}

message GetStatusVpnGatewayRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionVpnGatewayGetStatu"
    }
  ];
}

message GetStatusVpnGatewayResponse {
  VpnGatewaysGetStatusResponse vpn_gateways_get_status_response = 1;
}

message InsertVpnGatewayRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionVpnGateway"
    }
  ];
  string request_id = 2;
  VpnGateway vpn_gateway_resource = 3;
}

message InsertVpnGatewayResponse {
  Operation operation = 1;
}

message ListVpnGatewaysRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionVpnGateway"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListVpnGatewaysResponse {
  VpnGatewayList vpn_gateway_list = 1;
}

message SetLabelsVpnGatewayRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionVpnGatewayResourceSetLabel"
    }
  ];
  string request_id = 2;
  RegionSetLabelsRequest region_set_labels_request_resource = 3;
}

message SetLabelsVpnGatewayResponse {
  Operation operation = 1;
}

message TestIamPermissionsVpnGatewayRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionVpnGatewayResourceTestIamPermission"
    }
  ];
  TestPermissionsRequest test_permissions_request_resource = 2;
}

message TestIamPermissionsVpnGatewayResponse {
  TestPermissionsResponse test_permissions_response = 1;
}

message AggregatedListVpnTunnelsRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectAggregatedVpnTunnel"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message AggregatedListVpnTunnelsResponse {
  VpnTunnelAggregatedList vpn_tunnel_aggregated_list = 1;
}

message DeleteVpnTunnelRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionVpnTunnel"
    }
  ];
  string request_id = 2;
}

message DeleteVpnTunnelResponse {
  Operation operation = 1;
}

message GetVpnTunnelRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionVpnTunnel"
    }
  ];
}

message GetVpnTunnelResponse {
  VpnTunnel vpn_tunnel = 1;
}

message InsertVpnTunnelRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionVpnTunnel"
    }
  ];
  string request_id = 2;
  VpnTunnel vpn_tunnel_resource = 3;
}

message InsertVpnTunnelResponse {
  Operation operation = 1;
}

message ListVpnTunnelsRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectRegionVpnTunnel"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListVpnTunnelsResponse {
  VpnTunnelList vpn_tunnel_list = 1;
}

message DeleteZoneOperationRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneOperation"
    }
  ];
}

message DeleteZoneOperationResponse {
}

message GetZoneOperationRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneOperation"
    }
  ];
}

message GetZoneOperationResponse {
  Operation operation = 1;
}

message ListZoneOperationsRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneOperation"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListZoneOperationsResponse {
  OperationList operation_list = 1;
}

message WaitZoneOperationRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZoneOperationWait"
    }
  ];
}

message WaitZoneOperationResponse {
  Operation operation = 1;
}

message GetZoneRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZone"
    }
  ];
}

message GetZoneResponse {
  Zone zone = 1;
}

message ListZonesRequest {
  string resource_name = 1 [
    (google.api.resource_reference) = {
      type: "google.cloud.compute.v1/ProjectZone"
    }
  ];
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListZonesResponse {
  ZoneList zone_list = 1;
}

//
// Services
//
service AcceleratorTypes {
  rpc AggregatedList(AggregatedListAcceleratorTypesRequest) returns (AggregatedListAcceleratorTypesResponse) {
    option (google.api.http) = {
      get: "{project}/aggregated/acceleratorTypes"
    };
  }

  rpc Get(GetAcceleratorTypeRequest) returns (GetAcceleratorTypeResponse) {
    option (google.api.http) = {
      get: "{project}/zones/{zone}/acceleratorTypes/{acceleratorType}"
    };
  }

  rpc List(ListAcceleratorTypesRequest) returns (ListAcceleratorTypesResponse) {
    option (google.api.http) = {
      get: "{project}/zones/{zone}/acceleratorTypes"
    };
  }

}

service Addresses {
  rpc AggregatedList(AggregatedListAddressesRequest) returns (AggregatedListAddressesResponse) {
    option (google.api.http) = {
      get: "{project}/aggregated/addresses"
    };
  }

  rpc Delete(DeleteAddressRequest) returns (DeleteAddressResponse) {
    option (google.api.http) = {
      delete: "{project}/regions/{region}/addresses/{address}"
    };
  }

  rpc Get(GetAddressRequest) returns (GetAddressResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/addresses/{address}"
    };
  }

  rpc Insert(InsertAddressRequest) returns (InsertAddressResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/addresses"
      body: "address_resource"
    };
  }

  rpc List(ListAddressesRequest) returns (ListAddressesResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/addresses"
    };
  }

}

service Autoscalers {
  rpc AggregatedList(AggregatedListAutoscalersRequest) returns (AggregatedListAutoscalersResponse) {
    option (google.api.http) = {
      get: "{project}/aggregated/autoscalers"
    };
  }

  rpc Delete(DeleteAutoscalerRequest) returns (DeleteAutoscalerResponse) {
    option (google.api.http) = {
      delete: "{project}/zones/{zone}/autoscalers/{autoscaler}"
    };
  }

  rpc Get(GetAutoscalerRequest) returns (GetAutoscalerResponse) {
    option (google.api.http) = {
      get: "{project}/zones/{zone}/autoscalers/{autoscaler}"
    };
  }

  rpc Insert(InsertAutoscalerRequest) returns (InsertAutoscalerResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/autoscalers"
      body: "autoscaler_resource"
    };
  }

  rpc List(ListAutoscalersRequest) returns (ListAutoscalersResponse) {
    option (google.api.http) = {
      get: "{project}/zones/{zone}/autoscalers"
    };
  }

  rpc Patch(PatchAutoscalerRequest) returns (PatchAutoscalerResponse) {
    option (google.api.http) = {
      patch: "{project}/zones/{zone}/autoscalers"
      body: "autoscaler_resource"
    };
  }

  rpc Update(UpdateAutoscalerRequest) returns (UpdateAutoscalerResponse) {
    option (google.api.http) = {
      put: "{project}/zones/{zone}/autoscalers"
      body: "autoscaler_resource"
    };
  }

}

service BackendBuckets {
  rpc AddSignedUrlKey(AddSignedUrlKeyBackendBucketRequest) returns (AddSignedUrlKeyBackendBucketResponse) {
    option (google.api.http) = {
      post: "{project}/global/backendBuckets/{backendBucket}/addSignedUrlKey"
      body: "signed_url_key_resource"
    };
  }

  rpc Delete(DeleteBackendBucketRequest) returns (DeleteBackendBucketResponse) {
    option (google.api.http) = {
      delete: "{project}/global/backendBuckets/{backendBucket}"
    };
  }

  rpc DeleteSignedUrlKey(DeleteSignedUrlKeyBackendBucketRequest) returns (DeleteSignedUrlKeyBackendBucketResponse) {
    option (google.api.http) = {
      post: "{project}/global/backendBuckets/{backendBucket}/deleteSignedUrlKey"
    };
  }

  rpc Get(GetBackendBucketRequest) returns (GetBackendBucketResponse) {
    option (google.api.http) = {
      get: "{project}/global/backendBuckets/{backendBucket}"
    };
  }

  rpc Insert(InsertBackendBucketRequest) returns (InsertBackendBucketResponse) {
    option (google.api.http) = {
      post: "{project}/global/backendBuckets"
      body: "backend_bucket_resource"
    };
  }

  rpc List(ListBackendBucketsRequest) returns (ListBackendBucketsResponse) {
    option (google.api.http) = {
      get: "{project}/global/backendBuckets"
    };
  }

  rpc Patch(PatchBackendBucketRequest) returns (PatchBackendBucketResponse) {
    option (google.api.http) = {
      patch: "{project}/global/backendBuckets/{backendBucket}"
      body: "backend_bucket_resource"
    };
  }

  rpc Update(UpdateBackendBucketRequest) returns (UpdateBackendBucketResponse) {
    option (google.api.http) = {
      put: "{project}/global/backendBuckets/{backendBucket}"
      body: "backend_bucket_resource"
    };
  }

}

service BackendServices {
  rpc AddSignedUrlKey(AddSignedUrlKeyBackendServiceRequest) returns (AddSignedUrlKeyBackendServiceResponse) {
    option (google.api.http) = {
      post: "{project}/global/backendServices/{backendService}/addSignedUrlKey"
      body: "signed_url_key_resource"
    };
  }

  rpc AggregatedList(AggregatedListBackendServicesRequest) returns (AggregatedListBackendServicesResponse) {
    option (google.api.http) = {
      get: "{project}/aggregated/backendServices"
    };
  }

  rpc Delete(DeleteBackendServiceRequest) returns (DeleteBackendServiceResponse) {
    option (google.api.http) = {
      delete: "{project}/global/backendServices/{backendService}"
    };
  }

  rpc DeleteSignedUrlKey(DeleteSignedUrlKeyBackendServiceRequest) returns (DeleteSignedUrlKeyBackendServiceResponse) {
    option (google.api.http) = {
      post: "{project}/global/backendServices/{backendService}/deleteSignedUrlKey"
    };
  }

  rpc Get(GetBackendServiceRequest) returns (GetBackendServiceResponse) {
    option (google.api.http) = {
      get: "{project}/global/backendServices/{backendService}"
    };
  }

  rpc GetHealth(GetHealthBackendServiceRequest) returns (GetHealthBackendServiceResponse) {
    option (google.api.http) = {
      post: "{project}/global/backendServices/{backendService}/getHealth"
      body: "resource_group_reference_resource"
    };
  }

  rpc Insert(InsertBackendServiceRequest) returns (InsertBackendServiceResponse) {
    option (google.api.http) = {
      post: "{project}/global/backendServices"
      body: "backend_service_resource"
    };
  }

  rpc List(ListBackendServicesRequest) returns (ListBackendServicesResponse) {
    option (google.api.http) = {
      get: "{project}/global/backendServices"
    };
  }

  rpc Patch(PatchBackendServiceRequest) returns (PatchBackendServiceResponse) {
    option (google.api.http) = {
      patch: "{project}/global/backendServices/{backendService}"
      body: "backend_service_resource"
    };
  }

  rpc SetSecurityPolicy(SetSecurityPolicyBackendServiceRequest) returns (SetSecurityPolicyBackendServiceResponse) {
    option (google.api.http) = {
      post: "{project}/global/backendServices/{backendService}/setSecurityPolicy"
      body: "security_policy_reference_resource"
    };
  }

  rpc Update(UpdateBackendServiceRequest) returns (UpdateBackendServiceResponse) {
    option (google.api.http) = {
      put: "{project}/global/backendServices/{backendService}"
      body: "backend_service_resource"
    };
  }

}

service DiskTypes {
  rpc AggregatedList(AggregatedListDiskTypesRequest) returns (AggregatedListDiskTypesResponse) {
    option (google.api.http) = {
      get: "{project}/aggregated/diskTypes"
    };
  }

  rpc Get(GetDiskTypeRequest) returns (GetDiskTypeResponse) {
    option (google.api.http) = {
      get: "{project}/zones/{zone}/diskTypes/{diskType}"
    };
  }

  rpc List(ListDiskTypesRequest) returns (ListDiskTypesResponse) {
    option (google.api.http) = {
      get: "{project}/zones/{zone}/diskTypes"
    };
  }

}

service Disks {
  rpc AddResourcePolicies(AddResourcePoliciesDiskRequest) returns (AddResourcePoliciesDiskResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/disks/{disk}/addResourcePolicies"
      body: "disks_add_resource_policies_request_resource"
    };
  }

  rpc AggregatedList(AggregatedListDisksRequest) returns (AggregatedListDisksResponse) {
    option (google.api.http) = {
      get: "{project}/aggregated/disks"
    };
  }

  rpc CreateSnapshot(CreateSnapshotDiskRequest) returns (CreateSnapshotDiskResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/disks/{disk}/createSnapshot"
      body: "snapshot_resource"
    };
  }

  rpc Delete(DeleteDiskRequest) returns (DeleteDiskResponse) {
    option (google.api.http) = {
      delete: "{project}/zones/{zone}/disks/{disk}"
    };
  }

  rpc Get(GetDiskRequest) returns (GetDiskResponse) {
    option (google.api.http) = {
      get: "{project}/zones/{zone}/disks/{disk}"
    };
  }

  rpc GetIamPolicy(GetIamPolicyDiskRequest) returns (GetIamPolicyDiskResponse) {
    option (google.api.http) = {
      get: "{project}/zones/{zone}/disks/{resource}/getIamPolicy"
    };
  }

  rpc Insert(InsertDiskRequest) returns (InsertDiskResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/disks"
      body: "disk_resource"
    };
  }

  rpc List(ListDisksRequest) returns (ListDisksResponse) {
    option (google.api.http) = {
      get: "{project}/zones/{zone}/disks"
    };
  }

  rpc RemoveResourcePolicies(RemoveResourcePoliciesDiskRequest) returns (RemoveResourcePoliciesDiskResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/disks/{disk}/removeResourcePolicies"
      body: "disks_remove_resource_policies_request_resource"
    };
  }

  rpc Resize(ResizeDiskRequest) returns (ResizeDiskResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/disks/{disk}/resize"
      body: "disks_resize_request_resource"
    };
  }

  rpc SetIamPolicy(SetIamPolicyDiskRequest) returns (SetIamPolicyDiskResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/disks/{resource}/setIamPolicy"
      body: "zone_set_policy_request_resource"
    };
  }

  rpc SetLabels(SetLabelsDiskRequest) returns (SetLabelsDiskResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/disks/{resource}/setLabels"
      body: "zone_set_labels_request_resource"
    };
  }

  rpc TestIamPermissions(TestIamPermissionsDiskRequest) returns (TestIamPermissionsDiskResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/disks/{resource}/testIamPermissions"
      body: "test_permissions_request_resource"
    };
  }

}

service ExternalVpnGateways {
  rpc Delete(DeleteExternalVpnGatewayRequest) returns (DeleteExternalVpnGatewayResponse) {
    option (google.api.http) = {
      delete: "{project}/global/externalVpnGateways/{externalVpnGateway}"
    };
  }

  rpc Get(GetExternalVpnGatewayRequest) returns (GetExternalVpnGatewayResponse) {
    option (google.api.http) = {
      get: "{project}/global/externalVpnGateways/{externalVpnGateway}"
    };
  }

  rpc Insert(InsertExternalVpnGatewayRequest) returns (InsertExternalVpnGatewayResponse) {
    option (google.api.http) = {
      post: "{project}/global/externalVpnGateways"
      body: "external_vpn_gateway_resource"
    };
  }

  rpc List(ListExternalVpnGatewaysRequest) returns (ListExternalVpnGatewaysResponse) {
    option (google.api.http) = {
      get: "{project}/global/externalVpnGateways"
    };
  }

  rpc SetLabels(SetLabelsExternalVpnGatewayRequest) returns (SetLabelsExternalVpnGatewayResponse) {
    option (google.api.http) = {
      post: "{project}/global/externalVpnGateways/{resource}/setLabels"
      body: "global_set_labels_request_resource"
    };
  }

  rpc TestIamPermissions(TestIamPermissionsExternalVpnGatewayRequest) returns (TestIamPermissionsExternalVpnGatewayResponse) {
    option (google.api.http) = {
      post: "{project}/global/externalVpnGateways/{resource}/testIamPermissions"
      body: "test_permissions_request_resource"
    };
  }

}

service Firewalls {
  rpc Delete(DeleteFirewallRequest) returns (DeleteFirewallResponse) {
    option (google.api.http) = {
      delete: "{project}/global/firewalls/{firewall}"
    };
  }

  rpc Get(GetFirewallRequest) returns (GetFirewallResponse) {
    option (google.api.http) = {
      get: "{project}/global/firewalls/{firewall}"
    };
  }

  rpc Insert(InsertFirewallRequest) returns (InsertFirewallResponse) {
    option (google.api.http) = {
      post: "{project}/global/firewalls"
      body: "firewall_resource"
    };
  }

  rpc List(ListFirewallsRequest) returns (ListFirewallsResponse) {
    option (google.api.http) = {
      get: "{project}/global/firewalls"
    };
  }

  rpc Patch(PatchFirewallRequest) returns (PatchFirewallResponse) {
    option (google.api.http) = {
      patch: "{project}/global/firewalls/{firewall}"
      body: "firewall_resource"
    };
  }

  rpc Update(UpdateFirewallRequest) returns (UpdateFirewallResponse) {
    option (google.api.http) = {
      put: "{project}/global/firewalls/{firewall}"
      body: "firewall_resource"
    };
  }

}

service ForwardingRules {
  rpc AggregatedList(AggregatedListForwardingRulesRequest) returns (AggregatedListForwardingRulesResponse) {
    option (google.api.http) = {
      get: "{project}/aggregated/forwardingRules"
    };
  }

  rpc Delete(DeleteForwardingRuleRequest) returns (DeleteForwardingRuleResponse) {
    option (google.api.http) = {
      delete: "{project}/regions/{region}/forwardingRules/{forwardingRule}"
    };
  }

  rpc Get(GetForwardingRuleRequest) returns (GetForwardingRuleResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/forwardingRules/{forwardingRule}"
    };
  }

  rpc Insert(InsertForwardingRuleRequest) returns (InsertForwardingRuleResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/forwardingRules"
      body: "forwarding_rule_resource"
    };
  }

  rpc List(ListForwardingRulesRequest) returns (ListForwardingRulesResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/forwardingRules"
    };
  }

  rpc Patch(PatchForwardingRuleRequest) returns (PatchForwardingRuleResponse) {
    option (google.api.http) = {
      patch: "{project}/regions/{region}/forwardingRules/{forwardingRule}"
      body: "forwarding_rule_resource"
    };
  }

  rpc SetTarget(SetTargetForwardingRuleRequest) returns (SetTargetForwardingRuleResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/forwardingRules/{forwardingRule}/setTarget"
      body: "target_reference_resource"
    };
  }

}

service GlobalAddresses {
  rpc Delete(DeleteGlobalAddressRequest) returns (DeleteGlobalAddressResponse) {
    option (google.api.http) = {
      delete: "{project}/global/addresses/{address}"
    };
  }

  rpc Get(GetGlobalAddressRequest) returns (GetGlobalAddressResponse) {
    option (google.api.http) = {
      get: "{project}/global/addresses/{address}"
    };
  }

  rpc Insert(InsertGlobalAddressRequest) returns (InsertGlobalAddressResponse) {
    option (google.api.http) = {
      post: "{project}/global/addresses"
      body: "address_resource"
    };
  }

  rpc List(ListGlobalAddressesRequest) returns (ListGlobalAddressesResponse) {
    option (google.api.http) = {
      get: "{project}/global/addresses"
    };
  }

}

service GlobalForwardingRules {
  rpc Delete(DeleteGlobalForwardingRuleRequest) returns (DeleteGlobalForwardingRuleResponse) {
    option (google.api.http) = {
      delete: "{project}/global/forwardingRules/{forwardingRule}"
    };
  }

  rpc Get(GetGlobalForwardingRuleRequest) returns (GetGlobalForwardingRuleResponse) {
    option (google.api.http) = {
      get: "{project}/global/forwardingRules/{forwardingRule}"
    };
  }

  rpc Insert(InsertGlobalForwardingRuleRequest) returns (InsertGlobalForwardingRuleResponse) {
    option (google.api.http) = {
      post: "{project}/global/forwardingRules"
      body: "forwarding_rule_resource"
    };
  }

  rpc List(ListGlobalForwardingRulesRequest) returns (ListGlobalForwardingRulesResponse) {
    option (google.api.http) = {
      get: "{project}/global/forwardingRules"
    };
  }

  rpc Patch(PatchGlobalForwardingRuleRequest) returns (PatchGlobalForwardingRuleResponse) {
    option (google.api.http) = {
      patch: "{project}/global/forwardingRules/{forwardingRule}"
      body: "forwarding_rule_resource"
    };
  }

  rpc SetTarget(SetTargetGlobalForwardingRuleRequest) returns (SetTargetGlobalForwardingRuleResponse) {
    option (google.api.http) = {
      post: "{project}/global/forwardingRules/{forwardingRule}/setTarget"
      body: "target_reference_resource"
    };
  }

}

service GlobalNetworkEndpointGroups {
  rpc AttachNetworkEndpoints(AttachNetworkEndpointsGlobalNetworkEndpointGroupRequest) returns (AttachNetworkEndpointsGlobalNetworkEndpointGroupResponse) {
    option (google.api.http) = {
      post: "{project}/global/networkEndpointGroups/{networkEndpointGroup}/attachNetworkEndpoints"
      body: "global_network_endpoint_groups_attach_endpoints_request_resource"
    };
  }

  rpc Delete(DeleteGlobalNetworkEndpointGroupRequest) returns (DeleteGlobalNetworkEndpointGroupResponse) {
    option (google.api.http) = {
      delete: "{project}/global/networkEndpointGroups/{networkEndpointGroup}"
    };
  }

  rpc DetachNetworkEndpoints(DetachNetworkEndpointsGlobalNetworkEndpointGroupRequest) returns (DetachNetworkEndpointsGlobalNetworkEndpointGroupResponse) {
    option (google.api.http) = {
      post: "{project}/global/networkEndpointGroups/{networkEndpointGroup}/detachNetworkEndpoints"
      body: "global_network_endpoint_groups_detach_endpoints_request_resource"
    };
  }

  rpc Get(GetGlobalNetworkEndpointGroupRequest) returns (GetGlobalNetworkEndpointGroupResponse) {
    option (google.api.http) = {
      get: "{project}/global/networkEndpointGroups/{networkEndpointGroup}"
    };
  }

  rpc Insert(InsertGlobalNetworkEndpointGroupRequest) returns (InsertGlobalNetworkEndpointGroupResponse) {
    option (google.api.http) = {
      post: "{project}/global/networkEndpointGroups"
      body: "network_endpoint_group_resource"
    };
  }

  rpc List(ListGlobalNetworkEndpointGroupsRequest) returns (ListGlobalNetworkEndpointGroupsResponse) {
    option (google.api.http) = {
      get: "{project}/global/networkEndpointGroups"
    };
  }

  rpc ListNetworkEndpoints(ListNetworkEndpointsGlobalNetworkEndpointGroupsRequest) returns (ListNetworkEndpointsGlobalNetworkEndpointGroupsResponse) {
    option (google.api.http) = {
      post: "{project}/global/networkEndpointGroups/{networkEndpointGroup}/listNetworkEndpoints"
    };
  }

}

service GlobalOperations {
  rpc AggregatedList(AggregatedListGlobalOperationsRequest) returns (AggregatedListGlobalOperationsResponse) {
    option (google.api.http) = {
      get: "{project}/aggregated/operations"
    };
  }

  rpc Delete(DeleteGlobalOperationRequest) returns (DeleteGlobalOperationResponse) {
    option (google.api.http) = {
      delete: "{project}/global/operations/{operation}"
    };
  }

  rpc Get(GetGlobalOperationRequest) returns (GetGlobalOperationResponse) {
    option (google.api.http) = {
      get: "{project}/global/operations/{operation}"
    };
  }

  rpc List(ListGlobalOperationsRequest) returns (ListGlobalOperationsResponse) {
    option (google.api.http) = {
      get: "{project}/global/operations"
    };
  }

  rpc Wait(WaitGlobalOperationRequest) returns (WaitGlobalOperationResponse) {
    option (google.api.http) = {
      post: "{project}/global/operations/{operation}/wait"
    };
  }

}

service HealthChecks {
  rpc AggregatedList(AggregatedListHealthChecksRequest) returns (AggregatedListHealthChecksResponse) {
    option (google.api.http) = {
      get: "{project}/aggregated/healthChecks"
    };
  }

  rpc Delete(DeleteHealthCheckRequest) returns (DeleteHealthCheckResponse) {
    option (google.api.http) = {
      delete: "{project}/global/healthChecks/{healthCheck}"
    };
  }

  rpc Get(GetHealthCheckRequest) returns (GetHealthCheckResponse) {
    option (google.api.http) = {
      get: "{project}/global/healthChecks/{healthCheck}"
    };
  }

  rpc Insert(InsertHealthCheckRequest) returns (InsertHealthCheckResponse) {
    option (google.api.http) = {
      post: "{project}/global/healthChecks"
      body: "health_check_resource"
    };
  }

  rpc List(ListHealthChecksRequest) returns (ListHealthChecksResponse) {
    option (google.api.http) = {
      get: "{project}/global/healthChecks"
    };
  }

  rpc Patch(PatchHealthCheckRequest) returns (PatchHealthCheckResponse) {
    option (google.api.http) = {
      patch: "{project}/global/healthChecks/{healthCheck}"
      body: "health_check_resource"
    };
  }

  rpc Update(UpdateHealthCheckRequest) returns (UpdateHealthCheckResponse) {
    option (google.api.http) = {
      put: "{project}/global/healthChecks/{healthCheck}"
      body: "health_check_resource"
    };
  }

}

service HttpHealthChecks {
  rpc Delete(DeleteHttpHealthCheckRequest) returns (DeleteHttpHealthCheckResponse) {
    option (google.api.http) = {
      delete: "{project}/global/httpHealthChecks/{httpHealthCheck}"
    };
  }

  rpc Get(GetHttpHealthCheckRequest) returns (GetHttpHealthCheckResponse) {
    option (google.api.http) = {
      get: "{project}/global/httpHealthChecks/{httpHealthCheck}"
    };
  }

  rpc Insert(InsertHttpHealthCheckRequest) returns (InsertHttpHealthCheckResponse) {
    option (google.api.http) = {
      post: "{project}/global/httpHealthChecks"
      body: "http_health_check_resource"
    };
  }

  rpc List(ListHttpHealthChecksRequest) returns (ListHttpHealthChecksResponse) {
    option (google.api.http) = {
      get: "{project}/global/httpHealthChecks"
    };
  }

  rpc Patch(PatchHttpHealthCheckRequest) returns (PatchHttpHealthCheckResponse) {
    option (google.api.http) = {
      patch: "{project}/global/httpHealthChecks/{httpHealthCheck}"
      body: "http_health_check_resource"
    };
  }

  rpc Update(UpdateHttpHealthCheckRequest) returns (UpdateHttpHealthCheckResponse) {
    option (google.api.http) = {
      put: "{project}/global/httpHealthChecks/{httpHealthCheck}"
      body: "http_health_check_resource"
    };
  }

}

service HttpsHealthChecks {
  rpc Delete(DeleteHttpsHealthCheckRequest) returns (DeleteHttpsHealthCheckResponse) {
    option (google.api.http) = {
      delete: "{project}/global/httpsHealthChecks/{httpsHealthCheck}"
    };
  }

  rpc Get(GetHttpsHealthCheckRequest) returns (GetHttpsHealthCheckResponse) {
    option (google.api.http) = {
      get: "{project}/global/httpsHealthChecks/{httpsHealthCheck}"
    };
  }

  rpc Insert(InsertHttpsHealthCheckRequest) returns (InsertHttpsHealthCheckResponse) {
    option (google.api.http) = {
      post: "{project}/global/httpsHealthChecks"
      body: "https_health_check_resource"
    };
  }

  rpc List(ListHttpsHealthChecksRequest) returns (ListHttpsHealthChecksResponse) {
    option (google.api.http) = {
      get: "{project}/global/httpsHealthChecks"
    };
  }

  rpc Patch(PatchHttpsHealthCheckRequest) returns (PatchHttpsHealthCheckResponse) {
    option (google.api.http) = {
      patch: "{project}/global/httpsHealthChecks/{httpsHealthCheck}"
      body: "https_health_check_resource"
    };
  }

  rpc Update(UpdateHttpsHealthCheckRequest) returns (UpdateHttpsHealthCheckResponse) {
    option (google.api.http) = {
      put: "{project}/global/httpsHealthChecks/{httpsHealthCheck}"
      body: "https_health_check_resource"
    };
  }

}

service Images {
  rpc Delete(DeleteImageRequest) returns (DeleteImageResponse) {
    option (google.api.http) = {
      delete: "{project}/global/images/{image}"
    };
  }

  rpc Deprecate(DeprecateImageRequest) returns (DeprecateImageResponse) {
    option (google.api.http) = {
      post: "{project}/global/images/{image}/deprecate"
      body: "deprecation_status_resource"
    };
  }

  rpc Get(GetImageRequest) returns (GetImageResponse) {
    option (google.api.http) = {
      get: "{project}/global/images/{image}"
    };
  }

  rpc GetFromFamily(GetFromFamilyImageRequest) returns (GetFromFamilyImageResponse) {
    option (google.api.http) = {
      get: "{project}/global/images/family/{family}"
    };
  }

  rpc GetIamPolicy(GetIamPolicyImageRequest) returns (GetIamPolicyImageResponse) {
    option (google.api.http) = {
      get: "{project}/global/images/{resource}/getIamPolicy"
    };
  }

  rpc Insert(InsertImageRequest) returns (InsertImageResponse) {
    option (google.api.http) = {
      post: "{project}/global/images"
      body: "image_resource"
    };
  }

  rpc List(ListImagesRequest) returns (ListImagesResponse) {
    option (google.api.http) = {
      get: "{project}/global/images"
    };
  }

  rpc SetIamPolicy(SetIamPolicyImageRequest) returns (SetIamPolicyImageResponse) {
    option (google.api.http) = {
      post: "{project}/global/images/{resource}/setIamPolicy"
      body: "global_set_policy_request_resource"
    };
  }

  rpc SetLabels(SetLabelsImageRequest) returns (SetLabelsImageResponse) {
    option (google.api.http) = {
      post: "{project}/global/images/{resource}/setLabels"
      body: "global_set_labels_request_resource"
    };
  }

  rpc TestIamPermissions(TestIamPermissionsImageRequest) returns (TestIamPermissionsImageResponse) {
    option (google.api.http) = {
      post: "{project}/global/images/{resource}/testIamPermissions"
      body: "test_permissions_request_resource"
    };
  }

}

service InstanceGroupManagers {
  rpc AbandonInstances(AbandonInstancesInstanceGroupManagerRequest) returns (AbandonInstancesInstanceGroupManagerResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/abandonInstances"
      body: "instance_group_managers_abandon_instances_request_resource"
    };
  }

  rpc AggregatedList(AggregatedListInstanceGroupManagersRequest) returns (AggregatedListInstanceGroupManagersResponse) {
    option (google.api.http) = {
      get: "{project}/aggregated/instanceGroupManagers"
    };
  }

  rpc ApplyUpdatesToInstances(ApplyUpdatesToInstancesInstanceGroupManagerRequest) returns (ApplyUpdatesToInstancesInstanceGroupManagerResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/applyUpdatesToInstances"
      body: "instance_group_managers_apply_updates_request_resource"
    };
  }

  rpc CreateInstances(CreateInstancesInstanceGroupManagerRequest) returns (CreateInstancesInstanceGroupManagerResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/createInstances"
      body: "instance_group_managers_create_instances_request_resource"
    };
  }

  rpc Delete(DeleteInstanceGroupManagerRequest) returns (DeleteInstanceGroupManagerResponse) {
    option (google.api.http) = {
      delete: "{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}"
    };
  }

  rpc DeleteInstances(DeleteInstancesInstanceGroupManagerRequest) returns (DeleteInstancesInstanceGroupManagerResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/deleteInstances"
      body: "instance_group_managers_delete_instances_request_resource"
    };
  }

  rpc Get(GetInstanceGroupManagerRequest) returns (GetInstanceGroupManagerResponse) {
    option (google.api.http) = {
      get: "{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}"
    };
  }

  rpc Insert(InsertInstanceGroupManagerRequest) returns (InsertInstanceGroupManagerResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/instanceGroupManagers"
      body: "instance_group_manager_resource"
    };
  }

  rpc List(ListInstanceGroupManagersRequest) returns (ListInstanceGroupManagersResponse) {
    option (google.api.http) = {
      get: "{project}/zones/{zone}/instanceGroupManagers"
    };
  }

  rpc ListErrors(ListErrorsInstanceGroupManagersRequest) returns (ListErrorsInstanceGroupManagersResponse) {
    option (google.api.http) = {
      get: "{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listErrors"
    };
  }

  rpc ListManagedInstances(ListManagedInstancesInstanceGroupManagersRequest) returns (ListManagedInstancesInstanceGroupManagersResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances"
    };
  }

  rpc Patch(PatchInstanceGroupManagerRequest) returns (PatchInstanceGroupManagerResponse) {
    option (google.api.http) = {
      patch: "{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}"
      body: "instance_group_manager_resource"
    };
  }

  rpc RecreateInstances(RecreateInstancesInstanceGroupManagerRequest) returns (RecreateInstancesInstanceGroupManagerResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/recreateInstances"
      body: "instance_group_managers_recreate_instances_request_resource"
    };
  }

  rpc Resize(ResizeInstanceGroupManagerRequest) returns (ResizeInstanceGroupManagerResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize"
    };
  }

  rpc SetInstanceTemplate(SetInstanceTemplateInstanceGroupManagerRequest) returns (SetInstanceTemplateInstanceGroupManagerResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate"
      body: "instance_group_managers_set_instance_template_request_resource"
    };
  }

  rpc SetTargetPools(SetTargetPoolsInstanceGroupManagerRequest) returns (SetTargetPoolsInstanceGroupManagerResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setTargetPools"
      body: "instance_group_managers_set_target_pools_request_resource"
    };
  }

}

service InstanceGroups {
  rpc AddInstances(AddInstancesInstanceGroupRequest) returns (AddInstancesInstanceGroupResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/instanceGroups/{instanceGroup}/addInstances"
      body: "instance_groups_add_instances_request_resource"
    };
  }

  rpc AggregatedList(AggregatedListInstanceGroupsRequest) returns (AggregatedListInstanceGroupsResponse) {
    option (google.api.http) = {
      get: "{project}/aggregated/instanceGroups"
    };
  }

  rpc Delete(DeleteInstanceGroupRequest) returns (DeleteInstanceGroupResponse) {
    option (google.api.http) = {
      delete: "{project}/zones/{zone}/instanceGroups/{instanceGroup}"
    };
  }

  rpc Get(GetInstanceGroupRequest) returns (GetInstanceGroupResponse) {
    option (google.api.http) = {
      get: "{project}/zones/{zone}/instanceGroups/{instanceGroup}"
    };
  }

  rpc Insert(InsertInstanceGroupRequest) returns (InsertInstanceGroupResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/instanceGroups"
      body: "instance_group_resource"
    };
  }

  rpc List(ListInstanceGroupsRequest) returns (ListInstanceGroupsResponse) {
    option (google.api.http) = {
      get: "{project}/zones/{zone}/instanceGroups"
    };
  }

  rpc ListInstances(ListInstancesInstanceGroupsRequest) returns (ListInstancesInstanceGroupsResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/instanceGroups/{instanceGroup}/listInstances"
      body: "instance_groups_list_instances_request_resource"
    };
  }

  rpc RemoveInstances(RemoveInstancesInstanceGroupRequest) returns (RemoveInstancesInstanceGroupResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/instanceGroups/{instanceGroup}/removeInstances"
      body: "instance_groups_remove_instances_request_resource"
    };
  }

  rpc SetNamedPorts(SetNamedPortsInstanceGroupRequest) returns (SetNamedPortsInstanceGroupResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/instanceGroups/{instanceGroup}/setNamedPorts"
      body: "instance_groups_set_named_ports_request_resource"
    };
  }

}

service InstanceTemplates {
  rpc Delete(DeleteInstanceTemplateRequest) returns (DeleteInstanceTemplateResponse) {
    option (google.api.http) = {
      delete: "{project}/global/instanceTemplates/{instanceTemplate}"
    };
  }

  rpc Get(GetInstanceTemplateRequest) returns (GetInstanceTemplateResponse) {
    option (google.api.http) = {
      get: "{project}/global/instanceTemplates/{instanceTemplate}"
    };
  }

  rpc GetIamPolicy(GetIamPolicyInstanceTemplateRequest) returns (GetIamPolicyInstanceTemplateResponse) {
    option (google.api.http) = {
      get: "{project}/global/instanceTemplates/{resource}/getIamPolicy"
    };
  }

  rpc Insert(InsertInstanceTemplateRequest) returns (InsertInstanceTemplateResponse) {
    option (google.api.http) = {
      post: "{project}/global/instanceTemplates"
      body: "instance_template_resource"
    };
  }

  rpc List(ListInstanceTemplatesRequest) returns (ListInstanceTemplatesResponse) {
    option (google.api.http) = {
      get: "{project}/global/instanceTemplates"
    };
  }

  rpc SetIamPolicy(SetIamPolicyInstanceTemplateRequest) returns (SetIamPolicyInstanceTemplateResponse) {
    option (google.api.http) = {
      post: "{project}/global/instanceTemplates/{resource}/setIamPolicy"
      body: "global_set_policy_request_resource"
    };
  }

  rpc TestIamPermissions(TestIamPermissionsInstanceTemplateRequest) returns (TestIamPermissionsInstanceTemplateResponse) {
    option (google.api.http) = {
      post: "{project}/global/instanceTemplates/{resource}/testIamPermissions"
      body: "test_permissions_request_resource"
    };
  }

}

service Instances {
  rpc AddAccessConfig(AddAccessConfigInstanceRequest) returns (AddAccessConfigInstanceResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/instances/{instance}/addAccessConfig"
      body: "access_config_resource"
    };
  }

  rpc AddResourcePolicies(AddResourcePoliciesInstanceRequest) returns (AddResourcePoliciesInstanceResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/instances/{instance}/addResourcePolicies"
      body: "instances_add_resource_policies_request_resource"
    };
  }

  rpc AggregatedList(AggregatedListInstancesRequest) returns (AggregatedListInstancesResponse) {
    option (google.api.http) = {
      get: "{project}/aggregated/instances"
    };
  }

  rpc AttachDisk(AttachDiskInstanceRequest) returns (AttachDiskInstanceResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/instances/{instance}/attachDisk"
      body: "attached_disk_resource"
    };
  }

  rpc Delete(DeleteInstanceRequest) returns (DeleteInstanceResponse) {
    option (google.api.http) = {
      delete: "{project}/zones/{zone}/instances/{instance}"
    };
  }

  rpc DeleteAccessConfig(DeleteAccessConfigInstanceRequest) returns (DeleteAccessConfigInstanceResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/instances/{instance}/deleteAccessConfig"
    };
  }

  rpc DetachDisk(DetachDiskInstanceRequest) returns (DetachDiskInstanceResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/instances/{instance}/detachDisk"
    };
  }

  rpc Get(GetInstanceRequest) returns (GetInstanceResponse) {
    option (google.api.http) = {
      get: "{project}/zones/{zone}/instances/{instance}"
    };
  }

  rpc GetGuestAttributes(GetGuestAttributesInstanceRequest) returns (GetGuestAttributesInstanceResponse) {
    option (google.api.http) = {
      get: "{project}/zones/{zone}/instances/{instance}/getGuestAttributes"
    };
  }

  rpc GetIamPolicy(GetIamPolicyInstanceRequest) returns (GetIamPolicyInstanceResponse) {
    option (google.api.http) = {
      get: "{project}/zones/{zone}/instances/{resource}/getIamPolicy"
    };
  }

  rpc GetSerialPortOutput(GetSerialPortOutputInstanceRequest) returns (GetSerialPortOutputInstanceResponse) {
    option (google.api.http) = {
      get: "{project}/zones/{zone}/instances/{instance}/serialPort"
    };
  }

  rpc GetShieldedInstanceIdentity(GetShieldedInstanceIdentityInstanceRequest) returns (GetShieldedInstanceIdentityInstanceResponse) {
    option (google.api.http) = {
      get: "{project}/zones/{zone}/instances/{instance}/getShieldedInstanceIdentity"
    };
  }

  rpc Insert(InsertInstanceRequest) returns (InsertInstanceResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/instances"
      body: "instance_resource"
    };
  }

  rpc List(ListInstancesRequest) returns (ListInstancesResponse) {
    option (google.api.http) = {
      get: "{project}/zones/{zone}/instances"
    };
  }

  rpc ListReferrers(ListReferrersInstancesRequest) returns (ListReferrersInstancesResponse) {
    option (google.api.http) = {
      get: "{project}/zones/{zone}/instances/{instance}/referrers"
    };
  }

  rpc RemoveResourcePolicies(RemoveResourcePoliciesInstanceRequest) returns (RemoveResourcePoliciesInstanceResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/instances/{instance}/removeResourcePolicies"
      body: "instances_remove_resource_policies_request_resource"
    };
  }

  rpc Reset(ResetInstanceRequest) returns (ResetInstanceResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/instances/{instance}/reset"
    };
  }

  rpc SetDeletionProtection(SetDeletionProtectionInstanceRequest) returns (SetDeletionProtectionInstanceResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/instances/{resource}/setDeletionProtection"
    };
  }

  rpc SetDiskAutoDelete(SetDiskAutoDeleteInstanceRequest) returns (SetDiskAutoDeleteInstanceResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/instances/{instance}/setDiskAutoDelete"
    };
  }

  rpc SetIamPolicy(SetIamPolicyInstanceRequest) returns (SetIamPolicyInstanceResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/instances/{resource}/setIamPolicy"
      body: "zone_set_policy_request_resource"
    };
  }

  rpc SetLabels(SetLabelsInstanceRequest) returns (SetLabelsInstanceResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/instances/{instance}/setLabels"
      body: "instances_set_labels_request_resource"
    };
  }

  rpc SetMachineResources(SetMachineResourcesInstanceRequest) returns (SetMachineResourcesInstanceResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/instances/{instance}/setMachineResources"
      body: "instances_set_machine_resources_request_resource"
    };
  }

  rpc SetMachineType(SetMachineTypeInstanceRequest) returns (SetMachineTypeInstanceResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/instances/{instance}/setMachineType"
      body: "instances_set_machine_type_request_resource"
    };
  }

  rpc SetMetadata(SetMetadataInstanceRequest) returns (SetMetadataInstanceResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/instances/{instance}/setMetadata"
      body: "metadata_resource"
    };
  }

  rpc SetMinCpuPlatform(SetMinCpuPlatformInstanceRequest) returns (SetMinCpuPlatformInstanceResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/instances/{instance}/setMinCpuPlatform"
      body: "instances_set_min_cpu_platform_request_resource"
    };
  }

  rpc SetScheduling(SetSchedulingInstanceRequest) returns (SetSchedulingInstanceResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/instances/{instance}/setScheduling"
      body: "scheduling_resource"
    };
  }

  rpc SetServiceAccount(SetServiceAccountInstanceRequest) returns (SetServiceAccountInstanceResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/instances/{instance}/setServiceAccount"
      body: "instances_set_service_account_request_resource"
    };
  }

  rpc SetShieldedInstanceIntegrityPolicy(SetShieldedInstanceIntegrityPolicyInstanceRequest) returns (SetShieldedInstanceIntegrityPolicyInstanceResponse) {
    option (google.api.http) = {
      patch: "{project}/zones/{zone}/instances/{instance}/setShieldedInstanceIntegrityPolicy"
      body: "shielded_instance_integrity_policy_resource"
    };
  }

  rpc SetTags(SetTagsInstanceRequest) returns (SetTagsInstanceResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/instances/{instance}/setTags"
      body: "tags_resource"
    };
  }

  rpc SimulateMaintenanceEvent(SimulateMaintenanceEventInstanceRequest) returns (SimulateMaintenanceEventInstanceResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/instances/{instance}/simulateMaintenanceEvent"
    };
  }

  rpc Start(StartInstanceRequest) returns (StartInstanceResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/instances/{instance}/start"
    };
  }

  rpc StartWithEncryptionKey(StartWithEncryptionKeyInstanceRequest) returns (StartWithEncryptionKeyInstanceResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/instances/{instance}/startWithEncryptionKey"
      body: "instances_start_with_encryption_key_request_resource"
    };
  }

  rpc Stop(StopInstanceRequest) returns (StopInstanceResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/instances/{instance}/stop"
    };
  }

  rpc TestIamPermissions(TestIamPermissionsInstanceRequest) returns (TestIamPermissionsInstanceResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/instances/{resource}/testIamPermissions"
      body: "test_permissions_request_resource"
    };
  }

  rpc Update(UpdateInstanceRequest) returns (UpdateInstanceResponse) {
    option (google.api.http) = {
      put: "{project}/zones/{zone}/instances/{instance}"
      body: "instance_resource"
    };
  }

  rpc UpdateAccessConfig(UpdateAccessConfigInstanceRequest) returns (UpdateAccessConfigInstanceResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/instances/{instance}/updateAccessConfig"
      body: "access_config_resource"
    };
  }

  rpc UpdateDisplayDevice(UpdateDisplayDeviceInstanceRequest) returns (UpdateDisplayDeviceInstanceResponse) {
    option (google.api.http) = {
      patch: "{project}/zones/{zone}/instances/{instance}/updateDisplayDevice"
      body: "display_device_resource"
    };
  }

  rpc UpdateNetworkInterface(UpdateNetworkInterfaceInstanceRequest) returns (UpdateNetworkInterfaceInstanceResponse) {
    option (google.api.http) = {
      patch: "{project}/zones/{zone}/instances/{instance}/updateNetworkInterface"
      body: "network_interface_resource"
    };
  }

  rpc UpdateShieldedInstanceConfig(UpdateShieldedInstanceConfigInstanceRequest) returns (UpdateShieldedInstanceConfigInstanceResponse) {
    option (google.api.http) = {
      patch: "{project}/zones/{zone}/instances/{instance}/updateShieldedInstanceConfig"
      body: "shielded_instance_config_resource"
    };
  }

}

service InterconnectAttachments {
  rpc AggregatedList(AggregatedListInterconnectAttachmentsRequest) returns (AggregatedListInterconnectAttachmentsResponse) {
    option (google.api.http) = {
      get: "{project}/aggregated/interconnectAttachments"
    };
  }

  rpc Delete(DeleteInterconnectAttachmentRequest) returns (DeleteInterconnectAttachmentResponse) {
    option (google.api.http) = {
      delete: "{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}"
    };
  }

  rpc Get(GetInterconnectAttachmentRequest) returns (GetInterconnectAttachmentResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}"
    };
  }

  rpc Insert(InsertInterconnectAttachmentRequest) returns (InsertInterconnectAttachmentResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/interconnectAttachments"
      body: "interconnect_attachment_resource"
    };
  }

  rpc List(ListInterconnectAttachmentsRequest) returns (ListInterconnectAttachmentsResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/interconnectAttachments"
    };
  }

  rpc Patch(PatchInterconnectAttachmentRequest) returns (PatchInterconnectAttachmentResponse) {
    option (google.api.http) = {
      patch: "{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}"
      body: "interconnect_attachment_resource"
    };
  }

}

service InterconnectLocations {
  rpc Get(GetInterconnectLocationRequest) returns (GetInterconnectLocationResponse) {
    option (google.api.http) = {
      get: "{project}/global/interconnectLocations/{interconnectLocation}"
    };
  }

  rpc List(ListInterconnectLocationsRequest) returns (ListInterconnectLocationsResponse) {
    option (google.api.http) = {
      get: "{project}/global/interconnectLocations"
    };
  }

}

service Interconnects {
  rpc Delete(DeleteInterconnectRequest) returns (DeleteInterconnectResponse) {
    option (google.api.http) = {
      delete: "{project}/global/interconnects/{interconnect}"
    };
  }

  rpc Get(GetInterconnectRequest) returns (GetInterconnectResponse) {
    option (google.api.http) = {
      get: "{project}/global/interconnects/{interconnect}"
    };
  }

  rpc GetDiagnostics(GetDiagnosticsInterconnectRequest) returns (GetDiagnosticsInterconnectResponse) {
    option (google.api.http) = {
      get: "{project}/global/interconnects/{interconnect}/getDiagnostics"
    };
  }

  rpc Insert(InsertInterconnectRequest) returns (InsertInterconnectResponse) {
    option (google.api.http) = {
      post: "{project}/global/interconnects"
      body: "interconnect_resource"
    };
  }

  rpc List(ListInterconnectsRequest) returns (ListInterconnectsResponse) {
    option (google.api.http) = {
      get: "{project}/global/interconnects"
    };
  }

  rpc Patch(PatchInterconnectRequest) returns (PatchInterconnectResponse) {
    option (google.api.http) = {
      patch: "{project}/global/interconnects/{interconnect}"
      body: "interconnect_resource"
    };
  }

}

service LicenseCodes {
  rpc Get(GetLicenseCodeRequest) returns (GetLicenseCodeResponse) {
    option (google.api.http) = {
      get: "{project}/global/licenseCodes/{licenseCode}"
    };
  }

  rpc TestIamPermissions(TestIamPermissionsLicenseCodeRequest) returns (TestIamPermissionsLicenseCodeResponse) {
    option (google.api.http) = {
      post: "{project}/global/licenseCodes/{resource}/testIamPermissions"
      body: "test_permissions_request_resource"
    };
  }

}

service Licenses {
  rpc Delete(DeleteLicenseRequest) returns (DeleteLicenseResponse) {
    option (google.api.http) = {
      delete: "{project}/global/licenses/{license}"
    };
  }

  rpc Get(GetLicenseRequest) returns (GetLicenseResponse) {
    option (google.api.http) = {
      get: "{project}/global/licenses/{license}"
    };
  }

  rpc GetIamPolicy(GetIamPolicyLicenseRequest) returns (GetIamPolicyLicenseResponse) {
    option (google.api.http) = {
      get: "{project}/global/licenses/{resource}/getIamPolicy"
    };
  }

  rpc Insert(InsertLicenseRequest) returns (InsertLicenseResponse) {
    option (google.api.http) = {
      post: "{project}/global/licenses"
      body: "license_resource"
    };
  }

  rpc List(ListLicensesRequest) returns (ListLicensesResponse) {
    option (google.api.http) = {
      get: "{project}/global/licenses"
    };
  }

  rpc SetIamPolicy(SetIamPolicyLicenseRequest) returns (SetIamPolicyLicenseResponse) {
    option (google.api.http) = {
      post: "{project}/global/licenses/{resource}/setIamPolicy"
      body: "global_set_policy_request_resource"
    };
  }

  rpc TestIamPermissions(TestIamPermissionsLicenseRequest) returns (TestIamPermissionsLicenseResponse) {
    option (google.api.http) = {
      post: "{project}/global/licenses/{resource}/testIamPermissions"
      body: "test_permissions_request_resource"
    };
  }

}

service MachineTypes {
  rpc AggregatedList(AggregatedListMachineTypesRequest) returns (AggregatedListMachineTypesResponse) {
    option (google.api.http) = {
      get: "{project}/aggregated/machineTypes"
    };
  }

  rpc Get(GetMachineTypeRequest) returns (GetMachineTypeResponse) {
    option (google.api.http) = {
      get: "{project}/zones/{zone}/machineTypes/{machineType}"
    };
  }

  rpc List(ListMachineTypesRequest) returns (ListMachineTypesResponse) {
    option (google.api.http) = {
      get: "{project}/zones/{zone}/machineTypes"
    };
  }

}

service NetworkEndpointGroups {
  rpc AggregatedList(AggregatedListNetworkEndpointGroupsRequest) returns (AggregatedListNetworkEndpointGroupsResponse) {
    option (google.api.http) = {
      get: "{project}/aggregated/networkEndpointGroups"
    };
  }

  rpc AttachNetworkEndpoints(AttachNetworkEndpointsNetworkEndpointGroupRequest) returns (AttachNetworkEndpointsNetworkEndpointGroupResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/attachNetworkEndpoints"
      body: "network_endpoint_groups_attach_endpoints_request_resource"
    };
  }

  rpc Delete(DeleteNetworkEndpointGroupRequest) returns (DeleteNetworkEndpointGroupResponse) {
    option (google.api.http) = {
      delete: "{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}"
    };
  }

  rpc DetachNetworkEndpoints(DetachNetworkEndpointsNetworkEndpointGroupRequest) returns (DetachNetworkEndpointsNetworkEndpointGroupResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/detachNetworkEndpoints"
      body: "network_endpoint_groups_detach_endpoints_request_resource"
    };
  }

  rpc Get(GetNetworkEndpointGroupRequest) returns (GetNetworkEndpointGroupResponse) {
    option (google.api.http) = {
      get: "{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}"
    };
  }

  rpc Insert(InsertNetworkEndpointGroupRequest) returns (InsertNetworkEndpointGroupResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/networkEndpointGroups"
      body: "network_endpoint_group_resource"
    };
  }

  rpc List(ListNetworkEndpointGroupsRequest) returns (ListNetworkEndpointGroupsResponse) {
    option (google.api.http) = {
      get: "{project}/zones/{zone}/networkEndpointGroups"
    };
  }

  rpc ListNetworkEndpoints(ListNetworkEndpointsNetworkEndpointGroupsRequest) returns (ListNetworkEndpointsNetworkEndpointGroupsResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/listNetworkEndpoints"
      body: "network_endpoint_groups_list_endpoints_request_resource"
    };
  }

  rpc TestIamPermissions(TestIamPermissionsNetworkEndpointGroupRequest) returns (TestIamPermissionsNetworkEndpointGroupResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/networkEndpointGroups/{resource}/testIamPermissions"
      body: "test_permissions_request_resource"
    };
  }

}

service Networks {
  rpc AddPeering(AddPeeringNetworkRequest) returns (AddPeeringNetworkResponse) {
    option (google.api.http) = {
      post: "{project}/global/networks/{network}/addPeering"
      body: "networks_add_peering_request_resource"
    };
  }

  rpc Delete(DeleteNetworkRequest) returns (DeleteNetworkResponse) {
    option (google.api.http) = {
      delete: "{project}/global/networks/{network}"
    };
  }

  rpc Get(GetNetworkRequest) returns (GetNetworkResponse) {
    option (google.api.http) = {
      get: "{project}/global/networks/{network}"
    };
  }

  rpc Insert(InsertNetworkRequest) returns (InsertNetworkResponse) {
    option (google.api.http) = {
      post: "{project}/global/networks"
      body: "network_resource"
    };
  }

  rpc List(ListNetworksRequest) returns (ListNetworksResponse) {
    option (google.api.http) = {
      get: "{project}/global/networks"
    };
  }

  rpc ListPeeringRoutes(ListPeeringRoutesNetworksRequest) returns (ListPeeringRoutesNetworksResponse) {
    option (google.api.http) = {
      get: "{project}/global/networks/{network}/listPeeringRoutes"
    };
  }

  rpc Patch(PatchNetworkRequest) returns (PatchNetworkResponse) {
    option (google.api.http) = {
      patch: "{project}/global/networks/{network}"
      body: "network_resource"
    };
  }

  rpc RemovePeering(RemovePeeringNetworkRequest) returns (RemovePeeringNetworkResponse) {
    option (google.api.http) = {
      post: "{project}/global/networks/{network}/removePeering"
      body: "networks_remove_peering_request_resource"
    };
  }

  rpc SwitchToCustomMode(SwitchToCustomModeNetworkRequest) returns (SwitchToCustomModeNetworkResponse) {
    option (google.api.http) = {
      post: "{project}/global/networks/{network}/switchToCustomMode"
    };
  }

  rpc UpdatePeering(UpdatePeeringNetworkRequest) returns (UpdatePeeringNetworkResponse) {
    option (google.api.http) = {
      patch: "{project}/global/networks/{network}/updatePeering"
      body: "networks_update_peering_request_resource"
    };
  }

}

service NodeGroups {
  rpc AddNodes(AddNodesNodeGroupRequest) returns (AddNodesNodeGroupResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/nodeGroups/{nodeGroup}/addNodes"
      body: "node_groups_add_nodes_request_resource"
    };
  }

  rpc AggregatedList(AggregatedListNodeGroupsRequest) returns (AggregatedListNodeGroupsResponse) {
    option (google.api.http) = {
      get: "{project}/aggregated/nodeGroups"
    };
  }

  rpc Delete(DeleteNodeGroupRequest) returns (DeleteNodeGroupResponse) {
    option (google.api.http) = {
      delete: "{project}/zones/{zone}/nodeGroups/{nodeGroup}"
    };
  }

  rpc DeleteNodes(DeleteNodesNodeGroupRequest) returns (DeleteNodesNodeGroupResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/nodeGroups/{nodeGroup}/deleteNodes"
      body: "node_groups_delete_nodes_request_resource"
    };
  }

  rpc Get(GetNodeGroupRequest) returns (GetNodeGroupResponse) {
    option (google.api.http) = {
      get: "{project}/zones/{zone}/nodeGroups/{nodeGroup}"
    };
  }

  rpc GetIamPolicy(GetIamPolicyNodeGroupRequest) returns (GetIamPolicyNodeGroupResponse) {
    option (google.api.http) = {
      get: "{project}/zones/{zone}/nodeGroups/{resource}/getIamPolicy"
    };
  }

  rpc Insert(InsertNodeGroupRequest) returns (InsertNodeGroupResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/nodeGroups"
      body: "node_group_resource"
    };
  }

  rpc List(ListNodeGroupsRequest) returns (ListNodeGroupsResponse) {
    option (google.api.http) = {
      get: "{project}/zones/{zone}/nodeGroups"
    };
  }

  rpc ListNodes(ListNodesNodeGroupsRequest) returns (ListNodesNodeGroupsResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/nodeGroups/{nodeGroup}/listNodes"
    };
  }

  rpc Patch(PatchNodeGroupRequest) returns (PatchNodeGroupResponse) {
    option (google.api.http) = {
      patch: "{project}/zones/{zone}/nodeGroups/{nodeGroup}"
      body: "node_group_resource"
    };
  }

  rpc SetIamPolicy(SetIamPolicyNodeGroupRequest) returns (SetIamPolicyNodeGroupResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/nodeGroups/{resource}/setIamPolicy"
      body: "zone_set_policy_request_resource"
    };
  }

  rpc SetNodeTemplate(SetNodeTemplateNodeGroupRequest) returns (SetNodeTemplateNodeGroupResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/nodeGroups/{nodeGroup}/setNodeTemplate"
      body: "node_groups_set_node_template_request_resource"
    };
  }

  rpc TestIamPermissions(TestIamPermissionsNodeGroupRequest) returns (TestIamPermissionsNodeGroupResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/nodeGroups/{resource}/testIamPermissions"
      body: "test_permissions_request_resource"
    };
  }

}

service NodeTemplates {
  rpc AggregatedList(AggregatedListNodeTemplatesRequest) returns (AggregatedListNodeTemplatesResponse) {
    option (google.api.http) = {
      get: "{project}/aggregated/nodeTemplates"
    };
  }

  rpc Delete(DeleteNodeTemplateRequest) returns (DeleteNodeTemplateResponse) {
    option (google.api.http) = {
      delete: "{project}/regions/{region}/nodeTemplates/{nodeTemplate}"
    };
  }

  rpc Get(GetNodeTemplateRequest) returns (GetNodeTemplateResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/nodeTemplates/{nodeTemplate}"
    };
  }

  rpc GetIamPolicy(GetIamPolicyNodeTemplateRequest) returns (GetIamPolicyNodeTemplateResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/nodeTemplates/{resource}/getIamPolicy"
    };
  }

  rpc Insert(InsertNodeTemplateRequest) returns (InsertNodeTemplateResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/nodeTemplates"
      body: "node_template_resource"
    };
  }

  rpc List(ListNodeTemplatesRequest) returns (ListNodeTemplatesResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/nodeTemplates"
    };
  }

  rpc SetIamPolicy(SetIamPolicyNodeTemplateRequest) returns (SetIamPolicyNodeTemplateResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/nodeTemplates/{resource}/setIamPolicy"
      body: "region_set_policy_request_resource"
    };
  }

  rpc TestIamPermissions(TestIamPermissionsNodeTemplateRequest) returns (TestIamPermissionsNodeTemplateResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/nodeTemplates/{resource}/testIamPermissions"
      body: "test_permissions_request_resource"
    };
  }

}

service NodeTypes {
  rpc AggregatedList(AggregatedListNodeTypesRequest) returns (AggregatedListNodeTypesResponse) {
    option (google.api.http) = {
      get: "{project}/aggregated/nodeTypes"
    };
  }

  rpc Get(GetNodeTypeRequest) returns (GetNodeTypeResponse) {
    option (google.api.http) = {
      get: "{project}/zones/{zone}/nodeTypes/{nodeType}"
    };
  }

  rpc List(ListNodeTypesRequest) returns (ListNodeTypesResponse) {
    option (google.api.http) = {
      get: "{project}/zones/{zone}/nodeTypes"
    };
  }

}

service PacketMirrorings {
  rpc AggregatedList(AggregatedListPacketMirroringsRequest) returns (AggregatedListPacketMirroringsResponse) {
    option (google.api.http) = {
      get: "{project}/aggregated/packetMirrorings"
    };
  }

  rpc Delete(DeletePacketMirroringRequest) returns (DeletePacketMirroringResponse) {
    option (google.api.http) = {
      delete: "{project}/regions/{region}/packetMirrorings/{packetMirroring}"
    };
  }

  rpc Get(GetPacketMirroringRequest) returns (GetPacketMirroringResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/packetMirrorings/{packetMirroring}"
    };
  }

  rpc Insert(InsertPacketMirroringRequest) returns (InsertPacketMirroringResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/packetMirrorings"
      body: "packet_mirroring_resource"
    };
  }

  rpc List(ListPacketMirroringsRequest) returns (ListPacketMirroringsResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/packetMirrorings"
    };
  }

  rpc Patch(PatchPacketMirroringRequest) returns (PatchPacketMirroringResponse) {
    option (google.api.http) = {
      patch: "{project}/regions/{region}/packetMirrorings/{packetMirroring}"
      body: "packet_mirroring_resource"
    };
  }

  rpc TestIamPermissions(TestIamPermissionsPacketMirroringRequest) returns (TestIamPermissionsPacketMirroringResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/packetMirrorings/{resource}/testIamPermissions"
      body: "test_permissions_request_resource"
    };
  }

}

service Projects {
  rpc DisableXpnHost(DisableXpnHostProjectRequest) returns (DisableXpnHostProjectResponse) {
    option (google.api.http) = {
      post: "{project}/disableXpnHost"
    };
  }

  rpc DisableXpnResource(DisableXpnResourceProjectRequest) returns (DisableXpnResourceProjectResponse) {
    option (google.api.http) = {
      post: "{project}/disableXpnResource"
      body: "projects_disable_xpn_resource_request_resource"
    };
  }

  rpc EnableXpnHost(EnableXpnHostProjectRequest) returns (EnableXpnHostProjectResponse) {
    option (google.api.http) = {
      post: "{project}/enableXpnHost"
    };
  }

  rpc EnableXpnResource(EnableXpnResourceProjectRequest) returns (EnableXpnResourceProjectResponse) {
    option (google.api.http) = {
      post: "{project}/enableXpnResource"
      body: "projects_enable_xpn_resource_request_resource"
    };
  }

  rpc Get(GetProjectRequest) returns (GetProjectResponse) {
    option (google.api.http) = {
      get: "{project}"
    };
  }

  rpc GetXpnHost(GetXpnHostProjectRequest) returns (GetXpnHostProjectResponse) {
    option (google.api.http) = {
      get: "{project}/getXpnHost"
    };
  }

  rpc GetXpnResources(GetXpnResourcesProjectsRequest) returns (GetXpnResourcesProjectsResponse) {
    option (google.api.http) = {
      get: "{project}/getXpnResources"
    };
  }

  rpc ListXpnHosts(ListXpnHostsProjectsRequest) returns (ListXpnHostsProjectsResponse) {
    option (google.api.http) = {
      post: "{project}/listXpnHosts"
      body: "projects_list_xpn_hosts_request_resource"
    };
  }

  rpc MoveDisk(MoveDiskProjectRequest) returns (MoveDiskProjectResponse) {
    option (google.api.http) = {
      post: "{project}/moveDisk"
      body: "disk_move_request_resource"
    };
  }

  rpc MoveInstance(MoveInstanceProjectRequest) returns (MoveInstanceProjectResponse) {
    option (google.api.http) = {
      post: "{project}/moveInstance"
      body: "instance_move_request_resource"
    };
  }

  rpc SetCommonInstanceMetadata(SetCommonInstanceMetadataProjectRequest) returns (SetCommonInstanceMetadataProjectResponse) {
    option (google.api.http) = {
      post: "{project}/setCommonInstanceMetadata"
      body: "metadata_resource"
    };
  }

  rpc SetDefaultNetworkTier(SetDefaultNetworkTierProjectRequest) returns (SetDefaultNetworkTierProjectResponse) {
    option (google.api.http) = {
      post: "{project}/setDefaultNetworkTier"
      body: "projects_set_default_network_tier_request_resource"
    };
  }

  rpc SetUsageExportBucket(SetUsageExportBucketProjectRequest) returns (SetUsageExportBucketProjectResponse) {
    option (google.api.http) = {
      post: "{project}/setUsageExportBucket"
      body: "usage_export_location_resource"
    };
  }

}

service RegionAutoscalers {
  rpc Delete(DeleteRegionAutoscalerRequest) returns (DeleteRegionAutoscalerResponse) {
    option (google.api.http) = {
      delete: "{project}/regions/{region}/autoscalers/{autoscaler}"
    };
  }

  rpc Get(GetRegionAutoscalerRequest) returns (GetRegionAutoscalerResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/autoscalers/{autoscaler}"
    };
  }

  rpc Insert(InsertRegionAutoscalerRequest) returns (InsertRegionAutoscalerResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/autoscalers"
      body: "autoscaler_resource"
    };
  }

  rpc List(ListRegionAutoscalersRequest) returns (ListRegionAutoscalersResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/autoscalers"
    };
  }

  rpc Patch(PatchRegionAutoscalerRequest) returns (PatchRegionAutoscalerResponse) {
    option (google.api.http) = {
      patch: "{project}/regions/{region}/autoscalers"
      body: "autoscaler_resource"
    };
  }

  rpc Update(UpdateRegionAutoscalerRequest) returns (UpdateRegionAutoscalerResponse) {
    option (google.api.http) = {
      put: "{project}/regions/{region}/autoscalers"
      body: "autoscaler_resource"
    };
  }

}

service RegionBackendServices {
  rpc Delete(DeleteRegionBackendServiceRequest) returns (DeleteRegionBackendServiceResponse) {
    option (google.api.http) = {
      delete: "{project}/regions/{region}/backendServices/{backendService}"
    };
  }

  rpc Get(GetRegionBackendServiceRequest) returns (GetRegionBackendServiceResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/backendServices/{backendService}"
    };
  }

  rpc GetHealth(GetHealthRegionBackendServiceRequest) returns (GetHealthRegionBackendServiceResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/backendServices/{backendService}/getHealth"
      body: "resource_group_reference_resource"
    };
  }

  rpc Insert(InsertRegionBackendServiceRequest) returns (InsertRegionBackendServiceResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/backendServices"
      body: "backend_service_resource"
    };
  }

  rpc List(ListRegionBackendServicesRequest) returns (ListRegionBackendServicesResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/backendServices"
    };
  }

  rpc Patch(PatchRegionBackendServiceRequest) returns (PatchRegionBackendServiceResponse) {
    option (google.api.http) = {
      patch: "{project}/regions/{region}/backendServices/{backendService}"
      body: "backend_service_resource"
    };
  }

  rpc Update(UpdateRegionBackendServiceRequest) returns (UpdateRegionBackendServiceResponse) {
    option (google.api.http) = {
      put: "{project}/regions/{region}/backendServices/{backendService}"
      body: "backend_service_resource"
    };
  }

}

service RegionCommitments {
  rpc AggregatedList(AggregatedListRegionCommitmentsRequest) returns (AggregatedListRegionCommitmentsResponse) {
    option (google.api.http) = {
      get: "{project}/aggregated/commitments"
    };
  }

  rpc Get(GetRegionCommitmentRequest) returns (GetRegionCommitmentResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/commitments/{commitment}"
    };
  }

  rpc Insert(InsertRegionCommitmentRequest) returns (InsertRegionCommitmentResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/commitments"
      body: "commitment_resource"
    };
  }

  rpc List(ListRegionCommitmentsRequest) returns (ListRegionCommitmentsResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/commitments"
    };
  }

}

service RegionDiskTypes {
  rpc Get(GetRegionDiskTypeRequest) returns (GetRegionDiskTypeResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/diskTypes/{diskType}"
    };
  }

  rpc List(ListRegionDiskTypesRequest) returns (ListRegionDiskTypesResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/diskTypes"
    };
  }

}

service RegionDisks {
  rpc AddResourcePolicies(AddResourcePoliciesRegionDiskRequest) returns (AddResourcePoliciesRegionDiskResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/disks/{disk}/addResourcePolicies"
      body: "region_disks_add_resource_policies_request_resource"
    };
  }

  rpc CreateSnapshot(CreateSnapshotRegionDiskRequest) returns (CreateSnapshotRegionDiskResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/disks/{disk}/createSnapshot"
      body: "snapshot_resource"
    };
  }

  rpc Delete(DeleteRegionDiskRequest) returns (DeleteRegionDiskResponse) {
    option (google.api.http) = {
      delete: "{project}/regions/{region}/disks/{disk}"
    };
  }

  rpc Get(GetRegionDiskRequest) returns (GetRegionDiskResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/disks/{disk}"
    };
  }

  rpc Insert(InsertRegionDiskRequest) returns (InsertRegionDiskResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/disks"
      body: "disk_resource"
    };
  }

  rpc List(ListRegionDisksRequest) returns (ListRegionDisksResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/disks"
    };
  }

  rpc RemoveResourcePolicies(RemoveResourcePoliciesRegionDiskRequest) returns (RemoveResourcePoliciesRegionDiskResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/disks/{disk}/removeResourcePolicies"
      body: "region_disks_remove_resource_policies_request_resource"
    };
  }

  rpc Resize(ResizeRegionDiskRequest) returns (ResizeRegionDiskResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/disks/{disk}/resize"
      body: "region_disks_resize_request_resource"
    };
  }

  rpc SetLabels(SetLabelsRegionDiskRequest) returns (SetLabelsRegionDiskResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/disks/{resource}/setLabels"
      body: "region_set_labels_request_resource"
    };
  }

  rpc TestIamPermissions(TestIamPermissionsRegionDiskRequest) returns (TestIamPermissionsRegionDiskResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/disks/{resource}/testIamPermissions"
      body: "test_permissions_request_resource"
    };
  }

}

service RegionHealthChecks {
  rpc Delete(DeleteRegionHealthCheckRequest) returns (DeleteRegionHealthCheckResponse) {
    option (google.api.http) = {
      delete: "{project}/regions/{region}/healthChecks/{healthCheck}"
    };
  }

  rpc Get(GetRegionHealthCheckRequest) returns (GetRegionHealthCheckResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/healthChecks/{healthCheck}"
    };
  }

  rpc Insert(InsertRegionHealthCheckRequest) returns (InsertRegionHealthCheckResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/healthChecks"
      body: "health_check_resource"
    };
  }

  rpc List(ListRegionHealthChecksRequest) returns (ListRegionHealthChecksResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/healthChecks"
    };
  }

  rpc Patch(PatchRegionHealthCheckRequest) returns (PatchRegionHealthCheckResponse) {
    option (google.api.http) = {
      patch: "{project}/regions/{region}/healthChecks/{healthCheck}"
      body: "health_check_resource"
    };
  }

  rpc Update(UpdateRegionHealthCheckRequest) returns (UpdateRegionHealthCheckResponse) {
    option (google.api.http) = {
      put: "{project}/regions/{region}/healthChecks/{healthCheck}"
      body: "health_check_resource"
    };
  }

}

service RegionInstanceGroupManagers {
  rpc AbandonInstances(AbandonInstancesRegionInstanceGroupManagerRequest) returns (AbandonInstancesRegionInstanceGroupManagerResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/abandonInstances"
      body: "region_instance_group_managers_abandon_instances_request_resource"
    };
  }

  rpc ApplyUpdatesToInstances(ApplyUpdatesToInstancesRegionInstanceGroupManagerRequest) returns (ApplyUpdatesToInstancesRegionInstanceGroupManagerResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/applyUpdatesToInstances"
      body: "region_instance_group_managers_apply_updates_request_resource"
    };
  }

  rpc CreateInstances(CreateInstancesRegionInstanceGroupManagerRequest) returns (CreateInstancesRegionInstanceGroupManagerResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/createInstances"
      body: "region_instance_group_managers_create_instances_request_resource"
    };
  }

  rpc Delete(DeleteRegionInstanceGroupManagerRequest) returns (DeleteRegionInstanceGroupManagerResponse) {
    option (google.api.http) = {
      delete: "{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}"
    };
  }

  rpc DeleteInstances(DeleteInstancesRegionInstanceGroupManagerRequest) returns (DeleteInstancesRegionInstanceGroupManagerResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/deleteInstances"
      body: "region_instance_group_managers_delete_instances_request_resource"
    };
  }

  rpc Get(GetRegionInstanceGroupManagerRequest) returns (GetRegionInstanceGroupManagerResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}"
    };
  }

  rpc Insert(InsertRegionInstanceGroupManagerRequest) returns (InsertRegionInstanceGroupManagerResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/instanceGroupManagers"
      body: "instance_group_manager_resource"
    };
  }

  rpc List(ListRegionInstanceGroupManagersRequest) returns (ListRegionInstanceGroupManagersResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/instanceGroupManagers"
    };
  }

  rpc ListErrors(ListErrorsRegionInstanceGroupManagersRequest) returns (ListErrorsRegionInstanceGroupManagersResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listErrors"
    };
  }

  rpc ListManagedInstances(ListManagedInstancesRegionInstanceGroupManagersRequest) returns (ListManagedInstancesRegionInstanceGroupManagersResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances"
    };
  }

  rpc Patch(PatchRegionInstanceGroupManagerRequest) returns (PatchRegionInstanceGroupManagerResponse) {
    option (google.api.http) = {
      patch: "{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}"
      body: "instance_group_manager_resource"
    };
  }

  rpc RecreateInstances(RecreateInstancesRegionInstanceGroupManagerRequest) returns (RecreateInstancesRegionInstanceGroupManagerResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/recreateInstances"
      body: "region_instance_group_managers_recreate_request_resource"
    };
  }

  rpc Resize(ResizeRegionInstanceGroupManagerRequest) returns (ResizeRegionInstanceGroupManagerResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/resize"
    };
  }

  rpc SetInstanceTemplate(SetInstanceTemplateRegionInstanceGroupManagerRequest) returns (SetInstanceTemplateRegionInstanceGroupManagerResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate"
      body: "region_instance_group_managers_set_template_request_resource"
    };
  }

  rpc SetTargetPools(SetTargetPoolsRegionInstanceGroupManagerRequest) returns (SetTargetPoolsRegionInstanceGroupManagerResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setTargetPools"
      body: "region_instance_group_managers_set_target_pools_request_resource"
    };
  }

}

service RegionInstanceGroups {
  rpc Get(GetRegionInstanceGroupRequest) returns (GetRegionInstanceGroupResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/instanceGroups/{instanceGroup}"
    };
  }

  rpc List(ListRegionInstanceGroupsRequest) returns (ListRegionInstanceGroupsResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/instanceGroups"
    };
  }

  rpc ListInstances(ListInstancesRegionInstanceGroupsRequest) returns (ListInstancesRegionInstanceGroupsResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/instanceGroups/{instanceGroup}/listInstances"
      body: "region_instance_groups_list_instances_request_resource"
    };
  }

  rpc SetNamedPorts(SetNamedPortsRegionInstanceGroupRequest) returns (SetNamedPortsRegionInstanceGroupResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/instanceGroups/{instanceGroup}/setNamedPorts"
      body: "region_instance_groups_set_named_ports_request_resource"
    };
  }

}

service RegionOperations {
  rpc Delete(DeleteRegionOperationRequest) returns (DeleteRegionOperationResponse) {
    option (google.api.http) = {
      delete: "{project}/regions/{region}/operations/{operation}"
    };
  }

  rpc Get(GetRegionOperationRequest) returns (GetRegionOperationResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/operations/{operation}"
    };
  }

  rpc List(ListRegionOperationsRequest) returns (ListRegionOperationsResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/operations"
    };
  }

  rpc Wait(WaitRegionOperationRequest) returns (WaitRegionOperationResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/operations/{operation}/wait"
    };
  }

}

service RegionSslCertificates {
  rpc Delete(DeleteRegionSslCertificateRequest) returns (DeleteRegionSslCertificateResponse) {
    option (google.api.http) = {
      delete: "{project}/regions/{region}/sslCertificates/{sslCertificate}"
    };
  }

  rpc Get(GetRegionSslCertificateRequest) returns (GetRegionSslCertificateResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/sslCertificates/{sslCertificate}"
    };
  }

  rpc Insert(InsertRegionSslCertificateRequest) returns (InsertRegionSslCertificateResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/sslCertificates"
      body: "ssl_certificate_resource"
    };
  }

  rpc List(ListRegionSslCertificatesRequest) returns (ListRegionSslCertificatesResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/sslCertificates"
    };
  }

}

service RegionTargetHttpProxies {
  rpc Delete(DeleteRegionTargetHttpProxyRequest) returns (DeleteRegionTargetHttpProxyResponse) {
    option (google.api.http) = {
      delete: "{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}"
    };
  }

  rpc Get(GetRegionTargetHttpProxyRequest) returns (GetRegionTargetHttpProxyResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}"
    };
  }

  rpc Insert(InsertRegionTargetHttpProxyRequest) returns (InsertRegionTargetHttpProxyResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/targetHttpProxies"
      body: "target_http_proxy_resource"
    };
  }

  rpc List(ListRegionTargetHttpProxiesRequest) returns (ListRegionTargetHttpProxiesResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/targetHttpProxies"
    };
  }

  rpc SetUrlMap(SetUrlMapRegionTargetHttpProxyRequest) returns (SetUrlMapRegionTargetHttpProxyResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}/setUrlMap"
      body: "url_map_reference_resource"
    };
  }

}

service RegionTargetHttpsProxies {
  rpc Delete(DeleteRegionTargetHttpsProxyRequest) returns (DeleteRegionTargetHttpsProxyResponse) {
    option (google.api.http) = {
      delete: "{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}"
    };
  }

  rpc Get(GetRegionTargetHttpsProxyRequest) returns (GetRegionTargetHttpsProxyResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}"
    };
  }

  rpc Insert(InsertRegionTargetHttpsProxyRequest) returns (InsertRegionTargetHttpsProxyResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/targetHttpsProxies"
      body: "target_https_proxy_resource"
    };
  }

  rpc List(ListRegionTargetHttpsProxiesRequest) returns (ListRegionTargetHttpsProxiesResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/targetHttpsProxies"
    };
  }

  rpc SetSslCertificates(SetSslCertificatesRegionTargetHttpsProxyRequest) returns (SetSslCertificatesRegionTargetHttpsProxyResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}/setSslCertificates"
      body: "region_target_https_proxies_set_ssl_certificates_request_resource"
    };
  }

  rpc SetUrlMap(SetUrlMapRegionTargetHttpsProxyRequest) returns (SetUrlMapRegionTargetHttpsProxyResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}/setUrlMap"
      body: "url_map_reference_resource"
    };
  }

}

service RegionUrlMaps {
  rpc Delete(DeleteRegionUrlMapRequest) returns (DeleteRegionUrlMapResponse) {
    option (google.api.http) = {
      delete: "{project}/regions/{region}/urlMaps/{urlMap}"
    };
  }

  rpc Get(GetRegionUrlMapRequest) returns (GetRegionUrlMapResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/urlMaps/{urlMap}"
    };
  }

  rpc Insert(InsertRegionUrlMapRequest) returns (InsertRegionUrlMapResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/urlMaps"
      body: "url_map_resource"
    };
  }

  rpc List(ListRegionUrlMapsRequest) returns (ListRegionUrlMapsResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/urlMaps"
    };
  }

  rpc Patch(PatchRegionUrlMapRequest) returns (PatchRegionUrlMapResponse) {
    option (google.api.http) = {
      patch: "{project}/regions/{region}/urlMaps/{urlMap}"
      body: "url_map_resource"
    };
  }

  rpc Update(UpdateRegionUrlMapRequest) returns (UpdateRegionUrlMapResponse) {
    option (google.api.http) = {
      put: "{project}/regions/{region}/urlMaps/{urlMap}"
      body: "url_map_resource"
    };
  }

  rpc Validate(ValidateRegionUrlMapRequest) returns (ValidateRegionUrlMapResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/urlMaps/{urlMap}/validate"
      body: "region_url_maps_validate_request_resource"
    };
  }

}

service Regions {
  rpc Get(GetRegionRequest) returns (GetRegionResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}"
    };
  }

  rpc List(ListRegionsRequest) returns (ListRegionsResponse) {
    option (google.api.http) = {
      get: "{project}/regions"
    };
  }

}

service Reservations {
  rpc AggregatedList(AggregatedListReservationsRequest) returns (AggregatedListReservationsResponse) {
    option (google.api.http) = {
      get: "{project}/aggregated/reservations"
    };
  }

  rpc Delete(DeleteReservationRequest) returns (DeleteReservationResponse) {
    option (google.api.http) = {
      delete: "{project}/zones/{zone}/reservations/{reservation}"
    };
  }

  rpc Get(GetReservationRequest) returns (GetReservationResponse) {
    option (google.api.http) = {
      get: "{project}/zones/{zone}/reservations/{reservation}"
    };
  }

  rpc GetIamPolicy(GetIamPolicyReservationRequest) returns (GetIamPolicyReservationResponse) {
    option (google.api.http) = {
      get: "{project}/zones/{zone}/reservations/{resource}/getIamPolicy"
    };
  }

  rpc Insert(InsertReservationRequest) returns (InsertReservationResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/reservations"
      body: "reservation_resource"
    };
  }

  rpc List(ListReservationsRequest) returns (ListReservationsResponse) {
    option (google.api.http) = {
      get: "{project}/zones/{zone}/reservations"
    };
  }

  rpc Resize(ResizeReservationRequest) returns (ResizeReservationResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/reservations/{reservation}/resize"
      body: "reservations_resize_request_resource"
    };
  }

  rpc SetIamPolicy(SetIamPolicyReservationRequest) returns (SetIamPolicyReservationResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/reservations/{resource}/setIamPolicy"
      body: "zone_set_policy_request_resource"
    };
  }

  rpc TestIamPermissions(TestIamPermissionsReservationRequest) returns (TestIamPermissionsReservationResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/reservations/{resource}/testIamPermissions"
      body: "test_permissions_request_resource"
    };
  }

}

service ResourcePolicies {
  rpc AggregatedList(AggregatedListResourcePoliciesRequest) returns (AggregatedListResourcePoliciesResponse) {
    option (google.api.http) = {
      get: "{project}/aggregated/resourcePolicies"
    };
  }

  rpc Delete(DeleteResourcePolicyRequest) returns (DeleteResourcePolicyResponse) {
    option (google.api.http) = {
      delete: "{project}/regions/{region}/resourcePolicies/{resourcePolicy}"
    };
  }

  rpc Get(GetResourcePolicyRequest) returns (GetResourcePolicyResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/resourcePolicies/{resourcePolicy}"
    };
  }

  rpc GetIamPolicy(GetIamPolicyResourcePolicyRequest) returns (GetIamPolicyResourcePolicyResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/resourcePolicies/{resource}/getIamPolicy"
    };
  }

  rpc Insert(InsertResourcePolicyRequest) returns (InsertResourcePolicyResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/resourcePolicies"
      body: "resource_policy_resource"
    };
  }

  rpc List(ListResourcePoliciesRequest) returns (ListResourcePoliciesResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/resourcePolicies"
    };
  }

  rpc SetIamPolicy(SetIamPolicyResourcePolicyRequest) returns (SetIamPolicyResourcePolicyResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/resourcePolicies/{resource}/setIamPolicy"
      body: "region_set_policy_request_resource"
    };
  }

  rpc TestIamPermissions(TestIamPermissionsResourcePolicyRequest) returns (TestIamPermissionsResourcePolicyResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/resourcePolicies/{resource}/testIamPermissions"
      body: "test_permissions_request_resource"
    };
  }

}

service Routers {
  rpc AggregatedList(AggregatedListRoutersRequest) returns (AggregatedListRoutersResponse) {
    option (google.api.http) = {
      get: "{project}/aggregated/routers"
    };
  }

  rpc Delete(DeleteRouterRequest) returns (DeleteRouterResponse) {
    option (google.api.http) = {
      delete: "{project}/regions/{region}/routers/{router}"
    };
  }

  rpc Get(GetRouterRequest) returns (GetRouterResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/routers/{router}"
    };
  }

  rpc GetNatMappingInfo(GetNatMappingInfoRoutersRequest) returns (GetNatMappingInfoRoutersResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/routers/{router}/getNatMappingInfo"
    };
  }

  rpc GetRouterStatus(GetRouterStatusRouterRequest) returns (GetRouterStatusRouterResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/routers/{router}/getRouterStatus"
    };
  }

  rpc Insert(InsertRouterRequest) returns (InsertRouterResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/routers"
      body: "router_resource"
    };
  }

  rpc List(ListRoutersRequest) returns (ListRoutersResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/routers"
    };
  }

  rpc Patch(PatchRouterRequest) returns (PatchRouterResponse) {
    option (google.api.http) = {
      patch: "{project}/regions/{region}/routers/{router}"
      body: "router_resource"
    };
  }

  rpc Preview(PreviewRouterRequest) returns (PreviewRouterResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/routers/{router}/preview"
      body: "router_resource"
    };
  }

  rpc Update(UpdateRouterRequest) returns (UpdateRouterResponse) {
    option (google.api.http) = {
      put: "{project}/regions/{region}/routers/{router}"
      body: "router_resource"
    };
  }

}

service Routes {
  rpc Delete(DeleteRouteRequest) returns (DeleteRouteResponse) {
    option (google.api.http) = {
      delete: "{project}/global/routes/{route}"
    };
  }

  rpc Get(GetRouteRequest) returns (GetRouteResponse) {
    option (google.api.http) = {
      get: "{project}/global/routes/{route}"
    };
  }

  rpc Insert(InsertRouteRequest) returns (InsertRouteResponse) {
    option (google.api.http) = {
      post: "{project}/global/routes"
      body: "route_resource"
    };
  }

  rpc List(ListRoutesRequest) returns (ListRoutesResponse) {
    option (google.api.http) = {
      get: "{project}/global/routes"
    };
  }

}

service SecurityPolicies {
  rpc AddRule(AddRuleSecurityPolicyRequest) returns (AddRuleSecurityPolicyResponse) {
    option (google.api.http) = {
      post: "{project}/global/securityPolicies/{securityPolicy}/addRule"
      body: "security_policy_rule_resource"
    };
  }

  rpc Delete(DeleteSecurityPolicyRequest) returns (DeleteSecurityPolicyResponse) {
    option (google.api.http) = {
      delete: "{project}/global/securityPolicies/{securityPolicy}"
    };
  }

  rpc Get(GetSecurityPolicyRequest) returns (GetSecurityPolicyResponse) {
    option (google.api.http) = {
      get: "{project}/global/securityPolicies/{securityPolicy}"
    };
  }

  rpc GetRule(GetRuleSecurityPolicyRequest) returns (GetRuleSecurityPolicyResponse) {
    option (google.api.http) = {
      get: "{project}/global/securityPolicies/{securityPolicy}/getRule"
    };
  }

  rpc Insert(InsertSecurityPolicyRequest) returns (InsertSecurityPolicyResponse) {
    option (google.api.http) = {
      post: "{project}/global/securityPolicies"
      body: "security_policy_resource"
    };
  }

  rpc List(ListSecurityPoliciesRequest) returns (ListSecurityPoliciesResponse) {
    option (google.api.http) = {
      get: "{project}/global/securityPolicies"
    };
  }

  rpc Patch(PatchSecurityPolicyRequest) returns (PatchSecurityPolicyResponse) {
    option (google.api.http) = {
      patch: "{project}/global/securityPolicies/{securityPolicy}"
      body: "security_policy_resource"
    };
  }

  rpc PatchRule(PatchRuleSecurityPolicyRequest) returns (PatchRuleSecurityPolicyResponse) {
    option (google.api.http) = {
      post: "{project}/global/securityPolicies/{securityPolicy}/patchRule"
      body: "security_policy_rule_resource"
    };
  }

  rpc RemoveRule(RemoveRuleSecurityPolicyRequest) returns (RemoveRuleSecurityPolicyResponse) {
    option (google.api.http) = {
      post: "{project}/global/securityPolicies/{securityPolicy}/removeRule"
    };
  }

}

service Snapshots {
  rpc Delete(DeleteSnapshotRequest) returns (DeleteSnapshotResponse) {
    option (google.api.http) = {
      delete: "{project}/global/snapshots/{snapshot}"
    };
  }

  rpc Get(GetSnapshotRequest) returns (GetSnapshotResponse) {
    option (google.api.http) = {
      get: "{project}/global/snapshots/{snapshot}"
    };
  }

  rpc GetIamPolicy(GetIamPolicySnapshotRequest) returns (GetIamPolicySnapshotResponse) {
    option (google.api.http) = {
      get: "{project}/global/snapshots/{resource}/getIamPolicy"
    };
  }

  rpc List(ListSnapshotsRequest) returns (ListSnapshotsResponse) {
    option (google.api.http) = {
      get: "{project}/global/snapshots"
    };
  }

  rpc SetIamPolicy(SetIamPolicySnapshotRequest) returns (SetIamPolicySnapshotResponse) {
    option (google.api.http) = {
      post: "{project}/global/snapshots/{resource}/setIamPolicy"
      body: "global_set_policy_request_resource"
    };
  }

  rpc SetLabels(SetLabelsSnapshotRequest) returns (SetLabelsSnapshotResponse) {
    option (google.api.http) = {
      post: "{project}/global/snapshots/{resource}/setLabels"
      body: "global_set_labels_request_resource"
    };
  }

  rpc TestIamPermissions(TestIamPermissionsSnapshotRequest) returns (TestIamPermissionsSnapshotResponse) {
    option (google.api.http) = {
      post: "{project}/global/snapshots/{resource}/testIamPermissions"
      body: "test_permissions_request_resource"
    };
  }

}

service SslCertificates {
  rpc AggregatedList(AggregatedListSslCertificatesRequest) returns (AggregatedListSslCertificatesResponse) {
    option (google.api.http) = {
      get: "{project}/aggregated/sslCertificates"
    };
  }

  rpc Delete(DeleteSslCertificateRequest) returns (DeleteSslCertificateResponse) {
    option (google.api.http) = {
      delete: "{project}/global/sslCertificates/{sslCertificate}"
    };
  }

  rpc Get(GetSslCertificateRequest) returns (GetSslCertificateResponse) {
    option (google.api.http) = {
      get: "{project}/global/sslCertificates/{sslCertificate}"
    };
  }

  rpc Insert(InsertSslCertificateRequest) returns (InsertSslCertificateResponse) {
    option (google.api.http) = {
      post: "{project}/global/sslCertificates"
      body: "ssl_certificate_resource"
    };
  }

  rpc List(ListSslCertificatesRequest) returns (ListSslCertificatesResponse) {
    option (google.api.http) = {
      get: "{project}/global/sslCertificates"
    };
  }

}

service SslPolicies {
  rpc Delete(DeleteSslPolicyRequest) returns (DeleteSslPolicyResponse) {
    option (google.api.http) = {
      delete: "{project}/global/sslPolicies/{sslPolicy}"
    };
  }

  rpc Get(GetSslPolicyRequest) returns (GetSslPolicyResponse) {
    option (google.api.http) = {
      get: "{project}/global/sslPolicies/{sslPolicy}"
    };
  }

  rpc Insert(InsertSslPolicyRequest) returns (InsertSslPolicyResponse) {
    option (google.api.http) = {
      post: "{project}/global/sslPolicies"
      body: "ssl_policy_resource"
    };
  }

  rpc List(ListSslPoliciesRequest) returns (ListSslPoliciesResponse) {
    option (google.api.http) = {
      get: "{project}/global/sslPolicies"
    };
  }

  rpc ListAvailableFeatures(ListAvailableFeaturesSslPoliciesRequest) returns (ListAvailableFeaturesSslPoliciesResponse) {
    option (google.api.http) = {
      get: "{project}/global/sslPolicies/listAvailableFeatures"
    };
  }

  rpc Patch(PatchSslPolicyRequest) returns (PatchSslPolicyResponse) {
    option (google.api.http) = {
      patch: "{project}/global/sslPolicies/{sslPolicy}"
      body: "ssl_policy_resource"
    };
  }

}

service Subnetworks {
  rpc AggregatedList(AggregatedListSubnetworksRequest) returns (AggregatedListSubnetworksResponse) {
    option (google.api.http) = {
      get: "{project}/aggregated/subnetworks"
    };
  }

  rpc Delete(DeleteSubnetworkRequest) returns (DeleteSubnetworkResponse) {
    option (google.api.http) = {
      delete: "{project}/regions/{region}/subnetworks/{subnetwork}"
    };
  }

  rpc ExpandIpCidrRange(ExpandIpCidrRangeSubnetworkRequest) returns (ExpandIpCidrRangeSubnetworkResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/subnetworks/{subnetwork}/expandIpCidrRange"
      body: "subnetworks_expand_ip_cidr_range_request_resource"
    };
  }

  rpc Get(GetSubnetworkRequest) returns (GetSubnetworkResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/subnetworks/{subnetwork}"
    };
  }

  rpc GetIamPolicy(GetIamPolicySubnetworkRequest) returns (GetIamPolicySubnetworkResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/subnetworks/{resource}/getIamPolicy"
    };
  }

  rpc Insert(InsertSubnetworkRequest) returns (InsertSubnetworkResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/subnetworks"
      body: "subnetwork_resource"
    };
  }

  rpc List(ListSubnetworksRequest) returns (ListSubnetworksResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/subnetworks"
    };
  }

  rpc ListUsable(ListUsableSubnetworksRequest) returns (ListUsableSubnetworksResponse) {
    option (google.api.http) = {
      get: "{project}/aggregated/subnetworks/listUsable"
    };
  }

  rpc Patch(PatchSubnetworkRequest) returns (PatchSubnetworkResponse) {
    option (google.api.http) = {
      patch: "{project}/regions/{region}/subnetworks/{subnetwork}"
      body: "subnetwork_resource"
    };
  }

  rpc SetIamPolicy(SetIamPolicySubnetworkRequest) returns (SetIamPolicySubnetworkResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/subnetworks/{resource}/setIamPolicy"
      body: "region_set_policy_request_resource"
    };
  }

  rpc SetPrivateIpGoogleAccess(SetPrivateIpGoogleAccessSubnetworkRequest) returns (SetPrivateIpGoogleAccessSubnetworkResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/subnetworks/{subnetwork}/setPrivateIpGoogleAccess"
      body: "subnetworks_set_private_ip_google_access_request_resource"
    };
  }

  rpc TestIamPermissions(TestIamPermissionsSubnetworkRequest) returns (TestIamPermissionsSubnetworkResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/subnetworks/{resource}/testIamPermissions"
      body: "test_permissions_request_resource"
    };
  }

}

service TargetHttpProxies {
  rpc AggregatedList(AggregatedListTargetHttpProxiesRequest) returns (AggregatedListTargetHttpProxiesResponse) {
    option (google.api.http) = {
      get: "{project}/aggregated/targetHttpProxies"
    };
  }

  rpc Delete(DeleteTargetHttpProxyRequest) returns (DeleteTargetHttpProxyResponse) {
    option (google.api.http) = {
      delete: "{project}/global/targetHttpProxies/{targetHttpProxy}"
    };
  }

  rpc Get(GetTargetHttpProxyRequest) returns (GetTargetHttpProxyResponse) {
    option (google.api.http) = {
      get: "{project}/global/targetHttpProxies/{targetHttpProxy}"
    };
  }

  rpc Insert(InsertTargetHttpProxyRequest) returns (InsertTargetHttpProxyResponse) {
    option (google.api.http) = {
      post: "{project}/global/targetHttpProxies"
      body: "target_http_proxy_resource"
    };
  }

  rpc List(ListTargetHttpProxiesRequest) returns (ListTargetHttpProxiesResponse) {
    option (google.api.http) = {
      get: "{project}/global/targetHttpProxies"
    };
  }

  rpc SetUrlMap(SetUrlMapTargetHttpProxyRequest) returns (SetUrlMapTargetHttpProxyResponse) {
    option (google.api.http) = {
      post: "{project}/targetHttpProxies/{targetHttpProxy}/setUrlMap"
      body: "url_map_reference_resource"
    };
  }

}

service TargetHttpsProxies {
  rpc AggregatedList(AggregatedListTargetHttpsProxiesRequest) returns (AggregatedListTargetHttpsProxiesResponse) {
    option (google.api.http) = {
      get: "{project}/aggregated/targetHttpsProxies"
    };
  }

  rpc Delete(DeleteTargetHttpsProxyRequest) returns (DeleteTargetHttpsProxyResponse) {
    option (google.api.http) = {
      delete: "{project}/global/targetHttpsProxies/{targetHttpsProxy}"
    };
  }

  rpc Get(GetTargetHttpsProxyRequest) returns (GetTargetHttpsProxyResponse) {
    option (google.api.http) = {
      get: "{project}/global/targetHttpsProxies/{targetHttpsProxy}"
    };
  }

  rpc Insert(InsertTargetHttpsProxyRequest) returns (InsertTargetHttpsProxyResponse) {
    option (google.api.http) = {
      post: "{project}/global/targetHttpsProxies"
      body: "target_https_proxy_resource"
    };
  }

  rpc List(ListTargetHttpsProxiesRequest) returns (ListTargetHttpsProxiesResponse) {
    option (google.api.http) = {
      get: "{project}/global/targetHttpsProxies"
    };
  }

  rpc SetQuicOverride(SetQuicOverrideTargetHttpsProxyRequest) returns (SetQuicOverrideTargetHttpsProxyResponse) {
    option (google.api.http) = {
      post: "{project}/global/targetHttpsProxies/{targetHttpsProxy}/setQuicOverride"
      body: "target_https_proxies_set_quic_override_request_resource"
    };
  }

  rpc SetSslCertificates(SetSslCertificatesTargetHttpsProxyRequest) returns (SetSslCertificatesTargetHttpsProxyResponse) {
    option (google.api.http) = {
      post: "{project}/targetHttpsProxies/{targetHttpsProxy}/setSslCertificates"
      body: "target_https_proxies_set_ssl_certificates_request_resource"
    };
  }

  rpc SetSslPolicy(SetSslPolicyTargetHttpsProxyRequest) returns (SetSslPolicyTargetHttpsProxyResponse) {
    option (google.api.http) = {
      post: "{project}/global/targetHttpsProxies/{targetHttpsProxy}/setSslPolicy"
      body: "ssl_policy_reference_resource"
    };
  }

  rpc SetUrlMap(SetUrlMapTargetHttpsProxyRequest) returns (SetUrlMapTargetHttpsProxyResponse) {
    option (google.api.http) = {
      post: "{project}/targetHttpsProxies/{targetHttpsProxy}/setUrlMap"
      body: "url_map_reference_resource"
    };
  }

}

service TargetInstances {
  rpc AggregatedList(AggregatedListTargetInstancesRequest) returns (AggregatedListTargetInstancesResponse) {
    option (google.api.http) = {
      get: "{project}/aggregated/targetInstances"
    };
  }

  rpc Delete(DeleteTargetInstanceRequest) returns (DeleteTargetInstanceResponse) {
    option (google.api.http) = {
      delete: "{project}/zones/{zone}/targetInstances/{targetInstance}"
    };
  }

  rpc Get(GetTargetInstanceRequest) returns (GetTargetInstanceResponse) {
    option (google.api.http) = {
      get: "{project}/zones/{zone}/targetInstances/{targetInstance}"
    };
  }

  rpc Insert(InsertTargetInstanceRequest) returns (InsertTargetInstanceResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/targetInstances"
      body: "target_instance_resource"
    };
  }

  rpc List(ListTargetInstancesRequest) returns (ListTargetInstancesResponse) {
    option (google.api.http) = {
      get: "{project}/zones/{zone}/targetInstances"
    };
  }

}

service TargetPools {
  rpc AddHealthCheck(AddHealthCheckTargetPoolRequest) returns (AddHealthCheckTargetPoolResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/targetPools/{targetPool}/addHealthCheck"
      body: "target_pools_add_health_check_request_resource"
    };
  }

  rpc AddInstance(AddInstanceTargetPoolRequest) returns (AddInstanceTargetPoolResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/targetPools/{targetPool}/addInstance"
      body: "target_pools_add_instance_request_resource"
    };
  }

  rpc AggregatedList(AggregatedListTargetPoolsRequest) returns (AggregatedListTargetPoolsResponse) {
    option (google.api.http) = {
      get: "{project}/aggregated/targetPools"
    };
  }

  rpc Delete(DeleteTargetPoolRequest) returns (DeleteTargetPoolResponse) {
    option (google.api.http) = {
      delete: "{project}/regions/{region}/targetPools/{targetPool}"
    };
  }

  rpc Get(GetTargetPoolRequest) returns (GetTargetPoolResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/targetPools/{targetPool}"
    };
  }

  rpc GetHealth(GetHealthTargetPoolRequest) returns (GetHealthTargetPoolResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/targetPools/{targetPool}/getHealth"
      body: "instance_reference_resource"
    };
  }

  rpc Insert(InsertTargetPoolRequest) returns (InsertTargetPoolResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/targetPools"
      body: "target_pool_resource"
    };
  }

  rpc List(ListTargetPoolsRequest) returns (ListTargetPoolsResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/targetPools"
    };
  }

  rpc RemoveHealthCheck(RemoveHealthCheckTargetPoolRequest) returns (RemoveHealthCheckTargetPoolResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/targetPools/{targetPool}/removeHealthCheck"
      body: "target_pools_remove_health_check_request_resource"
    };
  }

  rpc RemoveInstance(RemoveInstanceTargetPoolRequest) returns (RemoveInstanceTargetPoolResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/targetPools/{targetPool}/removeInstance"
      body: "target_pools_remove_instance_request_resource"
    };
  }

  rpc SetBackup(SetBackupTargetPoolRequest) returns (SetBackupTargetPoolResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/targetPools/{targetPool}/setBackup"
      body: "target_reference_resource"
    };
  }

}

service TargetSslProxies {
  rpc Delete(DeleteTargetSslProxyRequest) returns (DeleteTargetSslProxyResponse) {
    option (google.api.http) = {
      delete: "{project}/global/targetSslProxies/{targetSslProxy}"
    };
  }

  rpc Get(GetTargetSslProxyRequest) returns (GetTargetSslProxyResponse) {
    option (google.api.http) = {
      get: "{project}/global/targetSslProxies/{targetSslProxy}"
    };
  }

  rpc Insert(InsertTargetSslProxyRequest) returns (InsertTargetSslProxyResponse) {
    option (google.api.http) = {
      post: "{project}/global/targetSslProxies"
      body: "target_ssl_proxy_resource"
    };
  }

  rpc List(ListTargetSslProxiesRequest) returns (ListTargetSslProxiesResponse) {
    option (google.api.http) = {
      get: "{project}/global/targetSslProxies"
    };
  }

  rpc SetBackendService(SetBackendServiceTargetSslProxyRequest) returns (SetBackendServiceTargetSslProxyResponse) {
    option (google.api.http) = {
      post: "{project}/global/targetSslProxies/{targetSslProxy}/setBackendService"
      body: "target_ssl_proxies_set_backend_service_request_resource"
    };
  }

  rpc SetProxyHeader(SetProxyHeaderTargetSslProxyRequest) returns (SetProxyHeaderTargetSslProxyResponse) {
    option (google.api.http) = {
      post: "{project}/global/targetSslProxies/{targetSslProxy}/setProxyHeader"
      body: "target_ssl_proxies_set_proxy_header_request_resource"
    };
  }

  rpc SetSslCertificates(SetSslCertificatesTargetSslProxyRequest) returns (SetSslCertificatesTargetSslProxyResponse) {
    option (google.api.http) = {
      post: "{project}/global/targetSslProxies/{targetSslProxy}/setSslCertificates"
      body: "target_ssl_proxies_set_ssl_certificates_request_resource"
    };
  }

  rpc SetSslPolicy(SetSslPolicyTargetSslProxyRequest) returns (SetSslPolicyTargetSslProxyResponse) {
    option (google.api.http) = {
      post: "{project}/global/targetSslProxies/{targetSslProxy}/setSslPolicy"
      body: "ssl_policy_reference_resource"
    };
  }

}

service TargetTcpProxies {
  rpc Delete(DeleteTargetTcpProxyRequest) returns (DeleteTargetTcpProxyResponse) {
    option (google.api.http) = {
      delete: "{project}/global/targetTcpProxies/{targetTcpProxy}"
    };
  }

  rpc Get(GetTargetTcpProxyRequest) returns (GetTargetTcpProxyResponse) {
    option (google.api.http) = {
      get: "{project}/global/targetTcpProxies/{targetTcpProxy}"
    };
  }

  rpc Insert(InsertTargetTcpProxyRequest) returns (InsertTargetTcpProxyResponse) {
    option (google.api.http) = {
      post: "{project}/global/targetTcpProxies"
      body: "target_tcp_proxy_resource"
    };
  }

  rpc List(ListTargetTcpProxiesRequest) returns (ListTargetTcpProxiesResponse) {
    option (google.api.http) = {
      get: "{project}/global/targetTcpProxies"
    };
  }

  rpc SetBackendService(SetBackendServiceTargetTcpProxyRequest) returns (SetBackendServiceTargetTcpProxyResponse) {
    option (google.api.http) = {
      post: "{project}/global/targetTcpProxies/{targetTcpProxy}/setBackendService"
      body: "target_tcp_proxies_set_backend_service_request_resource"
    };
  }

  rpc SetProxyHeader(SetProxyHeaderTargetTcpProxyRequest) returns (SetProxyHeaderTargetTcpProxyResponse) {
    option (google.api.http) = {
      post: "{project}/global/targetTcpProxies/{targetTcpProxy}/setProxyHeader"
      body: "target_tcp_proxies_set_proxy_header_request_resource"
    };
  }

}

service TargetVpnGateways {
  rpc AggregatedList(AggregatedListTargetVpnGatewaysRequest) returns (AggregatedListTargetVpnGatewaysResponse) {
    option (google.api.http) = {
      get: "{project}/aggregated/targetVpnGateways"
    };
  }

  rpc Delete(DeleteTargetVpnGatewayRequest) returns (DeleteTargetVpnGatewayResponse) {
    option (google.api.http) = {
      delete: "{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}"
    };
  }

  rpc Get(GetTargetVpnGatewayRequest) returns (GetTargetVpnGatewayResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}"
    };
  }

  rpc Insert(InsertTargetVpnGatewayRequest) returns (InsertTargetVpnGatewayResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/targetVpnGateways"
      body: "target_vpn_gateway_resource"
    };
  }

  rpc List(ListTargetVpnGatewaysRequest) returns (ListTargetVpnGatewaysResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/targetVpnGateways"
    };
  }

}

service UrlMaps {
  rpc AggregatedList(AggregatedListUrlMapsRequest) returns (AggregatedListUrlMapsResponse) {
    option (google.api.http) = {
      get: "{project}/aggregated/urlMaps"
    };
  }

  rpc Delete(DeleteUrlMapRequest) returns (DeleteUrlMapResponse) {
    option (google.api.http) = {
      delete: "{project}/global/urlMaps/{urlMap}"
    };
  }

  rpc Get(GetUrlMapRequest) returns (GetUrlMapResponse) {
    option (google.api.http) = {
      get: "{project}/global/urlMaps/{urlMap}"
    };
  }

  rpc Insert(InsertUrlMapRequest) returns (InsertUrlMapResponse) {
    option (google.api.http) = {
      post: "{project}/global/urlMaps"
      body: "url_map_resource"
    };
  }

  rpc InvalidateCache(InvalidateCacheUrlMapRequest) returns (InvalidateCacheUrlMapResponse) {
    option (google.api.http) = {
      post: "{project}/global/urlMaps/{urlMap}/invalidateCache"
      body: "cache_invalidation_rule_resource"
    };
  }

  rpc List(ListUrlMapsRequest) returns (ListUrlMapsResponse) {
    option (google.api.http) = {
      get: "{project}/global/urlMaps"
    };
  }

  rpc Patch(PatchUrlMapRequest) returns (PatchUrlMapResponse) {
    option (google.api.http) = {
      patch: "{project}/global/urlMaps/{urlMap}"
      body: "url_map_resource"
    };
  }

  rpc Update(UpdateUrlMapRequest) returns (UpdateUrlMapResponse) {
    option (google.api.http) = {
      put: "{project}/global/urlMaps/{urlMap}"
      body: "url_map_resource"
    };
  }

  rpc Validate(ValidateUrlMapRequest) returns (ValidateUrlMapResponse) {
    option (google.api.http) = {
      post: "{project}/global/urlMaps/{urlMap}/validate"
      body: "url_maps_validate_request_resource"
    };
  }

}

service VpnGateways {
  rpc AggregatedList(AggregatedListVpnGatewaysRequest) returns (AggregatedListVpnGatewaysResponse) {
    option (google.api.http) = {
      get: "{project}/aggregated/vpnGateways"
    };
  }

  rpc Delete(DeleteVpnGatewayRequest) returns (DeleteVpnGatewayResponse) {
    option (google.api.http) = {
      delete: "{project}/regions/{region}/vpnGateways/{vpnGateway}"
    };
  }

  rpc Get(GetVpnGatewayRequest) returns (GetVpnGatewayResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/vpnGateways/{vpnGateway}"
    };
  }

  rpc GetStatus(GetStatusVpnGatewayRequest) returns (GetStatusVpnGatewayResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/vpnGateways/{vpnGateway}/getStatus"
    };
  }

  rpc Insert(InsertVpnGatewayRequest) returns (InsertVpnGatewayResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/vpnGateways"
      body: "vpn_gateway_resource"
    };
  }

  rpc List(ListVpnGatewaysRequest) returns (ListVpnGatewaysResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/vpnGateways"
    };
  }

  rpc SetLabels(SetLabelsVpnGatewayRequest) returns (SetLabelsVpnGatewayResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/vpnGateways/{resource}/setLabels"
      body: "region_set_labels_request_resource"
    };
  }

  rpc TestIamPermissions(TestIamPermissionsVpnGatewayRequest) returns (TestIamPermissionsVpnGatewayResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/vpnGateways/{resource}/testIamPermissions"
      body: "test_permissions_request_resource"
    };
  }

}

service VpnTunnels {
  rpc AggregatedList(AggregatedListVpnTunnelsRequest) returns (AggregatedListVpnTunnelsResponse) {
    option (google.api.http) = {
      get: "{project}/aggregated/vpnTunnels"
    };
  }

  rpc Delete(DeleteVpnTunnelRequest) returns (DeleteVpnTunnelResponse) {
    option (google.api.http) = {
      delete: "{project}/regions/{region}/vpnTunnels/{vpnTunnel}"
    };
  }

  rpc Get(GetVpnTunnelRequest) returns (GetVpnTunnelResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/vpnTunnels/{vpnTunnel}"
    };
  }

  rpc Insert(InsertVpnTunnelRequest) returns (InsertVpnTunnelResponse) {
    option (google.api.http) = {
      post: "{project}/regions/{region}/vpnTunnels"
      body: "vpn_tunnel_resource"
    };
  }

  rpc List(ListVpnTunnelsRequest) returns (ListVpnTunnelsResponse) {
    option (google.api.http) = {
      get: "{project}/regions/{region}/vpnTunnels"
    };
  }

}

service ZoneOperations {
  rpc Delete(DeleteZoneOperationRequest) returns (DeleteZoneOperationResponse) {
    option (google.api.http) = {
      delete: "{project}/zones/{zone}/operations/{operation}"
    };
  }

  rpc Get(GetZoneOperationRequest) returns (GetZoneOperationResponse) {
    option (google.api.http) = {
      get: "{project}/zones/{zone}/operations/{operation}"
    };
  }

  rpc List(ListZoneOperationsRequest) returns (ListZoneOperationsResponse) {
    option (google.api.http) = {
      get: "{project}/zones/{zone}/operations"
    };
  }

  rpc Wait(WaitZoneOperationRequest) returns (WaitZoneOperationResponse) {
    option (google.api.http) = {
      post: "{project}/zones/{zone}/operations/{operation}/wait"
    };
  }

}

service Zones {
  rpc Get(GetZoneRequest) returns (GetZoneResponse) {
    option (google.api.http) = {
      get: "{project}/zones/{zone}"
    };
  }

  rpc List(ListZonesRequest) returns (ListZonesResponse) {
    option (google.api.http) = {
      get: "{project}/zones"
    };
  }

}

